2024-04-07 00:11:21,716 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.13.1+cu117
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.1+cu117
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: n/a
MMCV CUDA Compiler: n/a
MMClassification: 0.15.0+9232824
------------------------------------------------------------

2024-04-07 00:11:21,717 - mmcls - INFO - Distributed training: False
2024-04-07 00:11:21,891 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=17,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=16,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/test',
        ann_file='data/flowers/meta/test.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=200)
checkpoint_config = dict(interval=100)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/resnet50_flowers_bs16_lr0.1_retry_zay'
gpu_ids = range(0, 1)

2024-04-07 00:11:22,187 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2024-04-07 00:11:22,362 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([17, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([17]): 
NormalInit: mean=0, std=0.01, bias=0 
2024-04-07 00:11:23,864 - mmcls - INFO - Start running, host: zaychan@gpu2-comp-103, work_dir: /userhome/cs2/zaychan/COMP3340Project/CNN_Image_Classification_Code/output/resnet50_flowers_bs16_lr0.1_retry_zay
2024-04-07 00:11:23,864 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-04-07 00:11:23,865 - mmcls - INFO - workflow: [('train', 1)], max: 200 epochs
2024-04-07 00:11:23,865 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/zaychan/COMP3340Project/CNN_Image_Classification_Code/output/resnet50_flowers_bs16_lr0.1_retry_zay by HardDiskBackend.
2024-04-07 00:11:38,182 - mmcls - INFO - Epoch(val) [1][9]	accuracy_top-1: 22.7941, accuracy_top-5: 61.7647
2024-04-07 00:11:48,771 - mmcls - INFO - Epoch(val) [2][9]	accuracy_top-1: 27.9412, accuracy_top-5: 80.1471
2024-04-07 00:11:58,994 - mmcls - INFO - Epoch(val) [3][9]	accuracy_top-1: 42.6471, accuracy_top-5: 86.7647
2024-04-07 00:12:09,101 - mmcls - INFO - Epoch(val) [4][9]	accuracy_top-1: 39.7059, accuracy_top-5: 89.7059
2024-04-07 00:12:19,501 - mmcls - INFO - Epoch(val) [5][9]	accuracy_top-1: 44.1176, accuracy_top-5: 91.9118
2024-04-07 00:12:30,147 - mmcls - INFO - Epoch(val) [6][9]	accuracy_top-1: 50.7353, accuracy_top-5: 91.1765
2024-04-07 00:12:40,602 - mmcls - INFO - Epoch(val) [7][9]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-07 00:12:50,914 - mmcls - INFO - Epoch(val) [8][9]	accuracy_top-1: 41.1765, accuracy_top-5: 86.7647
2024-04-07 00:13:01,121 - mmcls - INFO - Epoch(val) [9][9]	accuracy_top-1: 55.8824, accuracy_top-5: 94.1176
2024-04-07 00:13:11,258 - mmcls - INFO - Epoch(val) [10][9]	accuracy_top-1: 51.4706, accuracy_top-5: 91.1765
2024-04-07 00:13:21,092 - mmcls - INFO - Epoch(val) [11][9]	accuracy_top-1: 55.1471, accuracy_top-5: 91.1765
2024-04-07 00:13:31,209 - mmcls - INFO - Epoch(val) [12][9]	accuracy_top-1: 54.4118, accuracy_top-5: 88.9706
2024-04-07 00:13:41,742 - mmcls - INFO - Epoch(val) [13][9]	accuracy_top-1: 55.1471, accuracy_top-5: 90.4412
2024-04-07 00:13:52,649 - mmcls - INFO - Epoch(val) [14][9]	accuracy_top-1: 47.7941, accuracy_top-5: 94.1176
2024-04-07 00:14:03,348 - mmcls - INFO - Epoch(val) [15][9]	accuracy_top-1: 59.5588, accuracy_top-5: 96.3235
2024-04-07 00:14:14,055 - mmcls - INFO - Epoch(val) [16][9]	accuracy_top-1: 68.3824, accuracy_top-5: 90.4412
2024-04-07 00:14:24,675 - mmcls - INFO - Epoch(val) [17][9]	accuracy_top-1: 60.2941, accuracy_top-5: 92.6471
2024-04-07 00:14:34,957 - mmcls - INFO - Epoch(val) [18][9]	accuracy_top-1: 63.2353, accuracy_top-5: 96.3235
2024-04-07 00:14:46,268 - mmcls - INFO - Epoch(val) [19][9]	accuracy_top-1: 64.7059, accuracy_top-5: 92.6471
2024-04-07 00:14:56,793 - mmcls - INFO - Epoch(val) [20][9]	accuracy_top-1: 65.4412, accuracy_top-5: 94.1176
2024-04-07 00:15:07,726 - mmcls - INFO - Epoch(val) [21][9]	accuracy_top-1: 58.8235, accuracy_top-5: 93.3824
2024-04-07 00:15:17,924 - mmcls - INFO - Epoch(val) [22][9]	accuracy_top-1: 63.2353, accuracy_top-5: 95.5882
2024-04-07 00:15:28,386 - mmcls - INFO - Epoch(val) [23][9]	accuracy_top-1: 68.3824, accuracy_top-5: 97.0588
2024-04-07 00:15:39,659 - mmcls - INFO - Epoch(val) [24][9]	accuracy_top-1: 69.1176, accuracy_top-5: 95.5882
2024-04-07 00:15:50,612 - mmcls - INFO - Epoch(val) [25][9]	accuracy_top-1: 66.1765, accuracy_top-5: 97.0588
2024-04-07 00:16:00,635 - mmcls - INFO - Epoch(val) [26][9]	accuracy_top-1: 63.2353, accuracy_top-5: 94.8529
2024-04-07 00:16:11,061 - mmcls - INFO - Epoch(val) [27][9]	accuracy_top-1: 71.3235, accuracy_top-5: 95.5882
2024-04-07 00:16:21,663 - mmcls - INFO - Epoch(val) [28][9]	accuracy_top-1: 70.5882, accuracy_top-5: 93.3824
2024-04-07 00:16:32,731 - mmcls - INFO - Epoch(val) [29][9]	accuracy_top-1: 61.7647, accuracy_top-5: 96.3235
2024-04-07 00:16:43,387 - mmcls - INFO - Epoch(val) [30][9]	accuracy_top-1: 63.2353, accuracy_top-5: 95.5882
2024-04-07 00:16:53,895 - mmcls - INFO - Epoch(val) [31][9]	accuracy_top-1: 72.7941, accuracy_top-5: 97.7941
2024-04-07 00:17:04,705 - mmcls - INFO - Epoch(val) [32][9]	accuracy_top-1: 72.0588, accuracy_top-5: 95.5882
2024-04-07 00:17:14,918 - mmcls - INFO - Epoch(val) [33][9]	accuracy_top-1: 74.2647, accuracy_top-5: 97.7941
2024-04-07 00:17:24,706 - mmcls - INFO - Epoch(val) [34][9]	accuracy_top-1: 66.9118, accuracy_top-5: 94.1176
2024-04-07 00:17:35,297 - mmcls - INFO - Epoch(val) [35][9]	accuracy_top-1: 71.3235, accuracy_top-5: 99.2647
2024-04-07 00:17:45,601 - mmcls - INFO - Epoch(val) [36][9]	accuracy_top-1: 68.3824, accuracy_top-5: 96.3235
2024-04-07 00:17:56,060 - mmcls - INFO - Epoch(val) [37][9]	accuracy_top-1: 67.6471, accuracy_top-5: 95.5882
2024-04-07 00:18:07,165 - mmcls - INFO - Epoch(val) [38][9]	accuracy_top-1: 64.7059, accuracy_top-5: 95.5882
2024-04-07 00:18:17,807 - mmcls - INFO - Epoch(val) [39][9]	accuracy_top-1: 72.7941, accuracy_top-5: 97.0588
2024-04-07 00:18:28,792 - mmcls - INFO - Epoch(val) [40][9]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-07 00:18:39,524 - mmcls - INFO - Epoch(val) [41][9]	accuracy_top-1: 62.5000, accuracy_top-5: 94.8529
2024-04-07 00:18:50,197 - mmcls - INFO - Epoch(val) [42][9]	accuracy_top-1: 74.2647, accuracy_top-5: 96.3235
2024-04-07 00:19:01,015 - mmcls - INFO - Epoch(val) [43][9]	accuracy_top-1: 64.7059, accuracy_top-5: 94.8529
2024-04-07 00:19:11,251 - mmcls - INFO - Epoch(val) [44][9]	accuracy_top-1: 75.0000, accuracy_top-5: 97.0588
2024-04-07 00:19:21,779 - mmcls - INFO - Epoch(val) [45][9]	accuracy_top-1: 58.0882, accuracy_top-5: 95.5882
2024-04-07 00:19:32,240 - mmcls - INFO - Epoch(val) [46][9]	accuracy_top-1: 75.0000, accuracy_top-5: 96.3235
2024-04-07 00:19:42,269 - mmcls - INFO - Epoch(val) [47][9]	accuracy_top-1: 75.7353, accuracy_top-5: 97.7941
2024-04-07 00:19:52,966 - mmcls - INFO - Epoch(val) [48][9]	accuracy_top-1: 72.7941, accuracy_top-5: 98.5294
2024-04-07 00:20:03,518 - mmcls - INFO - Epoch(val) [49][9]	accuracy_top-1: 77.2059, accuracy_top-5: 94.1176
2024-04-07 00:20:14,084 - mmcls - INFO - Epoch(val) [50][9]	accuracy_top-1: 72.7941, accuracy_top-5: 97.0588
2024-04-07 00:20:24,195 - mmcls - INFO - Epoch(val) [51][9]	accuracy_top-1: 76.4706, accuracy_top-5: 99.2647
2024-04-07 00:20:34,037 - mmcls - INFO - Epoch(val) [52][9]	accuracy_top-1: 77.2059, accuracy_top-5: 96.3235
2024-04-07 00:20:43,963 - mmcls - INFO - Epoch(val) [53][9]	accuracy_top-1: 76.4706, accuracy_top-5: 97.0588
2024-04-07 00:20:54,827 - mmcls - INFO - Epoch(val) [54][9]	accuracy_top-1: 77.2059, accuracy_top-5: 99.2647
2024-04-07 00:21:05,236 - mmcls - INFO - Epoch(val) [55][9]	accuracy_top-1: 78.6765, accuracy_top-5: 97.0588
2024-04-07 00:21:15,738 - mmcls - INFO - Epoch(val) [56][9]	accuracy_top-1: 76.4706, accuracy_top-5: 97.7941
2024-04-07 00:21:25,786 - mmcls - INFO - Epoch(val) [57][9]	accuracy_top-1: 77.2059, accuracy_top-5: 97.0588
2024-04-07 00:21:36,244 - mmcls - INFO - Epoch(val) [58][9]	accuracy_top-1: 76.4706, accuracy_top-5: 99.2647
2024-04-07 00:21:46,996 - mmcls - INFO - Epoch(val) [59][9]	accuracy_top-1: 73.5294, accuracy_top-5: 98.5294
2024-04-07 00:21:58,443 - mmcls - INFO - Epoch(val) [60][9]	accuracy_top-1: 75.0000, accuracy_top-5: 95.5882
2024-04-07 00:22:09,784 - mmcls - INFO - Epoch(val) [61][9]	accuracy_top-1: 80.1471, accuracy_top-5: 97.7941
2024-04-07 00:22:20,044 - mmcls - INFO - Epoch(val) [62][9]	accuracy_top-1: 73.5294, accuracy_top-5: 97.7941
2024-04-07 00:22:30,501 - mmcls - INFO - Epoch(val) [63][9]	accuracy_top-1: 80.8824, accuracy_top-5: 98.5294
2024-04-07 00:22:41,090 - mmcls - INFO - Epoch(val) [64][9]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-07 00:22:51,345 - mmcls - INFO - Epoch(val) [65][9]	accuracy_top-1: 73.5294, accuracy_top-5: 97.7941
2024-04-07 00:23:02,005 - mmcls - INFO - Epoch(val) [66][9]	accuracy_top-1: 81.6176, accuracy_top-5: 97.7941
2024-04-07 00:23:12,010 - mmcls - INFO - Epoch(val) [67][9]	accuracy_top-1: 81.6176, accuracy_top-5: 99.2647
2024-04-07 00:23:22,249 - mmcls - INFO - Epoch(val) [68][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-04-07 00:23:32,622 - mmcls - INFO - Epoch(val) [69][9]	accuracy_top-1: 70.5882, accuracy_top-5: 96.3235
2024-04-07 00:23:43,405 - mmcls - INFO - Epoch(val) [70][9]	accuracy_top-1: 77.2059, accuracy_top-5: 99.2647
2024-04-07 00:23:53,800 - mmcls - INFO - Epoch(val) [71][9]	accuracy_top-1: 85.2941, accuracy_top-5: 99.2647
2024-04-07 00:24:04,942 - mmcls - INFO - Epoch(val) [72][9]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-07 00:24:15,837 - mmcls - INFO - Epoch(val) [73][9]	accuracy_top-1: 83.8235, accuracy_top-5: 99.2647
2024-04-07 00:24:27,617 - mmcls - INFO - Epoch(val) [74][9]	accuracy_top-1: 77.9412, accuracy_top-5: 99.2647
2024-04-07 00:24:38,349 - mmcls - INFO - Epoch(val) [75][9]	accuracy_top-1: 82.3529, accuracy_top-5: 98.5294
2024-04-07 00:24:49,401 - mmcls - INFO - Epoch(val) [76][9]	accuracy_top-1: 75.0000, accuracy_top-5: 97.7941
2024-04-07 00:25:00,242 - mmcls - INFO - Epoch(val) [77][9]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-07 00:25:10,736 - mmcls - INFO - Epoch(val) [78][9]	accuracy_top-1: 80.8824, accuracy_top-5: 97.7941
2024-04-07 00:25:21,316 - mmcls - INFO - Epoch(val) [79][9]	accuracy_top-1: 76.4706, accuracy_top-5: 95.5882
2024-04-07 00:25:32,343 - mmcls - INFO - Epoch(val) [80][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-07 00:25:42,488 - mmcls - INFO - Epoch(val) [81][9]	accuracy_top-1: 80.8824, accuracy_top-5: 97.0588
2024-04-07 00:25:53,187 - mmcls - INFO - Epoch(val) [82][9]	accuracy_top-1: 74.2647, accuracy_top-5: 97.7941
2024-04-07 00:26:04,321 - mmcls - INFO - Epoch(val) [83][9]	accuracy_top-1: 83.0882, accuracy_top-5: 97.0588
2024-04-07 00:26:14,396 - mmcls - INFO - Epoch(val) [84][9]	accuracy_top-1: 80.8824, accuracy_top-5: 98.5294
2024-04-07 00:26:25,434 - mmcls - INFO - Epoch(val) [85][9]	accuracy_top-1: 81.6176, accuracy_top-5: 99.2647
2024-04-07 00:26:35,937 - mmcls - INFO - Epoch(val) [86][9]	accuracy_top-1: 88.2353, accuracy_top-5: 98.5294
2024-04-07 00:26:46,389 - mmcls - INFO - Epoch(val) [87][9]	accuracy_top-1: 70.5882, accuracy_top-5: 97.7941
2024-04-07 00:26:57,316 - mmcls - INFO - Epoch(val) [88][9]	accuracy_top-1: 80.1471, accuracy_top-5: 98.5294
2024-04-07 00:27:07,554 - mmcls - INFO - Epoch(val) [89][9]	accuracy_top-1: 82.3529, accuracy_top-5: 98.5294
2024-04-07 00:27:18,204 - mmcls - INFO - Epoch(val) [90][9]	accuracy_top-1: 82.3529, accuracy_top-5: 100.0000
2024-04-07 00:27:28,795 - mmcls - INFO - Epoch(val) [91][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-04-07 00:27:39,466 - mmcls - INFO - Epoch(val) [92][9]	accuracy_top-1: 86.0294, accuracy_top-5: 97.7941
2024-04-07 00:27:49,686 - mmcls - INFO - Epoch(val) [93][9]	accuracy_top-1: 77.2059, accuracy_top-5: 99.2647
2024-04-07 00:27:59,684 - mmcls - INFO - Epoch(val) [94][9]	accuracy_top-1: 77.2059, accuracy_top-5: 99.2647
2024-04-07 00:28:09,894 - mmcls - INFO - Epoch(val) [95][9]	accuracy_top-1: 83.0882, accuracy_top-5: 97.7941
2024-04-07 00:28:20,384 - mmcls - INFO - Epoch(val) [96][9]	accuracy_top-1: 86.7647, accuracy_top-5: 98.5294
2024-04-07 00:28:31,116 - mmcls - INFO - Epoch(val) [97][9]	accuracy_top-1: 86.0294, accuracy_top-5: 99.2647
2024-04-07 00:28:41,598 - mmcls - INFO - Epoch(val) [98][9]	accuracy_top-1: 80.1471, accuracy_top-5: 98.5294
2024-04-07 00:28:51,872 - mmcls - INFO - Epoch(val) [99][9]	accuracy_top-1: 77.9412, accuracy_top-5: 96.3235
2024-04-07 00:29:00,826 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-04-07 00:29:03,101 - mmcls - INFO - Epoch(val) [100][9]	accuracy_top-1: 82.3529, accuracy_top-5: 99.2647
2024-04-07 00:29:13,196 - mmcls - INFO - Epoch(val) [101][9]	accuracy_top-1: 86.7647, accuracy_top-5: 99.2647
2024-04-07 00:29:24,273 - mmcls - INFO - Epoch(val) [102][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:29:34,865 - mmcls - INFO - Epoch(val) [103][9]	accuracy_top-1: 89.7059, accuracy_top-5: 100.0000
2024-04-07 00:29:45,463 - mmcls - INFO - Epoch(val) [104][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:29:55,707 - mmcls - INFO - Epoch(val) [105][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:30:06,257 - mmcls - INFO - Epoch(val) [106][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:30:16,668 - mmcls - INFO - Epoch(val) [107][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:30:27,331 - mmcls - INFO - Epoch(val) [108][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:30:37,521 - mmcls - INFO - Epoch(val) [109][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:30:47,864 - mmcls - INFO - Epoch(val) [110][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:30:57,720 - mmcls - INFO - Epoch(val) [111][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:31:07,610 - mmcls - INFO - Epoch(val) [112][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-04-07 00:31:17,907 - mmcls - INFO - Epoch(val) [113][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-04-07 00:31:28,141 - mmcls - INFO - Epoch(val) [114][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:31:39,041 - mmcls - INFO - Epoch(val) [115][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:31:49,264 - mmcls - INFO - Epoch(val) [116][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-04-07 00:31:59,663 - mmcls - INFO - Epoch(val) [117][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:32:10,423 - mmcls - INFO - Epoch(val) [118][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:32:21,346 - mmcls - INFO - Epoch(val) [119][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:32:31,200 - mmcls - INFO - Epoch(val) [120][9]	accuracy_top-1: 88.2353, accuracy_top-5: 99.2647
2024-04-07 00:32:42,057 - mmcls - INFO - Epoch(val) [121][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:32:52,115 - mmcls - INFO - Epoch(val) [122][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:33:01,846 - mmcls - INFO - Epoch(val) [123][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-04-07 00:33:12,550 - mmcls - INFO - Epoch(val) [124][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:33:23,121 - mmcls - INFO - Epoch(val) [125][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:33:33,308 - mmcls - INFO - Epoch(val) [126][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-04-07 00:33:44,064 - mmcls - INFO - Epoch(val) [127][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-04-07 00:33:53,732 - mmcls - INFO - Epoch(val) [128][9]	accuracy_top-1: 86.7647, accuracy_top-5: 99.2647
2024-04-07 00:34:03,333 - mmcls - INFO - Epoch(val) [129][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-04-07 00:34:13,722 - mmcls - INFO - Epoch(val) [130][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:34:23,802 - mmcls - INFO - Epoch(val) [131][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:34:34,389 - mmcls - INFO - Epoch(val) [132][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-04-07 00:34:44,962 - mmcls - INFO - Epoch(val) [133][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-04-07 00:34:55,662 - mmcls - INFO - Epoch(val) [134][9]	accuracy_top-1: 85.2941, accuracy_top-5: 99.2647
2024-04-07 00:35:05,932 - mmcls - INFO - Epoch(val) [135][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-04-07 00:35:16,085 - mmcls - INFO - Epoch(val) [136][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:35:26,715 - mmcls - INFO - Epoch(val) [137][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:35:36,788 - mmcls - INFO - Epoch(val) [138][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:35:47,396 - mmcls - INFO - Epoch(val) [139][9]	accuracy_top-1: 86.7647, accuracy_top-5: 99.2647
2024-04-07 00:35:58,160 - mmcls - INFO - Epoch(val) [140][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:36:08,842 - mmcls - INFO - Epoch(val) [141][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:36:19,241 - mmcls - INFO - Epoch(val) [142][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:36:29,154 - mmcls - INFO - Epoch(val) [143][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:36:39,938 - mmcls - INFO - Epoch(val) [144][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:36:51,093 - mmcls - INFO - Epoch(val) [145][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-04-07 00:37:01,607 - mmcls - INFO - Epoch(val) [146][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:37:12,816 - mmcls - INFO - Epoch(val) [147][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:37:23,914 - mmcls - INFO - Epoch(val) [148][9]	accuracy_top-1: 86.0294, accuracy_top-5: 99.2647
2024-04-07 00:37:34,695 - mmcls - INFO - Epoch(val) [149][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-04-07 00:37:44,769 - mmcls - INFO - Epoch(val) [150][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:37:55,429 - mmcls - INFO - Epoch(val) [151][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:38:06,746 - mmcls - INFO - Epoch(val) [152][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:38:17,535 - mmcls - INFO - Epoch(val) [153][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:38:28,217 - mmcls - INFO - Epoch(val) [154][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:38:39,541 - mmcls - INFO - Epoch(val) [155][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:38:49,715 - mmcls - INFO - Epoch(val) [156][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:38:59,671 - mmcls - INFO - Epoch(val) [157][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:39:10,043 - mmcls - INFO - Epoch(val) [158][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:39:20,544 - mmcls - INFO - Epoch(val) [159][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:39:31,420 - mmcls - INFO - Epoch(val) [160][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:39:42,027 - mmcls - INFO - Epoch(val) [161][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:39:51,942 - mmcls - INFO - Epoch(val) [162][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:40:02,160 - mmcls - INFO - Epoch(val) [163][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:40:12,992 - mmcls - INFO - Epoch(val) [164][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:40:23,688 - mmcls - INFO - Epoch(val) [165][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:40:34,737 - mmcls - INFO - Epoch(val) [166][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:40:44,780 - mmcls - INFO - Epoch(val) [167][9]	accuracy_top-1: 88.2353, accuracy_top-5: 99.2647
2024-04-07 00:40:55,362 - mmcls - INFO - Epoch(val) [168][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:41:06,500 - mmcls - INFO - Epoch(val) [169][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:41:16,826 - mmcls - INFO - Epoch(val) [170][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:41:27,220 - mmcls - INFO - Epoch(val) [171][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:41:37,796 - mmcls - INFO - Epoch(val) [172][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:41:48,350 - mmcls - INFO - Epoch(val) [173][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:41:59,382 - mmcls - INFO - Epoch(val) [174][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:42:09,548 - mmcls - INFO - Epoch(val) [175][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:42:19,947 - mmcls - INFO - Epoch(val) [176][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:42:30,242 - mmcls - INFO - Epoch(val) [177][9]	accuracy_top-1: 86.7647, accuracy_top-5: 99.2647
2024-04-07 00:42:40,750 - mmcls - INFO - Epoch(val) [178][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:42:51,047 - mmcls - INFO - Epoch(val) [179][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:43:01,764 - mmcls - INFO - Epoch(val) [180][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:43:12,203 - mmcls - INFO - Epoch(val) [181][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:43:22,839 - mmcls - INFO - Epoch(val) [182][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:43:33,225 - mmcls - INFO - Epoch(val) [183][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:43:44,089 - mmcls - INFO - Epoch(val) [184][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-04-07 00:43:54,498 - mmcls - INFO - Epoch(val) [185][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:44:05,381 - mmcls - INFO - Epoch(val) [186][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:44:15,448 - mmcls - INFO - Epoch(val) [187][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:44:25,391 - mmcls - INFO - Epoch(val) [188][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:44:35,149 - mmcls - INFO - Epoch(val) [189][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:44:45,060 - mmcls - INFO - Epoch(val) [190][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:44:55,002 - mmcls - INFO - Epoch(val) [191][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:45:05,805 - mmcls - INFO - Epoch(val) [192][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:45:16,575 - mmcls - INFO - Epoch(val) [193][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-04-07 00:45:26,929 - mmcls - INFO - Epoch(val) [194][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:45:37,066 - mmcls - INFO - Epoch(val) [195][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-04-07 00:45:47,807 - mmcls - INFO - Epoch(val) [196][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:45:58,954 - mmcls - INFO - Epoch(val) [197][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:46:09,644 - mmcls - INFO - Epoch(val) [198][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-04-07 00:46:20,055 - mmcls - INFO - Epoch(val) [199][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-04-07 00:46:28,946 - mmcls - INFO - Saving checkpoint at 200 epochs
2024-04-07 00:46:31,132 - mmcls - INFO - Epoch(val) [200][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
