2024-03-05 19:00:24,399 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: GCC 11.4
MMCV CUDA Compiler: 11.8
MMClassification: 0.15.0+cd68008
------------------------------------------------------------

2024-03-05 19:00:24,399 - mmcls - INFO - Distributed training: False
2024-03-05 19:00:24,561 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=17,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=16,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/test',
        ann_file='data/flowers/meta/test.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', momentum=0.8, lr=0.1, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=200)
checkpoint_config = dict(interval=100)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/resnet50/bs16/lr0.1'
gpu_ids = range(0, 1)

2024-03-05 19:00:24,800 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2024-03-05 19:00:25,091 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([17, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([17]): 
NormalInit: mean=0, std=0.01, bias=0 
2024-03-05 19:00:28,368 - mmcls - INFO - Start running, host: cshtimmy@gpu2-comp-107, work_dir: /userhome/cs2/cshtimmy/COMP3340Project/CNN_Image_Classification_Code/output/resnet50/bs16/lr0.1
2024-03-05 19:00:28,368 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-03-05 19:00:28,368 - mmcls - INFO - workflow: [('train', 1)], max: 200 epochs
2024-03-05 19:00:28,369 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/cshtimmy/COMP3340Project/CNN_Image_Classification_Code/output/resnet50/bs16/lr0.1 by HardDiskBackend.
2024-03-05 19:00:41,009 - mmcls - INFO - Epoch(val) [1][9]	accuracy_top-1: 15.4412, accuracy_top-5: 66.1765
2024-03-05 19:00:51,418 - mmcls - INFO - Epoch(val) [2][9]	accuracy_top-1: 29.4118, accuracy_top-5: 84.5588
2024-03-05 19:01:01,785 - mmcls - INFO - Epoch(val) [3][9]	accuracy_top-1: 34.5588, accuracy_top-5: 88.2353
2024-03-05 19:01:12,218 - mmcls - INFO - Epoch(val) [4][9]	accuracy_top-1: 43.3824, accuracy_top-5: 88.2353
2024-03-05 19:01:22,568 - mmcls - INFO - Epoch(val) [5][9]	accuracy_top-1: 43.3824, accuracy_top-5: 90.4412
2024-03-05 19:01:32,991 - mmcls - INFO - Epoch(val) [6][9]	accuracy_top-1: 49.2647, accuracy_top-5: 91.1765
2024-03-05 19:01:43,108 - mmcls - INFO - Epoch(val) [7][9]	accuracy_top-1: 48.5294, accuracy_top-5: 91.1765
2024-03-05 19:01:53,442 - mmcls - INFO - Epoch(val) [8][9]	accuracy_top-1: 52.9412, accuracy_top-5: 93.3824
2024-03-05 19:02:03,844 - mmcls - INFO - Epoch(val) [9][9]	accuracy_top-1: 50.0000, accuracy_top-5: 91.9118
2024-03-05 19:02:14,145 - mmcls - INFO - Epoch(val) [10][9]	accuracy_top-1: 55.8824, accuracy_top-5: 91.9118
2024-03-05 19:02:24,408 - mmcls - INFO - Epoch(val) [11][9]	accuracy_top-1: 51.4706, accuracy_top-5: 91.1765
2024-03-05 19:02:34,731 - mmcls - INFO - Epoch(val) [12][9]	accuracy_top-1: 59.5588, accuracy_top-5: 90.4412
2024-03-05 19:02:45,183 - mmcls - INFO - Epoch(val) [13][9]	accuracy_top-1: 52.9412, accuracy_top-5: 91.1765
2024-03-05 19:02:55,524 - mmcls - INFO - Epoch(val) [14][9]	accuracy_top-1: 56.6176, accuracy_top-5: 93.3824
2024-03-05 19:03:05,940 - mmcls - INFO - Epoch(val) [15][9]	accuracy_top-1: 62.5000, accuracy_top-5: 91.9118
2024-03-05 19:03:16,097 - mmcls - INFO - Epoch(val) [16][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.1765
2024-03-05 19:03:27,396 - mmcls - INFO - Epoch(val) [17][9]	accuracy_top-1: 64.7059, accuracy_top-5: 95.5882
2024-03-05 19:03:37,624 - mmcls - INFO - Epoch(val) [18][9]	accuracy_top-1: 58.8235, accuracy_top-5: 89.7059
2024-03-05 19:03:48,401 - mmcls - INFO - Epoch(val) [19][9]	accuracy_top-1: 64.7059, accuracy_top-5: 91.1765
2024-03-05 19:03:58,921 - mmcls - INFO - Epoch(val) [20][9]	accuracy_top-1: 66.9118, accuracy_top-5: 94.1176
2024-03-05 19:04:09,370 - mmcls - INFO - Epoch(val) [21][9]	accuracy_top-1: 61.0294, accuracy_top-5: 92.6471
2024-03-05 19:04:19,156 - mmcls - INFO - Epoch(val) [22][9]	accuracy_top-1: 61.0294, accuracy_top-5: 95.5882
2024-03-05 19:04:29,359 - mmcls - INFO - Epoch(val) [23][9]	accuracy_top-1: 65.4412, accuracy_top-5: 94.8529
2024-03-05 19:04:39,417 - mmcls - INFO - Epoch(val) [24][9]	accuracy_top-1: 58.8235, accuracy_top-5: 95.5882
2024-03-05 19:04:49,664 - mmcls - INFO - Epoch(val) [25][9]	accuracy_top-1: 69.1176, accuracy_top-5: 96.3235
2024-03-05 19:04:59,980 - mmcls - INFO - Epoch(val) [26][9]	accuracy_top-1: 73.5294, accuracy_top-5: 94.1176
2024-03-05 19:05:10,647 - mmcls - INFO - Epoch(val) [27][9]	accuracy_top-1: 64.7059, accuracy_top-5: 94.8529
2024-03-05 19:05:21,298 - mmcls - INFO - Epoch(val) [28][9]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-03-05 19:05:31,891 - mmcls - INFO - Epoch(val) [29][9]	accuracy_top-1: 62.5000, accuracy_top-5: 95.5882
2024-03-05 19:05:42,642 - mmcls - INFO - Epoch(val) [30][9]	accuracy_top-1: 71.3235, accuracy_top-5: 94.8529
2024-03-05 19:05:53,352 - mmcls - INFO - Epoch(val) [31][9]	accuracy_top-1: 65.4412, accuracy_top-5: 95.5882
2024-03-05 19:06:03,554 - mmcls - INFO - Epoch(val) [32][9]	accuracy_top-1: 66.1765, accuracy_top-5: 94.8529
2024-03-05 19:06:13,804 - mmcls - INFO - Epoch(val) [33][9]	accuracy_top-1: 69.8529, accuracy_top-5: 97.7941
2024-03-05 19:06:24,182 - mmcls - INFO - Epoch(val) [34][9]	accuracy_top-1: 66.9118, accuracy_top-5: 97.0588
2024-03-05 19:06:34,644 - mmcls - INFO - Epoch(val) [35][9]	accuracy_top-1: 65.4412, accuracy_top-5: 94.8529
2024-03-05 19:06:45,037 - mmcls - INFO - Epoch(val) [36][9]	accuracy_top-1: 75.7353, accuracy_top-5: 95.5882
2024-03-05 19:06:55,350 - mmcls - INFO - Epoch(val) [37][9]	accuracy_top-1: 73.5294, accuracy_top-5: 94.1176
2024-03-05 19:07:05,427 - mmcls - INFO - Epoch(val) [38][9]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-03-05 19:07:15,380 - mmcls - INFO - Epoch(val) [39][9]	accuracy_top-1: 73.5294, accuracy_top-5: 95.5882
2024-03-05 19:07:25,599 - mmcls - INFO - Epoch(val) [40][9]	accuracy_top-1: 71.3235, accuracy_top-5: 95.5882
2024-03-05 19:07:35,988 - mmcls - INFO - Epoch(val) [41][9]	accuracy_top-1: 70.5882, accuracy_top-5: 94.1176
2024-03-05 19:07:46,482 - mmcls - INFO - Epoch(val) [42][9]	accuracy_top-1: 72.7941, accuracy_top-5: 94.1176
2024-03-05 19:07:56,556 - mmcls - INFO - Epoch(val) [43][9]	accuracy_top-1: 72.0588, accuracy_top-5: 96.3235
2024-03-05 19:08:06,964 - mmcls - INFO - Epoch(val) [44][9]	accuracy_top-1: 68.3824, accuracy_top-5: 96.3235
2024-03-05 19:08:16,997 - mmcls - INFO - Epoch(val) [45][9]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
2024-03-05 19:08:26,993 - mmcls - INFO - Epoch(val) [46][9]	accuracy_top-1: 75.0000, accuracy_top-5: 96.3235
2024-03-05 19:08:36,878 - mmcls - INFO - Epoch(val) [47][9]	accuracy_top-1: 73.5294, accuracy_top-5: 95.5882
2024-03-05 19:08:46,911 - mmcls - INFO - Epoch(val) [48][9]	accuracy_top-1: 68.3824, accuracy_top-5: 97.0588
2024-03-05 19:08:57,136 - mmcls - INFO - Epoch(val) [49][9]	accuracy_top-1: 72.0588, accuracy_top-5: 97.0588
2024-03-05 19:09:07,025 - mmcls - INFO - Epoch(val) [50][9]	accuracy_top-1: 78.6765, accuracy_top-5: 97.0588
2024-03-05 19:09:17,144 - mmcls - INFO - Epoch(val) [51][9]	accuracy_top-1: 76.4706, accuracy_top-5: 99.2647
2024-03-05 19:09:26,906 - mmcls - INFO - Epoch(val) [52][9]	accuracy_top-1: 72.0588, accuracy_top-5: 98.5294
2024-03-05 19:09:36,861 - mmcls - INFO - Epoch(val) [53][9]	accuracy_top-1: 75.7353, accuracy_top-5: 97.0588
2024-03-05 19:09:47,182 - mmcls - INFO - Epoch(val) [54][9]	accuracy_top-1: 74.2647, accuracy_top-5: 97.7941
2024-03-05 19:09:57,245 - mmcls - INFO - Epoch(val) [55][9]	accuracy_top-1: 75.7353, accuracy_top-5: 97.7941
2024-03-05 19:10:07,366 - mmcls - INFO - Epoch(val) [56][9]	accuracy_top-1: 72.0588, accuracy_top-5: 97.0588
2024-03-05 19:10:17,554 - mmcls - INFO - Epoch(val) [57][9]	accuracy_top-1: 78.6765, accuracy_top-5: 97.0588
2024-03-05 19:10:28,075 - mmcls - INFO - Epoch(val) [58][9]	accuracy_top-1: 72.7941, accuracy_top-5: 96.3235
2024-03-05 19:10:38,370 - mmcls - INFO - Epoch(val) [59][9]	accuracy_top-1: 80.1471, accuracy_top-5: 98.5294
2024-03-05 19:10:49,488 - mmcls - INFO - Epoch(val) [60][9]	accuracy_top-1: 65.4412, accuracy_top-5: 93.3824
2024-03-05 19:11:00,068 - mmcls - INFO - Epoch(val) [61][9]	accuracy_top-1: 68.3824, accuracy_top-5: 97.0588
2024-03-05 19:11:10,834 - mmcls - INFO - Epoch(val) [62][9]	accuracy_top-1: 67.6471, accuracy_top-5: 96.3235
2024-03-05 19:11:21,326 - mmcls - INFO - Epoch(val) [63][9]	accuracy_top-1: 77.9412, accuracy_top-5: 96.3235
2024-03-05 19:11:32,019 - mmcls - INFO - Epoch(val) [64][9]	accuracy_top-1: 75.7353, accuracy_top-5: 96.3235
2024-03-05 19:11:42,218 - mmcls - INFO - Epoch(val) [65][9]	accuracy_top-1: 76.4706, accuracy_top-5: 94.8529
2024-03-05 19:11:52,738 - mmcls - INFO - Epoch(val) [66][9]	accuracy_top-1: 72.7941, accuracy_top-5: 97.0588
2024-03-05 19:12:03,069 - mmcls - INFO - Epoch(val) [67][9]	accuracy_top-1: 77.9412, accuracy_top-5: 96.3235
2024-03-05 19:12:13,342 - mmcls - INFO - Epoch(val) [68][9]	accuracy_top-1: 75.7353, accuracy_top-5: 97.0588
2024-03-05 19:12:23,916 - mmcls - INFO - Epoch(val) [69][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-03-05 19:12:33,965 - mmcls - INFO - Epoch(val) [70][9]	accuracy_top-1: 77.2059, accuracy_top-5: 97.0588
2024-03-05 19:12:44,094 - mmcls - INFO - Epoch(val) [71][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-03-05 19:12:54,135 - mmcls - INFO - Epoch(val) [72][9]	accuracy_top-1: 77.2059, accuracy_top-5: 97.0588
2024-03-05 19:13:04,359 - mmcls - INFO - Epoch(val) [73][9]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-03-05 19:13:14,552 - mmcls - INFO - Epoch(val) [74][9]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-03-05 19:13:24,598 - mmcls - INFO - Epoch(val) [75][9]	accuracy_top-1: 80.8824, accuracy_top-5: 98.5294
2024-03-05 19:13:34,839 - mmcls - INFO - Epoch(val) [76][9]	accuracy_top-1: 78.6765, accuracy_top-5: 95.5882
2024-03-05 19:13:45,126 - mmcls - INFO - Epoch(val) [77][9]	accuracy_top-1: 72.7941, accuracy_top-5: 94.8529
2024-03-05 19:13:55,404 - mmcls - INFO - Epoch(val) [78][9]	accuracy_top-1: 79.4118, accuracy_top-5: 97.0588
2024-03-05 19:14:05,496 - mmcls - INFO - Epoch(val) [79][9]	accuracy_top-1: 79.4118, accuracy_top-5: 96.3235
2024-03-05 19:14:15,629 - mmcls - INFO - Epoch(val) [80][9]	accuracy_top-1: 78.6765, accuracy_top-5: 96.3235
2024-03-05 19:14:26,091 - mmcls - INFO - Epoch(val) [81][9]	accuracy_top-1: 77.2059, accuracy_top-5: 99.2647
2024-03-05 19:14:35,944 - mmcls - INFO - Epoch(val) [82][9]	accuracy_top-1: 79.4118, accuracy_top-5: 95.5882
2024-03-05 19:14:46,174 - mmcls - INFO - Epoch(val) [83][9]	accuracy_top-1: 78.6765, accuracy_top-5: 98.5294
2024-03-05 19:14:56,473 - mmcls - INFO - Epoch(val) [84][9]	accuracy_top-1: 78.6765, accuracy_top-5: 97.0588
2024-03-05 19:15:06,668 - mmcls - INFO - Epoch(val) [85][9]	accuracy_top-1: 76.4706, accuracy_top-5: 97.7941
2024-03-05 19:15:16,639 - mmcls - INFO - Epoch(val) [86][9]	accuracy_top-1: 78.6765, accuracy_top-5: 97.7941
2024-03-05 19:15:26,572 - mmcls - INFO - Epoch(val) [87][9]	accuracy_top-1: 80.1471, accuracy_top-5: 97.7941
2024-03-05 19:15:36,518 - mmcls - INFO - Epoch(val) [88][9]	accuracy_top-1: 79.4118, accuracy_top-5: 97.0588
2024-03-05 19:15:46,695 - mmcls - INFO - Epoch(val) [89][9]	accuracy_top-1: 74.2647, accuracy_top-5: 96.3235
2024-03-05 19:15:56,781 - mmcls - INFO - Epoch(val) [90][9]	accuracy_top-1: 80.1471, accuracy_top-5: 96.3235
2024-03-05 19:16:06,833 - mmcls - INFO - Epoch(val) [91][9]	accuracy_top-1: 82.3529, accuracy_top-5: 99.2647
2024-03-05 19:16:16,910 - mmcls - INFO - Epoch(val) [92][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-03-05 19:16:27,072 - mmcls - INFO - Epoch(val) [93][9]	accuracy_top-1: 80.1471, accuracy_top-5: 98.5294
2024-03-05 19:16:37,115 - mmcls - INFO - Epoch(val) [94][9]	accuracy_top-1: 83.8235, accuracy_top-5: 98.5294
2024-03-05 19:16:47,097 - mmcls - INFO - Epoch(val) [95][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:16:57,232 - mmcls - INFO - Epoch(val) [96][9]	accuracy_top-1: 78.6765, accuracy_top-5: 97.0588
2024-03-05 19:17:07,712 - mmcls - INFO - Epoch(val) [97][9]	accuracy_top-1: 82.3529, accuracy_top-5: 97.7941
2024-03-05 19:17:18,157 - mmcls - INFO - Epoch(val) [98][9]	accuracy_top-1: 80.1471, accuracy_top-5: 97.7941
2024-03-05 19:17:28,552 - mmcls - INFO - Epoch(val) [99][9]	accuracy_top-1: 80.8824, accuracy_top-5: 97.7941
2024-03-05 19:17:37,963 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-03-05 19:17:40,416 - mmcls - INFO - Epoch(val) [100][9]	accuracy_top-1: 81.6176, accuracy_top-5: 98.5294
2024-03-05 19:17:50,588 - mmcls - INFO - Epoch(val) [101][9]	accuracy_top-1: 85.2941, accuracy_top-5: 99.2647
2024-03-05 19:18:00,864 - mmcls - INFO - Epoch(val) [102][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:18:11,076 - mmcls - INFO - Epoch(val) [103][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:18:21,509 - mmcls - INFO - Epoch(val) [104][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:18:31,417 - mmcls - INFO - Epoch(val) [105][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:18:41,597 - mmcls - INFO - Epoch(val) [106][9]	accuracy_top-1: 86.0294, accuracy_top-5: 99.2647
2024-03-05 19:18:51,905 - mmcls - INFO - Epoch(val) [107][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-03-05 19:19:01,929 - mmcls - INFO - Epoch(val) [108][9]	accuracy_top-1: 86.0294, accuracy_top-5: 99.2647
2024-03-05 19:19:12,103 - mmcls - INFO - Epoch(val) [109][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-03-05 19:19:22,270 - mmcls - INFO - Epoch(val) [110][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-03-05 19:19:32,441 - mmcls - INFO - Epoch(val) [111][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:19:42,790 - mmcls - INFO - Epoch(val) [112][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 19:19:53,147 - mmcls - INFO - Epoch(val) [113][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 19:20:03,557 - mmcls - INFO - Epoch(val) [114][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:20:13,731 - mmcls - INFO - Epoch(val) [115][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 19:20:23,859 - mmcls - INFO - Epoch(val) [116][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:20:33,739 - mmcls - INFO - Epoch(val) [117][9]	accuracy_top-1: 83.0882, accuracy_top-5: 99.2647
2024-03-05 19:20:43,707 - mmcls - INFO - Epoch(val) [118][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:20:53,673 - mmcls - INFO - Epoch(val) [119][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:21:03,644 - mmcls - INFO - Epoch(val) [120][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:21:13,834 - mmcls - INFO - Epoch(val) [121][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-03-05 19:21:23,628 - mmcls - INFO - Epoch(val) [122][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:21:33,735 - mmcls - INFO - Epoch(val) [123][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-03-05 19:21:44,037 - mmcls - INFO - Epoch(val) [124][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:21:54,677 - mmcls - INFO - Epoch(val) [125][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:22:04,945 - mmcls - INFO - Epoch(val) [126][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:22:15,257 - mmcls - INFO - Epoch(val) [127][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:22:25,429 - mmcls - INFO - Epoch(val) [128][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:22:35,588 - mmcls - INFO - Epoch(val) [129][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:22:45,759 - mmcls - INFO - Epoch(val) [130][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:22:56,522 - mmcls - INFO - Epoch(val) [131][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:23:06,680 - mmcls - INFO - Epoch(val) [132][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:23:16,938 - mmcls - INFO - Epoch(val) [133][9]	accuracy_top-1: 85.2941, accuracy_top-5: 99.2647
2024-03-05 19:23:27,183 - mmcls - INFO - Epoch(val) [134][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:23:37,437 - mmcls - INFO - Epoch(val) [135][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:23:47,471 - mmcls - INFO - Epoch(val) [136][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:23:57,530 - mmcls - INFO - Epoch(val) [137][9]	accuracy_top-1: 83.8235, accuracy_top-5: 99.2647
2024-03-05 19:24:07,975 - mmcls - INFO - Epoch(val) [138][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-03-05 19:24:18,684 - mmcls - INFO - Epoch(val) [139][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:24:28,481 - mmcls - INFO - Epoch(val) [140][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:24:38,504 - mmcls - INFO - Epoch(val) [141][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-03-05 19:24:48,690 - mmcls - INFO - Epoch(val) [142][9]	accuracy_top-1: 85.2941, accuracy_top-5: 99.2647
2024-03-05 19:24:58,627 - mmcls - INFO - Epoch(val) [143][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:25:08,992 - mmcls - INFO - Epoch(val) [144][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:25:19,351 - mmcls - INFO - Epoch(val) [145][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:25:29,476 - mmcls - INFO - Epoch(val) [146][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:25:39,364 - mmcls - INFO - Epoch(val) [147][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:25:49,368 - mmcls - INFO - Epoch(val) [148][9]	accuracy_top-1: 83.8235, accuracy_top-5: 99.2647
2024-03-05 19:25:59,672 - mmcls - INFO - Epoch(val) [149][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:26:10,176 - mmcls - INFO - Epoch(val) [150][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:26:20,225 - mmcls - INFO - Epoch(val) [151][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-03-05 19:26:31,375 - mmcls - INFO - Epoch(val) [152][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-03-05 19:26:41,451 - mmcls - INFO - Epoch(val) [153][9]	accuracy_top-1: 83.8235, accuracy_top-5: 99.2647
2024-03-05 19:26:51,710 - mmcls - INFO - Epoch(val) [154][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:27:02,342 - mmcls - INFO - Epoch(val) [155][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:27:12,657 - mmcls - INFO - Epoch(val) [156][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:27:22,992 - mmcls - INFO - Epoch(val) [157][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:27:33,604 - mmcls - INFO - Epoch(val) [158][9]	accuracy_top-1: 85.2941, accuracy_top-5: 99.2647
2024-03-05 19:27:44,013 - mmcls - INFO - Epoch(val) [159][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 19:27:54,344 - mmcls - INFO - Epoch(val) [160][9]	accuracy_top-1: 85.2941, accuracy_top-5: 99.2647
2024-03-05 19:28:04,579 - mmcls - INFO - Epoch(val) [161][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:28:14,678 - mmcls - INFO - Epoch(val) [162][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:28:24,979 - mmcls - INFO - Epoch(val) [163][9]	accuracy_top-1: 83.8235, accuracy_top-5: 99.2647
2024-03-05 19:28:35,322 - mmcls - INFO - Epoch(val) [164][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:28:45,583 - mmcls - INFO - Epoch(val) [165][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:28:55,857 - mmcls - INFO - Epoch(val) [166][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:29:05,998 - mmcls - INFO - Epoch(val) [167][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:29:15,899 - mmcls - INFO - Epoch(val) [168][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:29:25,697 - mmcls - INFO - Epoch(val) [169][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-03-05 19:29:35,729 - mmcls - INFO - Epoch(val) [170][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:29:45,833 - mmcls - INFO - Epoch(val) [171][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:29:56,324 - mmcls - INFO - Epoch(val) [172][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:30:06,528 - mmcls - INFO - Epoch(val) [173][9]	accuracy_top-1: 86.0294, accuracy_top-5: 99.2647
2024-03-05 19:30:16,842 - mmcls - INFO - Epoch(val) [174][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:30:26,834 - mmcls - INFO - Epoch(val) [175][9]	accuracy_top-1: 85.2941, accuracy_top-5: 99.2647
2024-03-05 19:30:37,129 - mmcls - INFO - Epoch(val) [176][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:30:47,357 - mmcls - INFO - Epoch(val) [177][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:30:57,484 - mmcls - INFO - Epoch(val) [178][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:31:07,383 - mmcls - INFO - Epoch(val) [179][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-03-05 19:31:17,335 - mmcls - INFO - Epoch(val) [180][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:31:27,289 - mmcls - INFO - Epoch(val) [181][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:31:37,544 - mmcls - INFO - Epoch(val) [182][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:31:47,906 - mmcls - INFO - Epoch(val) [183][9]	accuracy_top-1: 83.8235, accuracy_top-5: 99.2647
2024-03-05 19:31:58,139 - mmcls - INFO - Epoch(val) [184][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:32:08,206 - mmcls - INFO - Epoch(val) [185][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:32:18,449 - mmcls - INFO - Epoch(val) [186][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:32:28,728 - mmcls - INFO - Epoch(val) [187][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-03-05 19:32:38,698 - mmcls - INFO - Epoch(val) [188][9]	accuracy_top-1: 83.0882, accuracy_top-5: 100.0000
2024-03-05 19:32:48,959 - mmcls - INFO - Epoch(val) [189][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-03-05 19:32:59,206 - mmcls - INFO - Epoch(val) [190][9]	accuracy_top-1: 83.8235, accuracy_top-5: 99.2647
2024-03-05 19:33:09,571 - mmcls - INFO - Epoch(val) [191][9]	accuracy_top-1: 85.2941, accuracy_top-5: 100.0000
2024-03-05 19:33:19,634 - mmcls - INFO - Epoch(val) [192][9]	accuracy_top-1: 83.8235, accuracy_top-5: 100.0000
2024-03-05 19:33:29,920 - mmcls - INFO - Epoch(val) [193][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:33:40,051 - mmcls - INFO - Epoch(val) [194][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 19:33:50,242 - mmcls - INFO - Epoch(val) [195][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:34:00,467 - mmcls - INFO - Epoch(val) [196][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:34:10,462 - mmcls - INFO - Epoch(val) [197][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:34:20,540 - mmcls - INFO - Epoch(val) [198][9]	accuracy_top-1: 84.5588, accuracy_top-5: 100.0000
2024-03-05 19:34:30,873 - mmcls - INFO - Epoch(val) [199][9]	accuracy_top-1: 84.5588, accuracy_top-5: 99.2647
2024-03-05 19:34:40,007 - mmcls - INFO - Saving checkpoint at 200 epochs
2024-03-05 19:34:42,355 - mmcls - INFO - Epoch(val) [200][9]	accuracy_top-1: 85.2941, accuracy_top-5: 99.2647
