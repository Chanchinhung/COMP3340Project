2024-03-05 22:00:50,926 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: GCC 11.4
MMCV CUDA Compiler: 11.8
MMClassification: 0.15.0+cd68008
------------------------------------------------------------

2024-03-05 22:00:50,926 - mmcls - INFO - Distributed training: False
2024-03-05 22:00:51,105 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=17,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=16,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/test',
        ann_file='data/flowers/meta/test.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', momentum=0.9, lr=0.1, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=200)
checkpoint_config = dict(interval=100)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/resnet50/bs16/lr0.1/m0.9'
gpu_ids = range(0, 1)

2024-03-05 22:00:51,458 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2024-03-05 22:00:51,742 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([17, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([17]): 
NormalInit: mean=0, std=0.01, bias=0 
2024-03-05 22:00:55,507 - mmcls - INFO - Start running, host: cshtimmy@gpu2-comp-107, work_dir: /userhome/cs2/cshtimmy/COMP3340Project/CNN_Image_Classification_Code/output/resnet50/bs16/lr0.1/m0.9
2024-03-05 22:00:55,508 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-03-05 22:00:55,508 - mmcls - INFO - workflow: [('train', 1)], max: 200 epochs
2024-03-05 22:00:55,508 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/cshtimmy/COMP3340Project/CNN_Image_Classification_Code/output/resnet50/bs16/lr0.1/m0.9 by HardDiskBackend.
2024-03-05 22:01:08,948 - mmcls - INFO - Epoch(val) [1][9]	accuracy_top-1: 22.0588, accuracy_top-5: 58.0882
2024-03-05 22:01:19,352 - mmcls - INFO - Epoch(val) [2][9]	accuracy_top-1: 30.8824, accuracy_top-5: 83.8235
2024-03-05 22:01:29,809 - mmcls - INFO - Epoch(val) [3][9]	accuracy_top-1: 36.7647, accuracy_top-5: 80.8824
2024-03-05 22:01:40,071 - mmcls - INFO - Epoch(val) [4][9]	accuracy_top-1: 42.6471, accuracy_top-5: 86.7647
2024-03-05 22:01:50,593 - mmcls - INFO - Epoch(val) [5][9]	accuracy_top-1: 48.5294, accuracy_top-5: 91.9118
2024-03-05 22:02:00,509 - mmcls - INFO - Epoch(val) [6][9]	accuracy_top-1: 45.5882, accuracy_top-5: 81.6176
2024-03-05 22:02:10,560 - mmcls - INFO - Epoch(val) [7][9]	accuracy_top-1: 38.2353, accuracy_top-5: 92.6471
2024-03-05 22:02:20,658 - mmcls - INFO - Epoch(val) [8][9]	accuracy_top-1: 47.7941, accuracy_top-5: 91.9118
2024-03-05 22:02:30,802 - mmcls - INFO - Epoch(val) [9][9]	accuracy_top-1: 53.6765, accuracy_top-5: 91.1765
2024-03-05 22:02:40,868 - mmcls - INFO - Epoch(val) [10][9]	accuracy_top-1: 55.8824, accuracy_top-5: 90.4412
2024-03-05 22:02:51,076 - mmcls - INFO - Epoch(val) [11][9]	accuracy_top-1: 45.5882, accuracy_top-5: 89.7059
2024-03-05 22:03:01,205 - mmcls - INFO - Epoch(val) [12][9]	accuracy_top-1: 54.4118, accuracy_top-5: 95.5882
2024-03-05 22:03:11,552 - mmcls - INFO - Epoch(val) [13][9]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-03-05 22:03:22,368 - mmcls - INFO - Epoch(val) [14][9]	accuracy_top-1: 58.0882, accuracy_top-5: 91.9118
2024-03-05 22:03:32,571 - mmcls - INFO - Epoch(val) [15][9]	accuracy_top-1: 65.4412, accuracy_top-5: 94.1176
2024-03-05 22:03:42,776 - mmcls - INFO - Epoch(val) [16][9]	accuracy_top-1: 53.6765, accuracy_top-5: 90.4412
2024-03-05 22:03:53,316 - mmcls - INFO - Epoch(val) [17][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-03-05 22:04:03,589 - mmcls - INFO - Epoch(val) [18][9]	accuracy_top-1: 58.8235, accuracy_top-5: 92.6471
2024-03-05 22:04:13,861 - mmcls - INFO - Epoch(val) [19][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.1765
2024-03-05 22:04:23,984 - mmcls - INFO - Epoch(val) [20][9]	accuracy_top-1: 63.2353, accuracy_top-5: 94.8529
2024-03-05 22:04:34,026 - mmcls - INFO - Epoch(val) [21][9]	accuracy_top-1: 57.3529, accuracy_top-5: 94.1176
2024-03-05 22:04:43,968 - mmcls - INFO - Epoch(val) [22][9]	accuracy_top-1: 62.5000, accuracy_top-5: 96.3235
2024-03-05 22:04:54,680 - mmcls - INFO - Epoch(val) [23][9]	accuracy_top-1: 64.7059, accuracy_top-5: 95.5882
2024-03-05 22:05:04,890 - mmcls - INFO - Epoch(val) [24][9]	accuracy_top-1: 61.7647, accuracy_top-5: 94.1176
2024-03-05 22:05:15,087 - mmcls - INFO - Epoch(val) [25][9]	accuracy_top-1: 67.6471, accuracy_top-5: 95.5882
2024-03-05 22:05:25,335 - mmcls - INFO - Epoch(val) [26][9]	accuracy_top-1: 61.0294, accuracy_top-5: 94.1176
2024-03-05 22:05:35,321 - mmcls - INFO - Epoch(val) [27][9]	accuracy_top-1: 61.0294, accuracy_top-5: 94.1176
2024-03-05 22:05:46,008 - mmcls - INFO - Epoch(val) [28][9]	accuracy_top-1: 63.2353, accuracy_top-5: 94.8529
2024-03-05 22:05:56,247 - mmcls - INFO - Epoch(val) [29][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-03-05 22:06:06,683 - mmcls - INFO - Epoch(val) [30][9]	accuracy_top-1: 66.1765, accuracy_top-5: 94.1176
2024-03-05 22:06:17,443 - mmcls - INFO - Epoch(val) [31][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.1176
2024-03-05 22:06:27,684 - mmcls - INFO - Epoch(val) [32][9]	accuracy_top-1: 63.2353, accuracy_top-5: 95.5882
2024-03-05 22:06:37,780 - mmcls - INFO - Epoch(val) [33][9]	accuracy_top-1: 61.0294, accuracy_top-5: 94.1176
2024-03-05 22:06:48,258 - mmcls - INFO - Epoch(val) [34][9]	accuracy_top-1: 72.0588, accuracy_top-5: 97.7941
2024-03-05 22:06:58,511 - mmcls - INFO - Epoch(val) [35][9]	accuracy_top-1: 71.3235, accuracy_top-5: 94.1176
2024-03-05 22:07:08,418 - mmcls - INFO - Epoch(val) [36][9]	accuracy_top-1: 66.9118, accuracy_top-5: 95.5882
2024-03-05 22:07:18,617 - mmcls - INFO - Epoch(val) [37][9]	accuracy_top-1: 68.3824, accuracy_top-5: 97.0588
2024-03-05 22:07:28,619 - mmcls - INFO - Epoch(val) [38][9]	accuracy_top-1: 68.3824, accuracy_top-5: 96.3235
2024-03-05 22:07:38,791 - mmcls - INFO - Epoch(val) [39][9]	accuracy_top-1: 73.5294, accuracy_top-5: 97.0588
2024-03-05 22:07:48,882 - mmcls - INFO - Epoch(val) [40][9]	accuracy_top-1: 77.9412, accuracy_top-5: 95.5882
2024-03-05 22:07:59,076 - mmcls - INFO - Epoch(val) [41][9]	accuracy_top-1: 75.0000, accuracy_top-5: 95.5882
2024-03-05 22:08:09,284 - mmcls - INFO - Epoch(val) [42][9]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-03-05 22:08:19,485 - mmcls - INFO - Epoch(val) [43][9]	accuracy_top-1: 70.5882, accuracy_top-5: 97.0588
2024-03-05 22:08:29,732 - mmcls - INFO - Epoch(val) [44][9]	accuracy_top-1: 77.2059, accuracy_top-5: 97.0588
2024-03-05 22:08:39,701 - mmcls - INFO - Epoch(val) [45][9]	accuracy_top-1: 72.0588, accuracy_top-5: 95.5882
2024-03-05 22:08:49,854 - mmcls - INFO - Epoch(val) [46][9]	accuracy_top-1: 70.5882, accuracy_top-5: 99.2647
2024-03-05 22:08:59,996 - mmcls - INFO - Epoch(val) [47][9]	accuracy_top-1: 72.0588, accuracy_top-5: 95.5882
2024-03-05 22:09:10,306 - mmcls - INFO - Epoch(val) [48][9]	accuracy_top-1: 72.0588, accuracy_top-5: 94.1176
2024-03-05 22:09:20,441 - mmcls - INFO - Epoch(val) [49][9]	accuracy_top-1: 72.0588, accuracy_top-5: 95.5882
2024-03-05 22:09:31,146 - mmcls - INFO - Epoch(val) [50][9]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
2024-03-05 22:09:41,335 - mmcls - INFO - Epoch(val) [51][9]	accuracy_top-1: 72.0588, accuracy_top-5: 94.1176
2024-03-05 22:09:51,738 - mmcls - INFO - Epoch(val) [52][9]	accuracy_top-1: 71.3235, accuracy_top-5: 95.5882
2024-03-05 22:10:02,055 - mmcls - INFO - Epoch(val) [53][9]	accuracy_top-1: 78.6765, accuracy_top-5: 97.7941
2024-03-05 22:10:12,668 - mmcls - INFO - Epoch(val) [54][9]	accuracy_top-1: 78.6765, accuracy_top-5: 97.7941
2024-03-05 22:10:22,942 - mmcls - INFO - Epoch(val) [55][9]	accuracy_top-1: 72.0588, accuracy_top-5: 96.3235
2024-03-05 22:10:33,207 - mmcls - INFO - Epoch(val) [56][9]	accuracy_top-1: 71.3235, accuracy_top-5: 97.0588
2024-03-05 22:10:43,392 - mmcls - INFO - Epoch(val) [57][9]	accuracy_top-1: 79.4118, accuracy_top-5: 95.5882
2024-03-05 22:10:53,329 - mmcls - INFO - Epoch(val) [58][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-03-05 22:11:03,240 - mmcls - INFO - Epoch(val) [59][9]	accuracy_top-1: 74.2647, accuracy_top-5: 98.5294
2024-03-05 22:11:13,607 - mmcls - INFO - Epoch(val) [60][9]	accuracy_top-1: 78.6765, accuracy_top-5: 97.0588
2024-03-05 22:11:24,435 - mmcls - INFO - Epoch(val) [61][9]	accuracy_top-1: 75.0000, accuracy_top-5: 97.7941
2024-03-05 22:11:35,096 - mmcls - INFO - Epoch(val) [62][9]	accuracy_top-1: 73.5294, accuracy_top-5: 97.0588
2024-03-05 22:11:45,250 - mmcls - INFO - Epoch(val) [63][9]	accuracy_top-1: 76.4706, accuracy_top-5: 97.7941
2024-03-05 22:11:55,690 - mmcls - INFO - Epoch(val) [64][9]	accuracy_top-1: 78.6765, accuracy_top-5: 97.7941
2024-03-05 22:12:05,830 - mmcls - INFO - Epoch(val) [65][9]	accuracy_top-1: 69.1176, accuracy_top-5: 96.3235
2024-03-05 22:12:15,719 - mmcls - INFO - Epoch(val) [66][9]	accuracy_top-1: 76.4706, accuracy_top-5: 96.3235
2024-03-05 22:12:26,293 - mmcls - INFO - Epoch(val) [67][9]	accuracy_top-1: 77.2059, accuracy_top-5: 99.2647
2024-03-05 22:12:36,354 - mmcls - INFO - Epoch(val) [68][9]	accuracy_top-1: 84.5588, accuracy_top-5: 98.5294
2024-03-05 22:12:46,602 - mmcls - INFO - Epoch(val) [69][9]	accuracy_top-1: 72.0588, accuracy_top-5: 96.3235
2024-03-05 22:12:56,598 - mmcls - INFO - Epoch(val) [70][9]	accuracy_top-1: 77.9412, accuracy_top-5: 96.3235
2024-03-05 22:13:07,356 - mmcls - INFO - Epoch(val) [71][9]	accuracy_top-1: 76.4706, accuracy_top-5: 97.0588
2024-03-05 22:13:18,115 - mmcls - INFO - Epoch(val) [72][9]	accuracy_top-1: 76.4706, accuracy_top-5: 97.7941
2024-03-05 22:13:29,058 - mmcls - INFO - Epoch(val) [73][9]	accuracy_top-1: 79.4118, accuracy_top-5: 98.5294
2024-03-05 22:13:38,828 - mmcls - INFO - Epoch(val) [74][9]	accuracy_top-1: 77.9412, accuracy_top-5: 96.3235
2024-03-05 22:13:48,922 - mmcls - INFO - Epoch(val) [75][9]	accuracy_top-1: 76.4706, accuracy_top-5: 97.7941
2024-03-05 22:13:59,303 - mmcls - INFO - Epoch(val) [76][9]	accuracy_top-1: 78.6765, accuracy_top-5: 94.8529
2024-03-05 22:14:09,516 - mmcls - INFO - Epoch(val) [77][9]	accuracy_top-1: 77.9412, accuracy_top-5: 96.3235
2024-03-05 22:14:19,694 - mmcls - INFO - Epoch(val) [78][9]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
2024-03-05 22:14:29,990 - mmcls - INFO - Epoch(val) [79][9]	accuracy_top-1: 78.6765, accuracy_top-5: 97.0588
2024-03-05 22:14:40,390 - mmcls - INFO - Epoch(val) [80][9]	accuracy_top-1: 85.2941, accuracy_top-5: 97.7941
2024-03-05 22:14:50,557 - mmcls - INFO - Epoch(val) [81][9]	accuracy_top-1: 79.4118, accuracy_top-5: 97.7941
2024-03-05 22:15:00,795 - mmcls - INFO - Epoch(val) [82][9]	accuracy_top-1: 79.4118, accuracy_top-5: 96.3235
2024-03-05 22:15:10,955 - mmcls - INFO - Epoch(val) [83][9]	accuracy_top-1: 80.8824, accuracy_top-5: 99.2647
2024-03-05 22:15:21,375 - mmcls - INFO - Epoch(val) [84][9]	accuracy_top-1: 77.2059, accuracy_top-5: 96.3235
2024-03-05 22:15:31,728 - mmcls - INFO - Epoch(val) [85][9]	accuracy_top-1: 75.0000, accuracy_top-5: 97.0588
2024-03-05 22:15:41,978 - mmcls - INFO - Epoch(val) [86][9]	accuracy_top-1: 82.3529, accuracy_top-5: 98.5294
2024-03-05 22:15:51,922 - mmcls - INFO - Epoch(val) [87][9]	accuracy_top-1: 76.4706, accuracy_top-5: 95.5882
2024-03-05 22:16:01,776 - mmcls - INFO - Epoch(val) [88][9]	accuracy_top-1: 83.0882, accuracy_top-5: 97.7941
2024-03-05 22:16:12,082 - mmcls - INFO - Epoch(val) [89][9]	accuracy_top-1: 79.4118, accuracy_top-5: 97.7941
2024-03-05 22:16:22,606 - mmcls - INFO - Epoch(val) [90][9]	accuracy_top-1: 83.8235, accuracy_top-5: 99.2647
2024-03-05 22:16:32,895 - mmcls - INFO - Epoch(val) [91][9]	accuracy_top-1: 80.8824, accuracy_top-5: 97.7941
2024-03-05 22:16:42,901 - mmcls - INFO - Epoch(val) [92][9]	accuracy_top-1: 80.1471, accuracy_top-5: 100.0000
2024-03-05 22:16:53,209 - mmcls - INFO - Epoch(val) [93][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-03-05 22:17:03,114 - mmcls - INFO - Epoch(val) [94][9]	accuracy_top-1: 74.2647, accuracy_top-5: 96.3235
2024-03-05 22:17:13,302 - mmcls - INFO - Epoch(val) [95][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-03-05 22:17:23,412 - mmcls - INFO - Epoch(val) [96][9]	accuracy_top-1: 82.3529, accuracy_top-5: 98.5294
2024-03-05 22:17:33,500 - mmcls - INFO - Epoch(val) [97][9]	accuracy_top-1: 81.6176, accuracy_top-5: 98.5294
2024-03-05 22:17:43,380 - mmcls - INFO - Epoch(val) [98][9]	accuracy_top-1: 82.3529, accuracy_top-5: 98.5294
2024-03-05 22:17:53,660 - mmcls - INFO - Epoch(val) [99][9]	accuracy_top-1: 79.4118, accuracy_top-5: 98.5294
2024-03-05 22:18:02,871 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-03-05 22:18:05,383 - mmcls - INFO - Epoch(val) [100][9]	accuracy_top-1: 82.3529, accuracy_top-5: 97.0588
2024-03-05 22:18:15,291 - mmcls - INFO - Epoch(val) [101][9]	accuracy_top-1: 84.5588, accuracy_top-5: 98.5294
2024-03-05 22:18:25,492 - mmcls - INFO - Epoch(val) [102][9]	accuracy_top-1: 85.2941, accuracy_top-5: 97.7941
2024-03-05 22:18:35,769 - mmcls - INFO - Epoch(val) [103][9]	accuracy_top-1: 83.8235, accuracy_top-5: 98.5294
2024-03-05 22:18:45,735 - mmcls - INFO - Epoch(val) [104][9]	accuracy_top-1: 86.0294, accuracy_top-5: 97.0588
2024-03-05 22:18:56,048 - mmcls - INFO - Epoch(val) [105][9]	accuracy_top-1: 84.5588, accuracy_top-5: 98.5294
2024-03-05 22:19:05,965 - mmcls - INFO - Epoch(val) [106][9]	accuracy_top-1: 85.2941, accuracy_top-5: 98.5294
2024-03-05 22:19:16,252 - mmcls - INFO - Epoch(val) [107][9]	accuracy_top-1: 86.0294, accuracy_top-5: 99.2647
2024-03-05 22:19:26,396 - mmcls - INFO - Epoch(val) [108][9]	accuracy_top-1: 86.0294, accuracy_top-5: 98.5294
2024-03-05 22:19:36,356 - mmcls - INFO - Epoch(val) [109][9]	accuracy_top-1: 86.0294, accuracy_top-5: 98.5294
2024-03-05 22:19:46,822 - mmcls - INFO - Epoch(val) [110][9]	accuracy_top-1: 86.0294, accuracy_top-5: 97.7941
2024-03-05 22:19:56,854 - mmcls - INFO - Epoch(val) [111][9]	accuracy_top-1: 83.0882, accuracy_top-5: 97.7941
2024-03-05 22:20:06,885 - mmcls - INFO - Epoch(val) [112][9]	accuracy_top-1: 84.5588, accuracy_top-5: 97.7941
2024-03-05 22:20:17,120 - mmcls - INFO - Epoch(val) [113][9]	accuracy_top-1: 85.2941, accuracy_top-5: 97.7941
2024-03-05 22:20:27,132 - mmcls - INFO - Epoch(val) [114][9]	accuracy_top-1: 86.0294, accuracy_top-5: 98.5294
2024-03-05 22:20:37,412 - mmcls - INFO - Epoch(val) [115][9]	accuracy_top-1: 85.2941, accuracy_top-5: 97.7941
2024-03-05 22:20:47,529 - mmcls - INFO - Epoch(val) [116][9]	accuracy_top-1: 85.2941, accuracy_top-5: 97.7941
2024-03-05 22:20:57,775 - mmcls - INFO - Epoch(val) [117][9]	accuracy_top-1: 86.7647, accuracy_top-5: 97.7941
2024-03-05 22:21:08,570 - mmcls - INFO - Epoch(val) [118][9]	accuracy_top-1: 86.0294, accuracy_top-5: 97.7941
2024-03-05 22:21:18,881 - mmcls - INFO - Epoch(val) [119][9]	accuracy_top-1: 86.7647, accuracy_top-5: 97.7941
2024-03-05 22:21:29,254 - mmcls - INFO - Epoch(val) [120][9]	accuracy_top-1: 85.2941, accuracy_top-5: 97.7941
2024-03-05 22:21:39,472 - mmcls - INFO - Epoch(val) [121][9]	accuracy_top-1: 85.2941, accuracy_top-5: 97.7941
2024-03-05 22:21:49,639 - mmcls - INFO - Epoch(val) [122][9]	accuracy_top-1: 86.7647, accuracy_top-5: 98.5294
2024-03-05 22:21:59,738 - mmcls - INFO - Epoch(val) [123][9]	accuracy_top-1: 88.2353, accuracy_top-5: 98.5294
2024-03-05 22:22:09,990 - mmcls - INFO - Epoch(val) [124][9]	accuracy_top-1: 87.5000, accuracy_top-5: 97.7941
2024-03-05 22:22:20,600 - mmcls - INFO - Epoch(val) [125][9]	accuracy_top-1: 86.7647, accuracy_top-5: 97.7941
2024-03-05 22:22:30,906 - mmcls - INFO - Epoch(val) [126][9]	accuracy_top-1: 86.0294, accuracy_top-5: 97.7941
2024-03-05 22:22:40,855 - mmcls - INFO - Epoch(val) [127][9]	accuracy_top-1: 86.7647, accuracy_top-5: 98.5294
2024-03-05 22:22:51,100 - mmcls - INFO - Epoch(val) [128][9]	accuracy_top-1: 86.0294, accuracy_top-5: 98.5294
2024-03-05 22:23:00,990 - mmcls - INFO - Epoch(val) [129][9]	accuracy_top-1: 86.0294, accuracy_top-5: 97.7941
2024-03-05 22:23:11,235 - mmcls - INFO - Epoch(val) [130][9]	accuracy_top-1: 87.5000, accuracy_top-5: 98.5294
2024-03-05 22:23:21,354 - mmcls - INFO - Epoch(val) [131][9]	accuracy_top-1: 85.2941, accuracy_top-5: 97.7941
2024-03-05 22:23:31,289 - mmcls - INFO - Epoch(val) [132][9]	accuracy_top-1: 86.7647, accuracy_top-5: 97.7941
2024-03-05 22:23:41,239 - mmcls - INFO - Epoch(val) [133][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-03-05 22:23:51,204 - mmcls - INFO - Epoch(val) [134][9]	accuracy_top-1: 86.0294, accuracy_top-5: 99.2647
2024-03-05 22:24:01,054 - mmcls - INFO - Epoch(val) [135][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:24:11,296 - mmcls - INFO - Epoch(val) [136][9]	accuracy_top-1: 86.0294, accuracy_top-5: 98.5294
2024-03-05 22:24:21,302 - mmcls - INFO - Epoch(val) [137][9]	accuracy_top-1: 87.5000, accuracy_top-5: 98.5294
2024-03-05 22:24:31,605 - mmcls - INFO - Epoch(val) [138][9]	accuracy_top-1: 86.0294, accuracy_top-5: 98.5294
2024-03-05 22:24:42,135 - mmcls - INFO - Epoch(val) [139][9]	accuracy_top-1: 86.0294, accuracy_top-5: 99.2647
2024-03-05 22:24:52,616 - mmcls - INFO - Epoch(val) [140][9]	accuracy_top-1: 86.0294, accuracy_top-5: 98.5294
2024-03-05 22:25:02,819 - mmcls - INFO - Epoch(val) [141][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 22:25:12,956 - mmcls - INFO - Epoch(val) [142][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:25:23,239 - mmcls - INFO - Epoch(val) [143][9]	accuracy_top-1: 88.9706, accuracy_top-5: 99.2647
2024-03-05 22:25:33,459 - mmcls - INFO - Epoch(val) [144][9]	accuracy_top-1: 87.5000, accuracy_top-5: 98.5294
2024-03-05 22:25:43,655 - mmcls - INFO - Epoch(val) [145][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 22:25:53,751 - mmcls - INFO - Epoch(val) [146][9]	accuracy_top-1: 86.0294, accuracy_top-5: 98.5294
2024-03-05 22:26:03,771 - mmcls - INFO - Epoch(val) [147][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:26:13,662 - mmcls - INFO - Epoch(val) [148][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:26:23,680 - mmcls - INFO - Epoch(val) [149][9]	accuracy_top-1: 86.7647, accuracy_top-5: 98.5294
2024-03-05 22:26:33,946 - mmcls - INFO - Epoch(val) [150][9]	accuracy_top-1: 85.2941, accuracy_top-5: 99.2647
2024-03-05 22:26:44,192 - mmcls - INFO - Epoch(val) [151][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:26:54,429 - mmcls - INFO - Epoch(val) [152][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-03-05 22:27:04,697 - mmcls - INFO - Epoch(val) [153][9]	accuracy_top-1: 88.9706, accuracy_top-5: 100.0000
2024-03-05 22:27:14,937 - mmcls - INFO - Epoch(val) [154][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:27:25,113 - mmcls - INFO - Epoch(val) [155][9]	accuracy_top-1: 86.7647, accuracy_top-5: 99.2647
2024-03-05 22:27:35,335 - mmcls - INFO - Epoch(val) [156][9]	accuracy_top-1: 88.2353, accuracy_top-5: 99.2647
2024-03-05 22:27:45,393 - mmcls - INFO - Epoch(val) [157][9]	accuracy_top-1: 86.7647, accuracy_top-5: 99.2647
2024-03-05 22:27:55,822 - mmcls - INFO - Epoch(val) [158][9]	accuracy_top-1: 86.7647, accuracy_top-5: 99.2647
2024-03-05 22:28:06,021 - mmcls - INFO - Epoch(val) [159][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-03-05 22:28:15,752 - mmcls - INFO - Epoch(val) [160][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:28:25,785 - mmcls - INFO - Epoch(val) [161][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-03-05 22:28:36,225 - mmcls - INFO - Epoch(val) [162][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-03-05 22:28:46,215 - mmcls - INFO - Epoch(val) [163][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 22:28:56,458 - mmcls - INFO - Epoch(val) [164][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 22:29:06,639 - mmcls - INFO - Epoch(val) [165][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-03-05 22:29:16,725 - mmcls - INFO - Epoch(val) [166][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:29:27,133 - mmcls - INFO - Epoch(val) [167][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 22:29:37,321 - mmcls - INFO - Epoch(val) [168][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 22:29:47,572 - mmcls - INFO - Epoch(val) [169][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 22:29:57,831 - mmcls - INFO - Epoch(val) [170][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:30:07,980 - mmcls - INFO - Epoch(val) [171][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 22:30:18,040 - mmcls - INFO - Epoch(val) [172][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 22:30:28,016 - mmcls - INFO - Epoch(val) [173][9]	accuracy_top-1: 88.2353, accuracy_top-5: 99.2647
2024-03-05 22:30:38,130 - mmcls - INFO - Epoch(val) [174][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 22:30:49,392 - mmcls - INFO - Epoch(val) [175][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-03-05 22:30:59,567 - mmcls - INFO - Epoch(val) [176][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:31:09,855 - mmcls - INFO - Epoch(val) [177][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:31:20,018 - mmcls - INFO - Epoch(val) [178][9]	accuracy_top-1: 88.9706, accuracy_top-5: 99.2647
2024-03-05 22:31:30,779 - mmcls - INFO - Epoch(val) [179][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:31:41,492 - mmcls - INFO - Epoch(val) [180][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 22:31:51,844 - mmcls - INFO - Epoch(val) [181][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:32:02,008 - mmcls - INFO - Epoch(val) [182][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:32:12,318 - mmcls - INFO - Epoch(val) [183][9]	accuracy_top-1: 86.0294, accuracy_top-5: 99.2647
2024-03-05 22:32:22,633 - mmcls - INFO - Epoch(val) [184][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 22:32:32,892 - mmcls - INFO - Epoch(val) [185][9]	accuracy_top-1: 86.0294, accuracy_top-5: 99.2647
2024-03-05 22:32:43,070 - mmcls - INFO - Epoch(val) [186][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 22:32:53,220 - mmcls - INFO - Epoch(val) [187][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:33:03,625 - mmcls - INFO - Epoch(val) [188][9]	accuracy_top-1: 88.2353, accuracy_top-5: 98.5294
2024-03-05 22:33:13,820 - mmcls - INFO - Epoch(val) [189][9]	accuracy_top-1: 87.5000, accuracy_top-5: 100.0000
2024-03-05 22:33:24,129 - mmcls - INFO - Epoch(val) [190][9]	accuracy_top-1: 86.7647, accuracy_top-5: 99.2647
2024-03-05 22:33:34,380 - mmcls - INFO - Epoch(val) [191][9]	accuracy_top-1: 88.2353, accuracy_top-5: 100.0000
2024-03-05 22:33:44,641 - mmcls - INFO - Epoch(val) [192][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:33:54,581 - mmcls - INFO - Epoch(val) [193][9]	accuracy_top-1: 86.0294, accuracy_top-5: 100.0000
2024-03-05 22:34:04,564 - mmcls - INFO - Epoch(val) [194][9]	accuracy_top-1: 86.7647, accuracy_top-5: 99.2647
2024-03-05 22:34:14,878 - mmcls - INFO - Epoch(val) [195][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:34:24,925 - mmcls - INFO - Epoch(val) [196][9]	accuracy_top-1: 86.7647, accuracy_top-5: 99.2647
2024-03-05 22:34:35,755 - mmcls - INFO - Epoch(val) [197][9]	accuracy_top-1: 88.2353, accuracy_top-5: 99.2647
2024-03-05 22:34:45,747 - mmcls - INFO - Epoch(val) [198][9]	accuracy_top-1: 87.5000, accuracy_top-5: 99.2647
2024-03-05 22:34:56,000 - mmcls - INFO - Epoch(val) [199][9]	accuracy_top-1: 86.7647, accuracy_top-5: 100.0000
2024-03-05 22:35:04,902 - mmcls - INFO - Saving checkpoint at 200 epochs
2024-03-05 22:35:07,246 - mmcls - INFO - Epoch(val) [200][9]	accuracy_top-1: 85.2941, accuracy_top-5: 99.2647
