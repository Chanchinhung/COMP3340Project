2024-04-13 17:20:04,708 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: n/a
MMCV CUDA Compiler: n/a
MMClassification: 0.15.0+2b78fde
------------------------------------------------------------

2024-04-13 17:20:04,711 - mmcls - INFO - Distributed training: False
2024-04-13 17:20:04,930 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='SwinTransformer', arch='base', img_size=224, drop_path_rate=0.5),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=17,
        in_channels=1024,
        init_cfg=None,
        loss=dict(
            type='LabelSmoothLoss', label_smooth_val=0.1, mode='original'),
        cal_acc=False),
    init_cfg=[
        dict(type='TruncNormal', layer='Linear', std=0.02, bias=0.0),
        dict(type='Constant', layer='LayerNorm', val=1.0, bias=0.0)
    ],
    train_cfg=dict(augments=[
        dict(type='BatchMixup', alpha=0.8, num_classes=17, prob=0.5),
        dict(type='BatchCutMix', alpha=1.0, num_classes=17, prob=0.5)
    ]))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/test',
        ann_file='data/flowers/meta/test.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.0001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=200)
checkpoint_config = dict(interval=100)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/swin_transformer/bs32/lr0.0001'
gpu_ids = range(0, 1)

2024-04-13 17:20:05,930 - mmcls - INFO - initialize ImageClassifier with init_cfg [{'type': 'TruncNormal', 'layer': 'Linear', 'std': 0.02, 'bias': 0.0}, {'type': 'Constant', 'layer': 'LayerNorm', 'val': 1.0, 'bias': 0.0}]
Name of parameter - Initialization information

backbone.patch_embed.projection.weight - torch.Size([128, 3, 4, 4]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.patch_embed.projection.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.patch_embed.norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.patch_embed.norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.norm1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.norm1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([169, 4]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.0.blocks.0.attn.w_msa.qkv.weight - torch.Size([384, 128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.attn.w_msa.qkv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.attn.w_msa.proj.weight - torch.Size([128, 128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.attn.w_msa.proj.bias - torch.Size([128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.ffn.layers.0.0.weight - torch.Size([512, 128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.ffn.layers.0.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.ffn.layers.1.weight - torch.Size([128, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.ffn.layers.1.bias - torch.Size([128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.norm1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.norm1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([169, 4]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.0.blocks.1.attn.w_msa.qkv.weight - torch.Size([384, 128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.attn.w_msa.qkv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.attn.w_msa.proj.weight - torch.Size([128, 128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.attn.w_msa.proj.bias - torch.Size([128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.ffn.layers.0.0.weight - torch.Size([512, 128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.ffn.layers.0.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.ffn.layers.1.weight - torch.Size([128, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.ffn.layers.1.bias - torch.Size([128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.downsample.norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.downsample.norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.downsample.reduction.weight - torch.Size([256, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([169, 8]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.1.blocks.0.attn.w_msa.qkv.weight - torch.Size([768, 256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.attn.w_msa.qkv.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.attn.w_msa.proj.weight - torch.Size([256, 256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.attn.w_msa.proj.bias - torch.Size([256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.ffn.layers.0.0.bias - torch.Size([1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.ffn.layers.1.weight - torch.Size([256, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.ffn.layers.1.bias - torch.Size([256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([169, 8]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.1.blocks.1.attn.w_msa.qkv.weight - torch.Size([768, 256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.attn.w_msa.qkv.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.attn.w_msa.proj.weight - torch.Size([256, 256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.attn.w_msa.proj.bias - torch.Size([256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.ffn.layers.0.0.bias - torch.Size([1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.ffn.layers.1.weight - torch.Size([256, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.ffn.layers.1.bias - torch.Size([256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.downsample.norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.downsample.norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.downsample.reduction.weight - torch.Size([512, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.0.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.1.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.2.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.3.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.4.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.5.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.6.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.6.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.6.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.6.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.6.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.7.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.7.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.7.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.7.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.7.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.8.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.8.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.8.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.8.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.8.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.9.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.9.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.9.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.9.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.9.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.10.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.10.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.10.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.10.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.10.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.11.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.11.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.11.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.11.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.11.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.12.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.12.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.12.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.12.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.12.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.13.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.13.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.13.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.13.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.13.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.14.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.14.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.14.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.14.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.14.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.15.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.15.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.15.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.15.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.15.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.16.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.16.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.16.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.16.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.16.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.17.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.17.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.17.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.17.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.17.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.downsample.norm.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.downsample.norm.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.downsample.reduction.weight - torch.Size([1024, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([169, 32]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.3.blocks.0.attn.w_msa.qkv.weight - torch.Size([3072, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.attn.w_msa.qkv.bias - torch.Size([3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.attn.w_msa.proj.weight - torch.Size([1024, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.attn.w_msa.proj.bias - torch.Size([1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.ffn.layers.0.0.bias - torch.Size([4096]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.ffn.layers.1.weight - torch.Size([1024, 4096]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.ffn.layers.1.bias - torch.Size([1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([169, 32]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.3.blocks.1.attn.w_msa.qkv.weight - torch.Size([3072, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.attn.w_msa.qkv.bias - torch.Size([3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.attn.w_msa.proj.weight - torch.Size([1024, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.attn.w_msa.proj.bias - torch.Size([1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.ffn.layers.0.0.bias - torch.Size([4096]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.ffn.layers.1.weight - torch.Size([1024, 4096]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.ffn.layers.1.bias - torch.Size([1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.norm3.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.norm3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([17, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

head.fc.bias - torch.Size([17]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 
2024-04-13 17:20:10,587 - mmcls - INFO - Start running, host: cshtimmy@gpu2-comp-122, work_dir: /userhome/cs2/cshtimmy/COMP3340Project/CNN_Image_Classification_Code/output/swin_transformer/bs32/lr0.0001
2024-04-13 17:20:10,587 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-04-13 17:20:10,587 - mmcls - INFO - workflow: [('train', 1)], max: 200 epochs
2024-04-13 17:20:10,587 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/cshtimmy/COMP3340Project/CNN_Image_Classification_Code/output/swin_transformer/bs32/lr0.0001 by HardDiskBackend.
2024-04-13 17:20:32,881 - mmcls - INFO - Epoch(val) [1][5]	accuracy_top-1: 13.9706, accuracy_top-5: 60.2941
2024-04-13 17:20:53,696 - mmcls - INFO - Epoch(val) [2][5]	accuracy_top-1: 16.9118, accuracy_top-5: 72.0588
2024-04-13 17:21:15,705 - mmcls - INFO - Epoch(val) [3][5]	accuracy_top-1: 25.0000, accuracy_top-5: 74.2647
2024-04-13 17:21:38,206 - mmcls - INFO - Epoch(val) [4][5]	accuracy_top-1: 24.2647, accuracy_top-5: 76.4706
2024-04-13 17:22:00,338 - mmcls - INFO - Epoch(val) [5][5]	accuracy_top-1: 25.0000, accuracy_top-5: 77.9412
2024-04-13 17:22:22,978 - mmcls - INFO - Epoch(val) [6][5]	accuracy_top-1: 29.4118, accuracy_top-5: 80.1471
2024-04-13 17:22:45,557 - mmcls - INFO - Epoch(val) [7][5]	accuracy_top-1: 27.9412, accuracy_top-5: 79.4118
2024-04-13 17:23:07,449 - mmcls - INFO - Epoch(val) [8][5]	accuracy_top-1: 30.8824, accuracy_top-5: 82.3529
2024-04-13 17:23:30,444 - mmcls - INFO - Epoch(val) [9][5]	accuracy_top-1: 26.4706, accuracy_top-5: 82.3529
2024-04-13 17:23:53,505 - mmcls - INFO - Epoch(val) [10][5]	accuracy_top-1: 31.6176, accuracy_top-5: 83.8235
2024-04-13 17:24:16,670 - mmcls - INFO - Epoch(val) [11][5]	accuracy_top-1: 28.6765, accuracy_top-5: 82.3529
2024-04-13 17:24:40,160 - mmcls - INFO - Epoch(val) [12][5]	accuracy_top-1: 33.0882, accuracy_top-5: 85.2941
2024-04-13 17:25:03,426 - mmcls - INFO - Epoch(val) [13][5]	accuracy_top-1: 30.1471, accuracy_top-5: 86.7647
2024-04-13 17:25:26,637 - mmcls - INFO - Epoch(val) [14][5]	accuracy_top-1: 31.6176, accuracy_top-5: 86.0294
2024-04-13 17:25:50,183 - mmcls - INFO - Epoch(val) [15][5]	accuracy_top-1: 36.0294, accuracy_top-5: 88.2353
2024-04-13 17:26:13,840 - mmcls - INFO - Epoch(val) [16][5]	accuracy_top-1: 33.0882, accuracy_top-5: 86.0294
2024-04-13 17:26:37,343 - mmcls - INFO - Epoch(val) [17][5]	accuracy_top-1: 34.5588, accuracy_top-5: 86.7647
2024-04-13 17:27:01,057 - mmcls - INFO - Epoch(val) [18][5]	accuracy_top-1: 33.8235, accuracy_top-5: 86.0294
2024-04-13 17:27:24,303 - mmcls - INFO - Epoch(val) [19][5]	accuracy_top-1: 33.0882, accuracy_top-5: 87.5000
2024-04-13 17:27:47,883 - mmcls - INFO - Epoch(val) [20][5]	accuracy_top-1: 35.2941, accuracy_top-5: 86.7647
2024-04-13 17:28:11,412 - mmcls - INFO - Epoch(val) [21][5]	accuracy_top-1: 36.0294, accuracy_top-5: 87.5000
2024-04-13 17:28:35,108 - mmcls - INFO - Epoch(val) [22][5]	accuracy_top-1: 35.2941, accuracy_top-5: 88.2353
2024-04-13 17:28:58,960 - mmcls - INFO - Epoch(val) [23][5]	accuracy_top-1: 34.5588, accuracy_top-5: 88.9706
2024-04-13 17:29:22,663 - mmcls - INFO - Epoch(val) [24][5]	accuracy_top-1: 38.2353, accuracy_top-5: 87.5000
2024-04-13 17:29:46,495 - mmcls - INFO - Epoch(val) [25][5]	accuracy_top-1: 37.5000, accuracy_top-5: 87.5000
2024-04-13 17:30:09,997 - mmcls - INFO - Epoch(val) [26][5]	accuracy_top-1: 36.0294, accuracy_top-5: 89.7059
2024-04-13 17:30:33,630 - mmcls - INFO - Epoch(val) [27][5]	accuracy_top-1: 36.0294, accuracy_top-5: 88.9706
2024-04-13 17:30:57,373 - mmcls - INFO - Epoch(val) [28][5]	accuracy_top-1: 37.5000, accuracy_top-5: 89.7059
2024-04-13 17:31:21,309 - mmcls - INFO - Epoch(val) [29][5]	accuracy_top-1: 37.5000, accuracy_top-5: 89.7059
2024-04-13 17:31:44,870 - mmcls - INFO - Epoch(val) [30][5]	accuracy_top-1: 39.7059, accuracy_top-5: 89.7059
2024-04-13 17:32:08,246 - mmcls - INFO - Epoch(val) [31][5]	accuracy_top-1: 41.9118, accuracy_top-5: 88.9706
2024-04-13 17:32:31,916 - mmcls - INFO - Epoch(val) [32][5]	accuracy_top-1: 41.1765, accuracy_top-5: 89.7059
2024-04-13 17:32:55,427 - mmcls - INFO - Epoch(val) [33][5]	accuracy_top-1: 42.6471, accuracy_top-5: 90.4412
2024-04-13 17:33:18,694 - mmcls - INFO - Epoch(val) [34][5]	accuracy_top-1: 41.9118, accuracy_top-5: 91.1765
2024-04-13 17:33:42,333 - mmcls - INFO - Epoch(val) [35][5]	accuracy_top-1: 41.1765, accuracy_top-5: 91.1765
2024-04-13 17:34:05,578 - mmcls - INFO - Epoch(val) [36][5]	accuracy_top-1: 44.1176, accuracy_top-5: 90.4412
2024-04-13 17:34:29,150 - mmcls - INFO - Epoch(val) [37][5]	accuracy_top-1: 44.1176, accuracy_top-5: 90.4412
2024-04-13 17:34:52,802 - mmcls - INFO - Epoch(val) [38][5]	accuracy_top-1: 41.1765, accuracy_top-5: 89.7059
2024-04-13 17:35:16,287 - mmcls - INFO - Epoch(val) [39][5]	accuracy_top-1: 44.1176, accuracy_top-5: 89.7059
2024-04-13 17:35:39,779 - mmcls - INFO - Epoch(val) [40][5]	accuracy_top-1: 45.5882, accuracy_top-5: 89.7059
2024-04-13 17:36:03,323 - mmcls - INFO - Epoch(val) [41][5]	accuracy_top-1: 42.6471, accuracy_top-5: 91.1765
2024-04-13 17:36:26,940 - mmcls - INFO - Epoch(val) [42][5]	accuracy_top-1: 44.1176, accuracy_top-5: 90.4412
2024-04-13 17:36:50,468 - mmcls - INFO - Epoch(val) [43][5]	accuracy_top-1: 44.1176, accuracy_top-5: 89.7059
2024-04-13 17:37:13,977 - mmcls - INFO - Epoch(val) [44][5]	accuracy_top-1: 44.8529, accuracy_top-5: 89.7059
2024-04-13 17:37:37,424 - mmcls - INFO - Epoch(val) [45][5]	accuracy_top-1: 44.8529, accuracy_top-5: 91.9118
2024-04-13 17:38:00,744 - mmcls - INFO - Epoch(val) [46][5]	accuracy_top-1: 45.5882, accuracy_top-5: 91.9118
2024-04-13 17:38:24,244 - mmcls - INFO - Epoch(val) [47][5]	accuracy_top-1: 46.3235, accuracy_top-5: 91.1765
2024-04-13 17:38:47,534 - mmcls - INFO - Epoch(val) [48][5]	accuracy_top-1: 43.3824, accuracy_top-5: 90.4412
2024-04-13 17:39:11,015 - mmcls - INFO - Epoch(val) [49][5]	accuracy_top-1: 44.1176, accuracy_top-5: 91.1765
2024-04-13 17:39:34,366 - mmcls - INFO - Epoch(val) [50][5]	accuracy_top-1: 43.3824, accuracy_top-5: 91.1765
2024-04-13 17:39:57,903 - mmcls - INFO - Epoch(val) [51][5]	accuracy_top-1: 41.1765, accuracy_top-5: 88.9706
2024-04-13 17:40:21,448 - mmcls - INFO - Epoch(val) [52][5]	accuracy_top-1: 43.3824, accuracy_top-5: 91.9118
2024-04-13 17:40:44,877 - mmcls - INFO - Epoch(val) [53][5]	accuracy_top-1: 47.7941, accuracy_top-5: 91.9118
2024-04-13 17:41:08,292 - mmcls - INFO - Epoch(val) [54][5]	accuracy_top-1: 46.3235, accuracy_top-5: 91.1765
2024-04-13 17:41:31,803 - mmcls - INFO - Epoch(val) [55][5]	accuracy_top-1: 43.3824, accuracy_top-5: 89.7059
2024-04-13 17:41:55,420 - mmcls - INFO - Epoch(val) [56][5]	accuracy_top-1: 44.1176, accuracy_top-5: 90.4412
2024-04-13 17:42:19,102 - mmcls - INFO - Epoch(val) [57][5]	accuracy_top-1: 48.5294, accuracy_top-5: 91.9118
2024-04-13 17:42:42,046 - mmcls - INFO - Epoch(val) [58][5]	accuracy_top-1: 44.8529, accuracy_top-5: 91.1765
2024-04-13 17:43:04,729 - mmcls - INFO - Epoch(val) [59][5]	accuracy_top-1: 45.5882, accuracy_top-5: 88.9706
2024-04-13 17:43:27,829 - mmcls - INFO - Epoch(val) [60][5]	accuracy_top-1: 46.3235, accuracy_top-5: 93.3824
2024-04-13 17:43:50,833 - mmcls - INFO - Epoch(val) [61][5]	accuracy_top-1: 44.8529, accuracy_top-5: 91.9118
2024-04-13 17:44:14,231 - mmcls - INFO - Epoch(val) [62][5]	accuracy_top-1: 47.0588, accuracy_top-5: 91.9118
2024-04-13 17:44:37,699 - mmcls - INFO - Epoch(val) [63][5]	accuracy_top-1: 47.7941, accuracy_top-5: 91.9118
2024-04-13 17:45:01,112 - mmcls - INFO - Epoch(val) [64][5]	accuracy_top-1: 44.1176, accuracy_top-5: 91.1765
2024-04-13 17:45:24,496 - mmcls - INFO - Epoch(val) [65][5]	accuracy_top-1: 48.5294, accuracy_top-5: 90.4412
2024-04-13 17:45:48,197 - mmcls - INFO - Epoch(val) [66][5]	accuracy_top-1: 47.7941, accuracy_top-5: 91.1765
2024-04-13 17:46:11,943 - mmcls - INFO - Epoch(val) [67][5]	accuracy_top-1: 47.0588, accuracy_top-5: 91.1765
2024-04-13 17:46:35,624 - mmcls - INFO - Epoch(val) [68][5]	accuracy_top-1: 46.3235, accuracy_top-5: 93.3824
2024-04-13 17:46:59,208 - mmcls - INFO - Epoch(val) [69][5]	accuracy_top-1: 48.5294, accuracy_top-5: 91.1765
2024-04-13 17:47:22,786 - mmcls - INFO - Epoch(val) [70][5]	accuracy_top-1: 48.5294, accuracy_top-5: 93.3824
2024-04-13 17:47:46,310 - mmcls - INFO - Epoch(val) [71][5]	accuracy_top-1: 47.7941, accuracy_top-5: 91.1765
2024-04-13 17:48:09,787 - mmcls - INFO - Epoch(val) [72][5]	accuracy_top-1: 47.0588, accuracy_top-5: 92.6471
2024-04-13 17:48:33,139 - mmcls - INFO - Epoch(val) [73][5]	accuracy_top-1: 46.3235, accuracy_top-5: 91.1765
2024-04-13 17:48:56,844 - mmcls - INFO - Epoch(val) [74][5]	accuracy_top-1: 48.5294, accuracy_top-5: 91.9118
2024-04-13 17:49:20,469 - mmcls - INFO - Epoch(val) [75][5]	accuracy_top-1: 51.4706, accuracy_top-5: 92.6471
2024-04-13 17:49:44,161 - mmcls - INFO - Epoch(val) [76][5]	accuracy_top-1: 50.0000, accuracy_top-5: 93.3824
2024-04-13 17:50:06,708 - mmcls - INFO - Epoch(val) [77][5]	accuracy_top-1: 50.0000, accuracy_top-5: 92.6471
2024-04-13 17:50:29,846 - mmcls - INFO - Epoch(val) [78][5]	accuracy_top-1: 50.0000, accuracy_top-5: 92.6471
2024-04-13 17:50:52,807 - mmcls - INFO - Epoch(val) [79][5]	accuracy_top-1: 49.2647, accuracy_top-5: 92.6471
2024-04-13 17:51:15,630 - mmcls - INFO - Epoch(val) [80][5]	accuracy_top-1: 49.2647, accuracy_top-5: 93.3824
2024-04-13 17:51:39,245 - mmcls - INFO - Epoch(val) [81][5]	accuracy_top-1: 50.7353, accuracy_top-5: 92.6471
2024-04-13 17:52:02,782 - mmcls - INFO - Epoch(val) [82][5]	accuracy_top-1: 50.0000, accuracy_top-5: 93.3824
2024-04-13 17:52:26,217 - mmcls - INFO - Epoch(val) [83][5]	accuracy_top-1: 51.4706, accuracy_top-5: 91.9118
2024-04-13 17:52:49,726 - mmcls - INFO - Epoch(val) [84][5]	accuracy_top-1: 49.2647, accuracy_top-5: 93.3824
2024-04-13 17:53:13,312 - mmcls - INFO - Epoch(val) [85][5]	accuracy_top-1: 51.4706, accuracy_top-5: 92.6471
2024-04-13 17:53:36,710 - mmcls - INFO - Epoch(val) [86][5]	accuracy_top-1: 49.2647, accuracy_top-5: 92.6471
2024-04-13 17:54:00,002 - mmcls - INFO - Epoch(val) [87][5]	accuracy_top-1: 51.4706, accuracy_top-5: 92.6471
2024-04-13 17:54:23,336 - mmcls - INFO - Epoch(val) [88][5]	accuracy_top-1: 47.0588, accuracy_top-5: 91.1765
2024-04-13 17:54:46,449 - mmcls - INFO - Epoch(val) [89][5]	accuracy_top-1: 48.5294, accuracy_top-5: 90.4412
2024-04-13 17:55:09,454 - mmcls - INFO - Epoch(val) [90][5]	accuracy_top-1: 51.4706, accuracy_top-5: 91.9118
2024-04-13 17:55:32,662 - mmcls - INFO - Epoch(val) [91][5]	accuracy_top-1: 50.7353, accuracy_top-5: 91.9118
2024-04-13 17:55:55,742 - mmcls - INFO - Epoch(val) [92][5]	accuracy_top-1: 52.2059, accuracy_top-5: 92.6471
2024-04-13 17:56:18,609 - mmcls - INFO - Epoch(val) [93][5]	accuracy_top-1: 52.9412, accuracy_top-5: 93.3824
2024-04-13 17:56:40,926 - mmcls - INFO - Epoch(val) [94][5]	accuracy_top-1: 52.2059, accuracy_top-5: 92.6471
2024-04-13 17:57:03,518 - mmcls - INFO - Epoch(val) [95][5]	accuracy_top-1: 51.4706, accuracy_top-5: 92.6471
2024-04-13 17:57:26,148 - mmcls - INFO - Epoch(val) [96][5]	accuracy_top-1: 51.4706, accuracy_top-5: 92.6471
2024-04-13 17:57:49,351 - mmcls - INFO - Epoch(val) [97][5]	accuracy_top-1: 51.4706, accuracy_top-5: 92.6471
2024-04-13 17:58:12,847 - mmcls - INFO - Epoch(val) [98][5]	accuracy_top-1: 52.9412, accuracy_top-5: 91.1765
2024-04-13 17:58:35,352 - mmcls - INFO - Epoch(val) [99][5]	accuracy_top-1: 55.8824, accuracy_top-5: 93.3824
2024-04-13 17:58:56,309 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-04-13 17:59:01,348 - mmcls - INFO - Epoch(val) [100][5]	accuracy_top-1: 51.4706, accuracy_top-5: 90.4412
2024-04-13 17:59:24,242 - mmcls - INFO - Epoch(val) [101][5]	accuracy_top-1: 52.2059, accuracy_top-5: 91.1765
2024-04-13 17:59:47,603 - mmcls - INFO - Epoch(val) [102][5]	accuracy_top-1: 52.2059, accuracy_top-5: 92.6471
2024-04-13 18:00:10,977 - mmcls - INFO - Epoch(val) [103][5]	accuracy_top-1: 51.4706, accuracy_top-5: 92.6471
2024-04-13 18:00:34,435 - mmcls - INFO - Epoch(val) [104][5]	accuracy_top-1: 52.9412, accuracy_top-5: 91.9118
2024-04-13 18:00:57,783 - mmcls - INFO - Epoch(val) [105][5]	accuracy_top-1: 52.2059, accuracy_top-5: 92.6471
2024-04-13 18:01:21,244 - mmcls - INFO - Epoch(val) [106][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:01:44,648 - mmcls - INFO - Epoch(val) [107][5]	accuracy_top-1: 52.2059, accuracy_top-5: 92.6471
2024-04-13 18:02:08,027 - mmcls - INFO - Epoch(val) [108][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:02:31,476 - mmcls - INFO - Epoch(val) [109][5]	accuracy_top-1: 52.2059, accuracy_top-5: 92.6471
2024-04-13 18:02:54,816 - mmcls - INFO - Epoch(val) [110][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:03:18,269 - mmcls - INFO - Epoch(val) [111][5]	accuracy_top-1: 52.2059, accuracy_top-5: 92.6471
2024-04-13 18:03:41,483 - mmcls - INFO - Epoch(val) [112][5]	accuracy_top-1: 51.4706, accuracy_top-5: 92.6471
2024-04-13 18:04:04,565 - mmcls - INFO - Epoch(val) [113][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:04:27,687 - mmcls - INFO - Epoch(val) [114][5]	accuracy_top-1: 51.4706, accuracy_top-5: 91.9118
2024-04-13 18:04:50,774 - mmcls - INFO - Epoch(val) [115][5]	accuracy_top-1: 52.2059, accuracy_top-5: 91.1765
2024-04-13 18:05:13,919 - mmcls - INFO - Epoch(val) [116][5]	accuracy_top-1: 52.2059, accuracy_top-5: 92.6471
2024-04-13 18:05:37,539 - mmcls - INFO - Epoch(val) [117][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:06:01,073 - mmcls - INFO - Epoch(val) [118][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:06:24,156 - mmcls - INFO - Epoch(val) [119][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:06:46,482 - mmcls - INFO - Epoch(val) [120][5]	accuracy_top-1: 51.4706, accuracy_top-5: 92.6471
2024-04-13 18:07:09,186 - mmcls - INFO - Epoch(val) [121][5]	accuracy_top-1: 51.4706, accuracy_top-5: 92.6471
2024-04-13 18:07:32,181 - mmcls - INFO - Epoch(val) [122][5]	accuracy_top-1: 52.2059, accuracy_top-5: 92.6471
2024-04-13 18:07:55,696 - mmcls - INFO - Epoch(val) [123][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:08:18,649 - mmcls - INFO - Epoch(val) [124][5]	accuracy_top-1: 51.4706, accuracy_top-5: 92.6471
2024-04-13 18:08:41,334 - mmcls - INFO - Epoch(val) [125][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:09:04,921 - mmcls - INFO - Epoch(val) [126][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:09:27,903 - mmcls - INFO - Epoch(val) [127][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:09:50,541 - mmcls - INFO - Epoch(val) [128][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:10:13,785 - mmcls - INFO - Epoch(val) [129][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:10:37,336 - mmcls - INFO - Epoch(val) [130][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:11:00,666 - mmcls - INFO - Epoch(val) [131][5]	accuracy_top-1: 53.6765, accuracy_top-5: 91.9118
2024-04-13 18:11:23,858 - mmcls - INFO - Epoch(val) [132][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:11:46,568 - mmcls - INFO - Epoch(val) [133][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:12:09,754 - mmcls - INFO - Epoch(val) [134][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:12:32,945 - mmcls - INFO - Epoch(val) [135][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:12:55,785 - mmcls - INFO - Epoch(val) [136][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:13:19,432 - mmcls - INFO - Epoch(val) [137][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:13:42,567 - mmcls - INFO - Epoch(val) [138][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:14:06,269 - mmcls - INFO - Epoch(val) [139][5]	accuracy_top-1: 53.6765, accuracy_top-5: 93.3824
2024-04-13 18:14:30,005 - mmcls - INFO - Epoch(val) [140][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:14:53,402 - mmcls - INFO - Epoch(val) [141][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:15:16,802 - mmcls - INFO - Epoch(val) [142][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:15:39,937 - mmcls - INFO - Epoch(val) [143][5]	accuracy_top-1: 54.4118, accuracy_top-5: 93.3824
2024-04-13 18:16:02,404 - mmcls - INFO - Epoch(val) [144][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:16:24,521 - mmcls - INFO - Epoch(val) [145][5]	accuracy_top-1: 52.2059, accuracy_top-5: 92.6471
2024-04-13 18:16:47,857 - mmcls - INFO - Epoch(val) [146][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:17:10,792 - mmcls - INFO - Epoch(val) [147][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:17:33,360 - mmcls - INFO - Epoch(val) [148][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:17:56,409 - mmcls - INFO - Epoch(val) [149][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:18:19,735 - mmcls - INFO - Epoch(val) [150][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:18:43,030 - mmcls - INFO - Epoch(val) [151][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:19:06,111 - mmcls - INFO - Epoch(val) [152][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:19:29,474 - mmcls - INFO - Epoch(val) [153][5]	accuracy_top-1: 52.2059, accuracy_top-5: 92.6471
2024-04-13 18:19:52,788 - mmcls - INFO - Epoch(val) [154][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:20:16,022 - mmcls - INFO - Epoch(val) [155][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:20:39,272 - mmcls - INFO - Epoch(val) [156][5]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-13 18:21:02,518 - mmcls - INFO - Epoch(val) [157][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:21:25,820 - mmcls - INFO - Epoch(val) [158][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:21:49,163 - mmcls - INFO - Epoch(val) [159][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:22:12,465 - mmcls - INFO - Epoch(val) [160][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:22:36,192 - mmcls - INFO - Epoch(val) [161][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:22:59,508 - mmcls - INFO - Epoch(val) [162][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:23:22,732 - mmcls - INFO - Epoch(val) [163][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:23:45,974 - mmcls - INFO - Epoch(val) [164][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:24:09,215 - mmcls - INFO - Epoch(val) [165][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:24:32,267 - mmcls - INFO - Epoch(val) [166][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:24:55,345 - mmcls - INFO - Epoch(val) [167][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:25:18,524 - mmcls - INFO - Epoch(val) [168][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:25:41,658 - mmcls - INFO - Epoch(val) [169][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:26:04,754 - mmcls - INFO - Epoch(val) [170][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:26:26,756 - mmcls - INFO - Epoch(val) [171][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:26:49,599 - mmcls - INFO - Epoch(val) [172][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:27:12,457 - mmcls - INFO - Epoch(val) [173][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:27:35,127 - mmcls - INFO - Epoch(val) [174][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:27:58,014 - mmcls - INFO - Epoch(val) [175][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:28:21,009 - mmcls - INFO - Epoch(val) [176][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:28:43,970 - mmcls - INFO - Epoch(val) [177][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:29:07,142 - mmcls - INFO - Epoch(val) [178][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:29:29,839 - mmcls - INFO - Epoch(val) [179][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:29:52,428 - mmcls - INFO - Epoch(val) [180][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:30:15,290 - mmcls - INFO - Epoch(val) [181][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:30:38,018 - mmcls - INFO - Epoch(val) [182][5]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-13 18:31:00,844 - mmcls - INFO - Epoch(val) [183][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:31:24,002 - mmcls - INFO - Epoch(val) [184][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:31:46,772 - mmcls - INFO - Epoch(val) [185][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:32:09,648 - mmcls - INFO - Epoch(val) [186][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:32:32,597 - mmcls - INFO - Epoch(val) [187][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:32:55,539 - mmcls - INFO - Epoch(val) [188][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:33:18,391 - mmcls - INFO - Epoch(val) [189][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:33:41,436 - mmcls - INFO - Epoch(val) [190][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:34:04,360 - mmcls - INFO - Epoch(val) [191][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:34:27,108 - mmcls - INFO - Epoch(val) [192][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:34:50,165 - mmcls - INFO - Epoch(val) [193][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:35:13,282 - mmcls - INFO - Epoch(val) [194][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:35:36,146 - mmcls - INFO - Epoch(val) [195][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:35:59,042 - mmcls - INFO - Epoch(val) [196][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:36:21,462 - mmcls - INFO - Epoch(val) [197][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:36:44,435 - mmcls - INFO - Epoch(val) [198][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:37:07,457 - mmcls - INFO - Epoch(val) [199][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-13 18:37:28,605 - mmcls - INFO - Saving checkpoint at 200 epochs
2024-04-13 18:37:33,217 - mmcls - INFO - Epoch(val) [200][5]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
