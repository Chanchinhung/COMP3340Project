2024-04-12 14:30:02,489 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: n/a
MMCV CUDA Compiler: n/a
MMClassification: 0.15.0+2b78fde
------------------------------------------------------------

2024-04-12 14:30:02,491 - mmcls - INFO - Distributed training: False
2024-04-12 14:30:02,810 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='SwinTransformer', arch='base', img_size=224, drop_path_rate=0.5),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=17,
        in_channels=1024,
        init_cfg=None,
        loss=dict(
            type='LabelSmoothLoss', label_smooth_val=0.1, mode='original'),
        cal_acc=False),
    init_cfg=[
        dict(type='TruncNormal', layer='Linear', std=0.02, bias=0.0),
        dict(type='Constant', layer='LayerNorm', val=1.0, bias=0.0)
    ],
    train_cfg=dict(augments=[
        dict(type='BatchMixup', alpha=0.8, num_classes=17, prob=0.5),
        dict(type='BatchCutMix', alpha=1.0, num_classes=17, prob=0.5)
    ]))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=16,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/test',
        ann_file='data/flowers/meta/test.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.0001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=200)
checkpoint_config = dict(interval=100)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/swin_transformer/bs16/lr0.0001'
gpu_ids = range(0, 1)

2024-04-12 14:30:03,805 - mmcls - INFO - initialize ImageClassifier with init_cfg [{'type': 'TruncNormal', 'layer': 'Linear', 'std': 0.02, 'bias': 0.0}, {'type': 'Constant', 'layer': 'LayerNorm', 'val': 1.0, 'bias': 0.0}]
Name of parameter - Initialization information

backbone.patch_embed.projection.weight - torch.Size([128, 3, 4, 4]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.patch_embed.projection.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.patch_embed.norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.patch_embed.norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.norm1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.norm1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([169, 4]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.0.blocks.0.attn.w_msa.qkv.weight - torch.Size([384, 128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.attn.w_msa.qkv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.attn.w_msa.proj.weight - torch.Size([128, 128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.attn.w_msa.proj.bias - torch.Size([128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.0.ffn.layers.0.0.weight - torch.Size([512, 128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.ffn.layers.0.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.ffn.layers.1.weight - torch.Size([128, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.0.ffn.layers.1.bias - torch.Size([128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.norm1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.norm1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([169, 4]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.0.blocks.1.attn.w_msa.qkv.weight - torch.Size([384, 128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.attn.w_msa.qkv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.attn.w_msa.proj.weight - torch.Size([128, 128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.attn.w_msa.proj.bias - torch.Size([128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.blocks.1.ffn.layers.0.0.weight - torch.Size([512, 128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.ffn.layers.0.0.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.ffn.layers.1.weight - torch.Size([128, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.blocks.1.ffn.layers.1.bias - torch.Size([128]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.downsample.norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.downsample.norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.downsample.reduction.weight - torch.Size([256, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([169, 8]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.1.blocks.0.attn.w_msa.qkv.weight - torch.Size([768, 256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.attn.w_msa.qkv.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.attn.w_msa.proj.weight - torch.Size([256, 256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.attn.w_msa.proj.bias - torch.Size([256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.0.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.ffn.layers.0.0.bias - torch.Size([1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.ffn.layers.1.weight - torch.Size([256, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.0.ffn.layers.1.bias - torch.Size([256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([169, 8]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.1.blocks.1.attn.w_msa.qkv.weight - torch.Size([768, 256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.attn.w_msa.qkv.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.attn.w_msa.proj.weight - torch.Size([256, 256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.attn.w_msa.proj.bias - torch.Size([256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.blocks.1.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.ffn.layers.0.0.bias - torch.Size([1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.ffn.layers.1.weight - torch.Size([256, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.blocks.1.ffn.layers.1.bias - torch.Size([256]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.downsample.norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.downsample.norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.downsample.reduction.weight - torch.Size([512, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.0.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.0.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.0.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.1.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.1.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.1.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.2.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.2.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.2.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.3.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.3.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.3.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.4.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.4.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.4.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.5.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.5.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.5.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.6.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.6.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.6.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.6.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.6.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.6.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.7.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.7.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.7.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.7.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.7.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.7.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.8.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.8.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.8.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.8.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.8.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.8.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.9.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.9.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.9.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.9.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.9.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.9.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.10.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.10.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.10.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.10.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.10.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.10.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.11.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.11.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.11.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.11.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.11.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.11.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.12.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.12.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.12.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.12.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.12.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.12.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.13.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.13.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.13.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.13.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.13.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.13.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.14.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.14.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.14.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.14.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.14.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.14.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.15.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.15.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.15.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.15.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.15.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.15.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.16.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.16.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.16.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.16.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.16.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.16.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.17.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.17.attn.w_msa.relative_position_bias_table - torch.Size([169, 16]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.2.blocks.17.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.attn.w_msa.qkv.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.attn.w_msa.proj.weight - torch.Size([512, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.attn.w_msa.proj.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.17.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.blocks.17.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.ffn.layers.0.0.bias - torch.Size([2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.ffn.layers.1.weight - torch.Size([512, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.blocks.17.ffn.layers.1.bias - torch.Size([512]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.downsample.norm.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.downsample.norm.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.downsample.reduction.weight - torch.Size([1024, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([169, 32]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.3.blocks.0.attn.w_msa.qkv.weight - torch.Size([3072, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.attn.w_msa.qkv.bias - torch.Size([3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.attn.w_msa.proj.weight - torch.Size([1024, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.attn.w_msa.proj.bias - torch.Size([1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.0.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.ffn.layers.0.0.bias - torch.Size([4096]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.ffn.layers.1.weight - torch.Size([1024, 4096]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.0.ffn.layers.1.bias - torch.Size([1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([169, 32]): 
Initialized by user-defined `init_weights` in WindowMSA  

backbone.stages.3.blocks.1.attn.w_msa.qkv.weight - torch.Size([3072, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.attn.w_msa.qkv.bias - torch.Size([3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.attn.w_msa.proj.weight - torch.Size([1024, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.attn.w_msa.proj.bias - torch.Size([1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.blocks.1.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.ffn.layers.0.0.bias - torch.Size([4096]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.ffn.layers.1.weight - torch.Size([1024, 4096]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.blocks.1.ffn.layers.1.bias - torch.Size([1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.norm3.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.norm3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([17, 1024]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

head.fc.bias - torch.Size([17]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 
2024-04-12 14:30:08,586 - mmcls - INFO - Start running, host: cshtimmy@gpu2-comp-105, work_dir: /userhome/cs2/cshtimmy/COMP3340Project/CNN_Image_Classification_Code/output/swin_transformer/bs16/lr0.0001
2024-04-12 14:30:08,587 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-04-12 14:30:08,587 - mmcls - INFO - workflow: [('train', 1)], max: 200 epochs
2024-04-12 14:30:08,587 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/cshtimmy/COMP3340Project/CNN_Image_Classification_Code/output/swin_transformer/bs16/lr0.0001 by HardDiskBackend.
2024-04-12 14:30:50,943 - mmcls - INFO - Epoch(val) [1][9]	accuracy_top-1: 19.1176, accuracy_top-5: 63.9706
2024-04-12 14:31:15,923 - mmcls - INFO - Epoch(val) [2][9]	accuracy_top-1: 28.6765, accuracy_top-5: 77.9412
2024-04-12 14:31:41,577 - mmcls - INFO - Epoch(val) [3][9]	accuracy_top-1: 30.1471, accuracy_top-5: 79.4118
2024-04-12 14:32:06,534 - mmcls - INFO - Epoch(val) [4][9]	accuracy_top-1: 32.3529, accuracy_top-5: 84.5588
2024-04-12 14:32:30,994 - mmcls - INFO - Epoch(val) [5][9]	accuracy_top-1: 32.3529, accuracy_top-5: 83.0882
2024-04-12 14:32:54,450 - mmcls - INFO - Epoch(val) [6][9]	accuracy_top-1: 30.1471, accuracy_top-5: 82.3529
2024-04-12 14:33:19,099 - mmcls - INFO - Epoch(val) [7][9]	accuracy_top-1: 38.2353, accuracy_top-5: 83.8235
2024-04-12 14:33:43,797 - mmcls - INFO - Epoch(val) [8][9]	accuracy_top-1: 36.7647, accuracy_top-5: 84.5588
2024-04-12 14:34:08,925 - mmcls - INFO - Epoch(val) [9][9]	accuracy_top-1: 36.7647, accuracy_top-5: 88.9706
2024-04-12 14:34:34,127 - mmcls - INFO - Epoch(val) [10][9]	accuracy_top-1: 36.7647, accuracy_top-5: 89.7059
2024-04-12 14:34:59,346 - mmcls - INFO - Epoch(val) [11][9]	accuracy_top-1: 38.2353, accuracy_top-5: 88.2353
2024-04-12 14:35:23,702 - mmcls - INFO - Epoch(val) [12][9]	accuracy_top-1: 38.9706, accuracy_top-5: 90.4412
2024-04-12 14:35:48,410 - mmcls - INFO - Epoch(val) [13][9]	accuracy_top-1: 38.2353, accuracy_top-5: 86.7647
2024-04-12 14:36:12,674 - mmcls - INFO - Epoch(val) [14][9]	accuracy_top-1: 38.9706, accuracy_top-5: 88.9706
2024-04-12 14:36:37,190 - mmcls - INFO - Epoch(val) [15][9]	accuracy_top-1: 43.3824, accuracy_top-5: 91.1765
2024-04-12 14:37:02,205 - mmcls - INFO - Epoch(val) [16][9]	accuracy_top-1: 45.5882, accuracy_top-5: 91.1765
2024-04-12 14:37:26,831 - mmcls - INFO - Epoch(val) [17][9]	accuracy_top-1: 38.9706, accuracy_top-5: 91.9118
2024-04-12 14:37:51,659 - mmcls - INFO - Epoch(val) [18][9]	accuracy_top-1: 45.5882, accuracy_top-5: 92.6471
2024-04-12 14:38:16,407 - mmcls - INFO - Epoch(val) [19][9]	accuracy_top-1: 42.6471, accuracy_top-5: 91.9118
2024-04-12 14:38:40,918 - mmcls - INFO - Epoch(val) [20][9]	accuracy_top-1: 41.9118, accuracy_top-5: 89.7059
2024-04-12 14:39:06,039 - mmcls - INFO - Epoch(val) [21][9]	accuracy_top-1: 44.1176, accuracy_top-5: 92.6471
2024-04-12 14:39:30,792 - mmcls - INFO - Epoch(val) [22][9]	accuracy_top-1: 41.1765, accuracy_top-5: 91.9118
2024-04-12 14:39:55,590 - mmcls - INFO - Epoch(val) [23][9]	accuracy_top-1: 45.5882, accuracy_top-5: 92.6471
2024-04-12 14:40:20,895 - mmcls - INFO - Epoch(val) [24][9]	accuracy_top-1: 44.8529, accuracy_top-5: 90.4412
2024-04-12 14:40:46,122 - mmcls - INFO - Epoch(val) [25][9]	accuracy_top-1: 44.1176, accuracy_top-5: 91.9118
2024-04-12 14:41:11,382 - mmcls - INFO - Epoch(val) [26][9]	accuracy_top-1: 45.5882, accuracy_top-5: 91.9118
2024-04-12 14:41:36,359 - mmcls - INFO - Epoch(val) [27][9]	accuracy_top-1: 43.3824, accuracy_top-5: 91.9118
2024-04-12 14:42:01,217 - mmcls - INFO - Epoch(val) [28][9]	accuracy_top-1: 44.1176, accuracy_top-5: 93.3824
2024-04-12 14:42:26,504 - mmcls - INFO - Epoch(val) [29][9]	accuracy_top-1: 46.3235, accuracy_top-5: 91.9118
2024-04-12 14:42:51,547 - mmcls - INFO - Epoch(val) [30][9]	accuracy_top-1: 46.3235, accuracy_top-5: 91.9118
2024-04-12 14:43:16,529 - mmcls - INFO - Epoch(val) [31][9]	accuracy_top-1: 43.3824, accuracy_top-5: 91.9118
2024-04-12 14:43:41,921 - mmcls - INFO - Epoch(val) [32][9]	accuracy_top-1: 47.7941, accuracy_top-5: 90.4412
2024-04-12 14:44:06,680 - mmcls - INFO - Epoch(val) [33][9]	accuracy_top-1: 49.2647, accuracy_top-5: 93.3824
2024-04-12 14:44:31,737 - mmcls - INFO - Epoch(val) [34][9]	accuracy_top-1: 43.3824, accuracy_top-5: 92.6471
2024-04-12 14:44:56,410 - mmcls - INFO - Epoch(val) [35][9]	accuracy_top-1: 45.5882, accuracy_top-5: 93.3824
2024-04-12 14:45:19,483 - mmcls - INFO - Epoch(val) [36][9]	accuracy_top-1: 49.2647, accuracy_top-5: 94.1176
2024-04-12 14:45:44,337 - mmcls - INFO - Epoch(val) [37][9]	accuracy_top-1: 46.3235, accuracy_top-5: 92.6471
2024-04-12 14:46:09,370 - mmcls - INFO - Epoch(val) [38][9]	accuracy_top-1: 47.0588, accuracy_top-5: 91.9118
2024-04-12 14:46:33,797 - mmcls - INFO - Epoch(val) [39][9]	accuracy_top-1: 48.5294, accuracy_top-5: 91.1765
2024-04-12 14:46:58,082 - mmcls - INFO - Epoch(val) [40][9]	accuracy_top-1: 47.7941, accuracy_top-5: 94.1176
2024-04-12 14:47:22,134 - mmcls - INFO - Epoch(val) [41][9]	accuracy_top-1: 50.0000, accuracy_top-5: 92.6471
2024-04-12 14:47:46,207 - mmcls - INFO - Epoch(val) [42][9]	accuracy_top-1: 48.5294, accuracy_top-5: 91.9118
2024-04-12 14:48:10,846 - mmcls - INFO - Epoch(val) [43][9]	accuracy_top-1: 47.7941, accuracy_top-5: 91.9118
2024-04-12 14:48:35,802 - mmcls - INFO - Epoch(val) [44][9]	accuracy_top-1: 48.5294, accuracy_top-5: 92.6471
2024-04-12 14:48:59,827 - mmcls - INFO - Epoch(val) [45][9]	accuracy_top-1: 50.0000, accuracy_top-5: 90.4412
2024-04-12 14:49:24,273 - mmcls - INFO - Epoch(val) [46][9]	accuracy_top-1: 49.2647, accuracy_top-5: 92.6471
2024-04-12 14:49:48,941 - mmcls - INFO - Epoch(val) [47][9]	accuracy_top-1: 50.7353, accuracy_top-5: 93.3824
2024-04-12 14:50:13,544 - mmcls - INFO - Epoch(val) [48][9]	accuracy_top-1: 46.3235, accuracy_top-5: 92.6471
2024-04-12 14:50:36,613 - mmcls - INFO - Epoch(val) [49][9]	accuracy_top-1: 50.7353, accuracy_top-5: 91.9118
2024-04-12 14:51:01,422 - mmcls - INFO - Epoch(val) [50][9]	accuracy_top-1: 50.0000, accuracy_top-5: 92.6471
2024-04-12 14:51:26,364 - mmcls - INFO - Epoch(val) [51][9]	accuracy_top-1: 52.2059, accuracy_top-5: 92.6471
2024-04-12 14:51:51,167 - mmcls - INFO - Epoch(val) [52][9]	accuracy_top-1: 44.1176, accuracy_top-5: 91.9118
2024-04-12 14:52:16,201 - mmcls - INFO - Epoch(val) [53][9]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-12 14:52:40,952 - mmcls - INFO - Epoch(val) [54][9]	accuracy_top-1: 52.2059, accuracy_top-5: 91.9118
2024-04-12 14:53:05,108 - mmcls - INFO - Epoch(val) [55][9]	accuracy_top-1: 52.2059, accuracy_top-5: 93.3824
2024-04-12 14:53:29,576 - mmcls - INFO - Epoch(val) [56][9]	accuracy_top-1: 48.5294, accuracy_top-5: 92.6471
2024-04-12 14:53:52,689 - mmcls - INFO - Epoch(val) [57][9]	accuracy_top-1: 51.4706, accuracy_top-5: 92.6471
2024-04-12 14:54:16,454 - mmcls - INFO - Epoch(val) [58][9]	accuracy_top-1: 52.9412, accuracy_top-5: 91.9118
2024-04-12 14:54:40,525 - mmcls - INFO - Epoch(val) [59][9]	accuracy_top-1: 55.1471, accuracy_top-5: 94.1176
2024-04-12 14:55:04,926 - mmcls - INFO - Epoch(val) [60][9]	accuracy_top-1: 52.9412, accuracy_top-5: 93.3824
2024-04-12 14:55:29,442 - mmcls - INFO - Epoch(val) [61][9]	accuracy_top-1: 51.4706, accuracy_top-5: 91.1765
2024-04-12 14:55:54,350 - mmcls - INFO - Epoch(val) [62][9]	accuracy_top-1: 52.9412, accuracy_top-5: 91.9118
2024-04-12 14:56:18,659 - mmcls - INFO - Epoch(val) [63][9]	accuracy_top-1: 49.2647, accuracy_top-5: 91.1765
2024-04-12 14:56:43,019 - mmcls - INFO - Epoch(val) [64][9]	accuracy_top-1: 53.6765, accuracy_top-5: 92.6471
2024-04-12 14:57:07,518 - mmcls - INFO - Epoch(val) [65][9]	accuracy_top-1: 54.4118, accuracy_top-5: 91.1765
2024-04-12 14:57:32,452 - mmcls - INFO - Epoch(val) [66][9]	accuracy_top-1: 55.8824, accuracy_top-5: 93.3824
2024-04-12 14:57:57,388 - mmcls - INFO - Epoch(val) [67][9]	accuracy_top-1: 54.4118, accuracy_top-5: 94.1176
2024-04-12 14:58:22,211 - mmcls - INFO - Epoch(val) [68][9]	accuracy_top-1: 55.1471, accuracy_top-5: 94.1176
2024-04-12 14:58:47,425 - mmcls - INFO - Epoch(val) [69][9]	accuracy_top-1: 53.6765, accuracy_top-5: 93.3824
2024-04-12 14:59:11,457 - mmcls - INFO - Epoch(val) [70][9]	accuracy_top-1: 54.4118, accuracy_top-5: 93.3824
2024-04-12 14:59:35,372 - mmcls - INFO - Epoch(val) [71][9]	accuracy_top-1: 55.1471, accuracy_top-5: 92.6471
2024-04-12 14:59:59,936 - mmcls - INFO - Epoch(val) [72][9]	accuracy_top-1: 58.0882, accuracy_top-5: 93.3824
2024-04-12 15:56:29,338 - mmcls - INFO - Epoch(val) [73][9]	accuracy_top-1: 56.6176, accuracy_top-5: 93.3824
2024-04-12 15:56:54,975 - mmcls - INFO - Epoch(val) [74][9]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-12 15:57:19,455 - mmcls - INFO - Epoch(val) [75][9]	accuracy_top-1: 56.6176, accuracy_top-5: 94.8529
2024-04-12 15:57:43,983 - mmcls - INFO - Epoch(val) [76][9]	accuracy_top-1: 52.2059, accuracy_top-5: 94.1176
2024-04-12 15:58:08,528 - mmcls - INFO - Epoch(val) [77][9]	accuracy_top-1: 55.8824, accuracy_top-5: 94.8529
2024-04-12 15:58:33,729 - mmcls - INFO - Epoch(val) [78][9]	accuracy_top-1: 55.8824, accuracy_top-5: 94.1176
2024-04-12 15:58:58,007 - mmcls - INFO - Epoch(val) [79][9]	accuracy_top-1: 55.1471, accuracy_top-5: 91.9118
2024-04-12 15:59:21,554 - mmcls - INFO - Epoch(val) [80][9]	accuracy_top-1: 56.6176, accuracy_top-5: 91.9118
2024-04-12 15:59:46,479 - mmcls - INFO - Epoch(val) [81][9]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-12 16:00:11,488 - mmcls - INFO - Epoch(val) [82][9]	accuracy_top-1: 55.1471, accuracy_top-5: 91.9118
2024-04-12 16:00:36,377 - mmcls - INFO - Epoch(val) [83][9]	accuracy_top-1: 55.1471, accuracy_top-5: 93.3824
2024-04-12 16:01:01,057 - mmcls - INFO - Epoch(val) [84][9]	accuracy_top-1: 55.1471, accuracy_top-5: 94.1176
2024-04-12 16:01:26,509 - mmcls - INFO - Epoch(val) [85][9]	accuracy_top-1: 54.4118, accuracy_top-5: 92.6471
2024-04-12 16:01:51,762 - mmcls - INFO - Epoch(val) [86][9]	accuracy_top-1: 52.9412, accuracy_top-5: 92.6471
2024-04-12 16:02:16,804 - mmcls - INFO - Epoch(val) [87][9]	accuracy_top-1: 56.6176, accuracy_top-5: 94.1176
2024-04-12 16:02:41,460 - mmcls - INFO - Epoch(val) [88][9]	accuracy_top-1: 58.0882, accuracy_top-5: 93.3824
2024-04-12 16:03:05,773 - mmcls - INFO - Epoch(val) [89][9]	accuracy_top-1: 54.4118, accuracy_top-5: 94.8529
2024-04-12 16:03:31,102 - mmcls - INFO - Epoch(val) [90][9]	accuracy_top-1: 57.3529, accuracy_top-5: 94.1176
2024-04-12 16:03:56,752 - mmcls - INFO - Epoch(val) [91][9]	accuracy_top-1: 58.0882, accuracy_top-5: 94.1176
2024-04-12 16:04:21,530 - mmcls - INFO - Epoch(val) [92][9]	accuracy_top-1: 58.0882, accuracy_top-5: 94.1176
2024-04-12 16:04:46,607 - mmcls - INFO - Epoch(val) [93][9]	accuracy_top-1: 54.4118, accuracy_top-5: 94.1176
2024-04-12 16:05:11,837 - mmcls - INFO - Epoch(val) [94][9]	accuracy_top-1: 55.1471, accuracy_top-5: 92.6471
2024-04-12 16:05:36,773 - mmcls - INFO - Epoch(val) [95][9]	accuracy_top-1: 58.8235, accuracy_top-5: 91.9118
2024-04-12 16:06:01,517 - mmcls - INFO - Epoch(val) [96][9]	accuracy_top-1: 58.0882, accuracy_top-5: 94.1176
2024-04-12 16:06:25,198 - mmcls - INFO - Epoch(val) [97][9]	accuracy_top-1: 59.5588, accuracy_top-5: 92.6471
2024-04-12 16:06:49,974 - mmcls - INFO - Epoch(val) [98][9]	accuracy_top-1: 55.1471, accuracy_top-5: 92.6471
2024-04-12 16:07:14,453 - mmcls - INFO - Epoch(val) [99][9]	accuracy_top-1: 58.8235, accuracy_top-5: 94.1176
2024-04-12 16:07:38,212 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-04-12 16:07:43,598 - mmcls - INFO - Epoch(val) [100][9]	accuracy_top-1: 58.0882, accuracy_top-5: 93.3824
2024-04-12 16:08:09,426 - mmcls - INFO - Epoch(val) [101][9]	accuracy_top-1: 61.0294, accuracy_top-5: 92.6471
2024-04-12 16:08:34,534 - mmcls - INFO - Epoch(val) [102][9]	accuracy_top-1: 61.0294, accuracy_top-5: 92.6471
2024-04-12 16:08:58,982 - mmcls - INFO - Epoch(val) [103][9]	accuracy_top-1: 59.5588, accuracy_top-5: 92.6471
2024-04-12 16:09:23,217 - mmcls - INFO - Epoch(val) [104][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:09:48,698 - mmcls - INFO - Epoch(val) [105][9]	accuracy_top-1: 60.2941, accuracy_top-5: 92.6471
2024-04-12 16:10:13,652 - mmcls - INFO - Epoch(val) [106][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:10:39,156 - mmcls - INFO - Epoch(val) [107][9]	accuracy_top-1: 61.0294, accuracy_top-5: 92.6471
2024-04-12 16:11:04,431 - mmcls - INFO - Epoch(val) [108][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:11:29,562 - mmcls - INFO - Epoch(val) [109][9]	accuracy_top-1: 61.0294, accuracy_top-5: 92.6471
2024-04-12 16:11:54,063 - mmcls - INFO - Epoch(val) [110][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:12:18,891 - mmcls - INFO - Epoch(val) [111][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:12:42,614 - mmcls - INFO - Epoch(val) [112][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:13:07,644 - mmcls - INFO - Epoch(val) [113][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:13:32,698 - mmcls - INFO - Epoch(val) [114][9]	accuracy_top-1: 60.2941, accuracy_top-5: 92.6471
2024-04-12 16:13:58,332 - mmcls - INFO - Epoch(val) [115][9]	accuracy_top-1: 61.0294, accuracy_top-5: 92.6471
2024-04-12 16:14:23,716 - mmcls - INFO - Epoch(val) [116][9]	accuracy_top-1: 61.0294, accuracy_top-5: 92.6471
2024-04-12 16:14:48,925 - mmcls - INFO - Epoch(val) [117][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:15:13,914 - mmcls - INFO - Epoch(val) [118][9]	accuracy_top-1: 61.0294, accuracy_top-5: 92.6471
2024-04-12 16:15:39,551 - mmcls - INFO - Epoch(val) [119][9]	accuracy_top-1: 62.5000, accuracy_top-5: 93.3824
2024-04-12 16:16:04,827 - mmcls - INFO - Epoch(val) [120][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:16:30,178 - mmcls - INFO - Epoch(val) [121][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:16:55,526 - mmcls - INFO - Epoch(val) [122][9]	accuracy_top-1: 61.0294, accuracy_top-5: 93.3824
2024-04-12 16:17:20,982 - mmcls - INFO - Epoch(val) [123][9]	accuracy_top-1: 61.0294, accuracy_top-5: 93.3824
2024-04-12 16:17:45,765 - mmcls - INFO - Epoch(val) [124][9]	accuracy_top-1: 61.0294, accuracy_top-5: 93.3824
2024-04-12 16:18:10,871 - mmcls - INFO - Epoch(val) [125][9]	accuracy_top-1: 60.2941, accuracy_top-5: 93.3824
2024-04-12 16:18:36,254 - mmcls - INFO - Epoch(val) [126][9]	accuracy_top-1: 61.0294, accuracy_top-5: 93.3824
2024-04-12 16:19:01,378 - mmcls - INFO - Epoch(val) [127][9]	accuracy_top-1: 60.2941, accuracy_top-5: 92.6471
2024-04-12 16:19:24,937 - mmcls - INFO - Epoch(val) [128][9]	accuracy_top-1: 61.0294, accuracy_top-5: 93.3824
2024-04-12 16:19:49,063 - mmcls - INFO - Epoch(val) [129][9]	accuracy_top-1: 59.5588, accuracy_top-5: 93.3824
2024-04-12 16:20:14,473 - mmcls - INFO - Epoch(val) [130][9]	accuracy_top-1: 61.0294, accuracy_top-5: 93.3824
2024-04-12 16:20:40,243 - mmcls - INFO - Epoch(val) [131][9]	accuracy_top-1: 60.2941, accuracy_top-5: 93.3824
2024-04-12 16:21:05,131 - mmcls - INFO - Epoch(val) [132][9]	accuracy_top-1: 59.5588, accuracy_top-5: 92.6471
2024-04-12 16:21:30,215 - mmcls - INFO - Epoch(val) [133][9]	accuracy_top-1: 60.2941, accuracy_top-5: 92.6471
2024-04-12 16:21:55,625 - mmcls - INFO - Epoch(val) [134][9]	accuracy_top-1: 61.0294, accuracy_top-5: 92.6471
2024-04-12 16:22:21,203 - mmcls - INFO - Epoch(val) [135][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:22:46,877 - mmcls - INFO - Epoch(val) [136][9]	accuracy_top-1: 59.5588, accuracy_top-5: 92.6471
2024-04-12 16:23:12,311 - mmcls - INFO - Epoch(val) [137][9]	accuracy_top-1: 60.2941, accuracy_top-5: 92.6471
2024-04-12 16:23:37,210 - mmcls - INFO - Epoch(val) [138][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:24:02,428 - mmcls - INFO - Epoch(val) [139][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:24:27,826 - mmcls - INFO - Epoch(val) [140][9]	accuracy_top-1: 60.2941, accuracy_top-5: 92.6471
2024-04-12 16:24:52,256 - mmcls - INFO - Epoch(val) [141][9]	accuracy_top-1: 62.5000, accuracy_top-5: 92.6471
2024-04-12 16:25:17,173 - mmcls - INFO - Epoch(val) [142][9]	accuracy_top-1: 62.5000, accuracy_top-5: 93.3824
2024-04-12 16:25:42,666 - mmcls - INFO - Epoch(val) [143][9]	accuracy_top-1: 61.0294, accuracy_top-5: 92.6471
2024-04-12 16:26:07,608 - mmcls - INFO - Epoch(val) [144][9]	accuracy_top-1: 61.7647, accuracy_top-5: 93.3824
2024-04-12 16:26:32,122 - mmcls - INFO - Epoch(val) [145][9]	accuracy_top-1: 61.0294, accuracy_top-5: 93.3824
2024-04-12 16:26:57,591 - mmcls - INFO - Epoch(val) [146][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:27:22,393 - mmcls - INFO - Epoch(val) [147][9]	accuracy_top-1: 60.2941, accuracy_top-5: 92.6471
2024-04-12 16:27:47,525 - mmcls - INFO - Epoch(val) [148][9]	accuracy_top-1: 62.5000, accuracy_top-5: 91.9118
2024-04-12 16:28:12,941 - mmcls - INFO - Epoch(val) [149][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:28:37,959 - mmcls - INFO - Epoch(val) [150][9]	accuracy_top-1: 62.5000, accuracy_top-5: 92.6471
2024-04-12 16:29:02,005 - mmcls - INFO - Epoch(val) [151][9]	accuracy_top-1: 63.2353, accuracy_top-5: 92.6471
2024-04-12 16:29:26,053 - mmcls - INFO - Epoch(val) [152][9]	accuracy_top-1: 62.5000, accuracy_top-5: 92.6471
2024-04-12 16:29:50,838 - mmcls - INFO - Epoch(val) [153][9]	accuracy_top-1: 63.2353, accuracy_top-5: 92.6471
2024-04-12 16:30:16,082 - mmcls - INFO - Epoch(val) [154][9]	accuracy_top-1: 62.5000, accuracy_top-5: 92.6471
2024-04-12 16:30:41,133 - mmcls - INFO - Epoch(val) [155][9]	accuracy_top-1: 62.5000, accuracy_top-5: 92.6471
2024-04-12 16:31:06,126 - mmcls - INFO - Epoch(val) [156][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:31:31,564 - mmcls - INFO - Epoch(val) [157][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:31:56,841 - mmcls - INFO - Epoch(val) [158][9]	accuracy_top-1: 62.5000, accuracy_top-5: 92.6471
2024-04-12 16:32:21,090 - mmcls - INFO - Epoch(val) [159][9]	accuracy_top-1: 62.5000, accuracy_top-5: 92.6471
2024-04-12 16:32:46,090 - mmcls - INFO - Epoch(val) [160][9]	accuracy_top-1: 62.5000, accuracy_top-5: 92.6471
2024-04-12 16:33:11,758 - mmcls - INFO - Epoch(val) [161][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:33:36,687 - mmcls - INFO - Epoch(val) [162][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:34:01,711 - mmcls - INFO - Epoch(val) [163][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-12 16:34:26,999 - mmcls - INFO - Epoch(val) [164][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-12 16:34:52,179 - mmcls - INFO - Epoch(val) [165][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:35:17,820 - mmcls - INFO - Epoch(val) [166][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:35:43,472 - mmcls - INFO - Epoch(val) [167][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-04-12 16:36:08,907 - mmcls - INFO - Epoch(val) [168][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:36:34,207 - mmcls - INFO - Epoch(val) [169][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-04-12 16:36:59,675 - mmcls - INFO - Epoch(val) [170][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-04-12 16:37:24,791 - mmcls - INFO - Epoch(val) [171][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-12 16:37:48,495 - mmcls - INFO - Epoch(val) [172][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-12 16:38:12,226 - mmcls - INFO - Epoch(val) [173][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-12 16:38:37,287 - mmcls - INFO - Epoch(val) [174][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-12 16:39:02,773 - mmcls - INFO - Epoch(val) [175][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-04-12 16:39:27,754 - mmcls - INFO - Epoch(val) [176][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-12 16:39:52,609 - mmcls - INFO - Epoch(val) [177][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-12 16:40:16,637 - mmcls - INFO - Epoch(val) [178][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-04-12 16:40:41,631 - mmcls - INFO - Epoch(val) [179][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-04-12 16:41:07,082 - mmcls - INFO - Epoch(val) [180][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-12 16:41:32,566 - mmcls - INFO - Epoch(val) [181][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-12 16:41:57,814 - mmcls - INFO - Epoch(val) [182][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-12 16:42:22,906 - mmcls - INFO - Epoch(val) [183][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-12 16:42:48,186 - mmcls - INFO - Epoch(val) [184][9]	accuracy_top-1: 62.5000, accuracy_top-5: 91.9118
2024-04-12 16:43:13,468 - mmcls - INFO - Epoch(val) [185][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-12 16:43:38,867 - mmcls - INFO - Epoch(val) [186][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-04-12 16:44:04,011 - mmcls - INFO - Epoch(val) [187][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-04-12 17:22:26,699 - mmcls - INFO - Epoch(val) [188][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-04-12 17:22:53,084 - mmcls - INFO - Epoch(val) [189][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-04-12 17:23:16,814 - mmcls - INFO - Epoch(val) [190][9]	accuracy_top-1: 60.2941, accuracy_top-5: 91.9118
2024-04-12 17:23:41,189 - mmcls - INFO - Epoch(val) [191][9]	accuracy_top-1: 60.2941, accuracy_top-5: 91.9118
