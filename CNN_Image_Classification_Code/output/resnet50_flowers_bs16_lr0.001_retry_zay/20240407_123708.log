2024-04-07 12:37:08,967 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.13.1+cu117
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.1+cu117
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: n/a
MMCV CUDA Compiler: n/a
MMClassification: 0.15.0+8d1e84a
------------------------------------------------------------

2024-04-07 12:37:08,968 - mmcls - INFO - Distributed training: False
2024-04-07 12:37:09,093 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=17,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=16,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/test',
        ann_file='data/flowers/meta/test.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=200)
checkpoint_config = dict(interval=100)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/resnet50_flowers_bs16_lr0.001_retry_zay'
gpu_ids = range(0, 1)

2024-04-07 12:37:09,323 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2024-04-07 12:37:09,502 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([17, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([17]): 
NormalInit: mean=0, std=0.01, bias=0 
2024-04-07 12:37:10,971 - mmcls - INFO - Start running, host: zaychan@gpu2-comp-105, work_dir: /userhome/cs2/zaychan/COMP3340Project/CNN_Image_Classification_Code/output/resnet50_flowers_bs16_lr0.001_retry_zay
2024-04-07 12:37:10,971 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-04-07 12:37:10,971 - mmcls - INFO - workflow: [('train', 1)], max: 200 epochs
2024-04-07 12:37:10,972 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/zaychan/COMP3340Project/CNN_Image_Classification_Code/output/resnet50_flowers_bs16_lr0.001_retry_zay by HardDiskBackend.
2024-04-07 12:37:25,044 - mmcls - INFO - Epoch(val) [1][9]	accuracy_top-1: 38.2353, accuracy_top-5: 82.3529
2024-04-07 12:37:35,343 - mmcls - INFO - Epoch(val) [2][9]	accuracy_top-1: 43.3824, accuracy_top-5: 91.1765
2024-04-07 12:37:45,893 - mmcls - INFO - Epoch(val) [3][9]	accuracy_top-1: 47.0588, accuracy_top-5: 93.3824
2024-04-07 12:37:56,115 - mmcls - INFO - Epoch(val) [4][9]	accuracy_top-1: 49.2647, accuracy_top-5: 91.9118
2024-04-07 12:38:06,287 - mmcls - INFO - Epoch(val) [5][9]	accuracy_top-1: 55.1471, accuracy_top-5: 89.7059
2024-04-07 12:38:16,451 - mmcls - INFO - Epoch(val) [6][9]	accuracy_top-1: 55.1471, accuracy_top-5: 92.6471
2024-04-07 12:38:26,606 - mmcls - INFO - Epoch(val) [7][9]	accuracy_top-1: 56.6176, accuracy_top-5: 91.9118
2024-04-07 12:38:36,938 - mmcls - INFO - Epoch(val) [8][9]	accuracy_top-1: 57.3529, accuracy_top-5: 90.4412
2024-04-07 12:38:47,426 - mmcls - INFO - Epoch(val) [9][9]	accuracy_top-1: 60.2941, accuracy_top-5: 92.6471
2024-04-07 12:38:57,768 - mmcls - INFO - Epoch(val) [10][9]	accuracy_top-1: 55.8824, accuracy_top-5: 91.1765
2024-04-07 12:39:07,527 - mmcls - INFO - Epoch(val) [11][9]	accuracy_top-1: 59.5588, accuracy_top-5: 93.3824
2024-04-07 12:39:17,373 - mmcls - INFO - Epoch(val) [12][9]	accuracy_top-1: 56.6176, accuracy_top-5: 92.6471
2024-04-07 12:39:28,505 - mmcls - INFO - Epoch(val) [13][9]	accuracy_top-1: 52.9412, accuracy_top-5: 91.9118
2024-04-07 12:39:38,900 - mmcls - INFO - Epoch(val) [14][9]	accuracy_top-1: 56.6176, accuracy_top-5: 93.3824
2024-04-07 12:39:48,984 - mmcls - INFO - Epoch(val) [15][9]	accuracy_top-1: 64.7059, accuracy_top-5: 89.7059
2024-04-07 12:39:59,339 - mmcls - INFO - Epoch(val) [16][9]	accuracy_top-1: 59.5588, accuracy_top-5: 90.4412
2024-04-07 12:40:09,439 - mmcls - INFO - Epoch(val) [17][9]	accuracy_top-1: 58.0882, accuracy_top-5: 92.6471
2024-04-07 12:40:19,931 - mmcls - INFO - Epoch(val) [18][9]	accuracy_top-1: 63.2353, accuracy_top-5: 94.1176
2024-04-07 12:40:30,405 - mmcls - INFO - Epoch(val) [19][9]	accuracy_top-1: 62.5000, accuracy_top-5: 90.4412
2024-04-07 12:40:40,177 - mmcls - INFO - Epoch(val) [20][9]	accuracy_top-1: 61.0294, accuracy_top-5: 92.6471
2024-04-07 12:40:50,404 - mmcls - INFO - Epoch(val) [21][9]	accuracy_top-1: 58.0882, accuracy_top-5: 93.3824
2024-04-07 12:41:00,606 - mmcls - INFO - Epoch(val) [22][9]	accuracy_top-1: 63.2353, accuracy_top-5: 93.3824
2024-04-07 12:41:11,786 - mmcls - INFO - Epoch(val) [23][9]	accuracy_top-1: 58.8235, accuracy_top-5: 92.6471
2024-04-07 12:41:22,018 - mmcls - INFO - Epoch(val) [24][9]	accuracy_top-1: 58.8235, accuracy_top-5: 94.8529
2024-04-07 12:41:32,387 - mmcls - INFO - Epoch(val) [25][9]	accuracy_top-1: 64.7059, accuracy_top-5: 93.3824
2024-04-07 12:41:42,847 - mmcls - INFO - Epoch(val) [26][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.9118
2024-04-07 12:41:53,597 - mmcls - INFO - Epoch(val) [27][9]	accuracy_top-1: 62.5000, accuracy_top-5: 94.1176
2024-04-07 12:42:04,746 - mmcls - INFO - Epoch(val) [28][9]	accuracy_top-1: 58.8235, accuracy_top-5: 92.6471
2024-04-07 12:42:15,338 - mmcls - INFO - Epoch(val) [29][9]	accuracy_top-1: 63.9706, accuracy_top-5: 92.6471
2024-04-07 12:42:25,827 - mmcls - INFO - Epoch(val) [30][9]	accuracy_top-1: 60.2941, accuracy_top-5: 93.3824
2024-04-07 12:42:36,110 - mmcls - INFO - Epoch(val) [31][9]	accuracy_top-1: 54.4118, accuracy_top-5: 94.1176
2024-04-07 12:42:47,025 - mmcls - INFO - Epoch(val) [32][9]	accuracy_top-1: 61.0294, accuracy_top-5: 93.3824
2024-04-07 12:42:57,794 - mmcls - INFO - Epoch(val) [33][9]	accuracy_top-1: 58.0882, accuracy_top-5: 92.6471
2024-04-07 12:43:08,542 - mmcls - INFO - Epoch(val) [34][9]	accuracy_top-1: 62.5000, accuracy_top-5: 92.6471
2024-04-07 12:43:19,541 - mmcls - INFO - Epoch(val) [35][9]	accuracy_top-1: 57.3529, accuracy_top-5: 94.8529
2024-04-07 12:43:29,646 - mmcls - INFO - Epoch(val) [36][9]	accuracy_top-1: 63.9706, accuracy_top-5: 94.8529
2024-04-07 12:43:39,853 - mmcls - INFO - Epoch(val) [37][9]	accuracy_top-1: 58.8235, accuracy_top-5: 93.3824
2024-04-07 12:43:50,112 - mmcls - INFO - Epoch(val) [38][9]	accuracy_top-1: 60.2941, accuracy_top-5: 92.6471
2024-04-07 12:44:00,394 - mmcls - INFO - Epoch(val) [39][9]	accuracy_top-1: 62.5000, accuracy_top-5: 92.6471
2024-04-07 12:44:10,955 - mmcls - INFO - Epoch(val) [40][9]	accuracy_top-1: 61.7647, accuracy_top-5: 93.3824
2024-04-07 12:44:21,758 - mmcls - INFO - Epoch(val) [41][9]	accuracy_top-1: 55.1471, accuracy_top-5: 94.1176
2024-04-07 12:44:32,026 - mmcls - INFO - Epoch(val) [42][9]	accuracy_top-1: 64.7059, accuracy_top-5: 93.3824
2024-04-07 12:44:42,479 - mmcls - INFO - Epoch(val) [43][9]	accuracy_top-1: 62.5000, accuracy_top-5: 94.1176
2024-04-07 12:44:53,003 - mmcls - INFO - Epoch(val) [44][9]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-04-07 12:45:03,415 - mmcls - INFO - Epoch(val) [45][9]	accuracy_top-1: 66.1765, accuracy_top-5: 94.8529
2024-04-07 12:45:13,921 - mmcls - INFO - Epoch(val) [46][9]	accuracy_top-1: 64.7059, accuracy_top-5: 94.1176
2024-04-07 12:45:24,584 - mmcls - INFO - Epoch(val) [47][9]	accuracy_top-1: 63.9706, accuracy_top-5: 94.1176
2024-04-07 12:45:34,772 - mmcls - INFO - Epoch(val) [48][9]	accuracy_top-1: 61.7647, accuracy_top-5: 94.1176
2024-04-07 12:45:44,777 - mmcls - INFO - Epoch(val) [49][9]	accuracy_top-1: 63.9706, accuracy_top-5: 94.8529
2024-04-07 12:45:54,796 - mmcls - INFO - Epoch(val) [50][9]	accuracy_top-1: 61.7647, accuracy_top-5: 94.1176
2024-04-07 12:46:05,118 - mmcls - INFO - Epoch(val) [51][9]	accuracy_top-1: 64.7059, accuracy_top-5: 94.1176
2024-04-07 12:46:15,280 - mmcls - INFO - Epoch(val) [52][9]	accuracy_top-1: 63.2353, accuracy_top-5: 94.1176
2024-04-07 12:46:25,527 - mmcls - INFO - Epoch(val) [53][9]	accuracy_top-1: 66.1765, accuracy_top-5: 93.3824
2024-04-07 12:46:35,792 - mmcls - INFO - Epoch(val) [54][9]	accuracy_top-1: 66.1765, accuracy_top-5: 94.8529
2024-04-07 12:46:46,069 - mmcls - INFO - Epoch(val) [55][9]	accuracy_top-1: 59.5588, accuracy_top-5: 95.5882
2024-04-07 12:46:56,241 - mmcls - INFO - Epoch(val) [56][9]	accuracy_top-1: 66.9118, accuracy_top-5: 94.8529
2024-04-07 12:47:06,716 - mmcls - INFO - Epoch(val) [57][9]	accuracy_top-1: 65.4412, accuracy_top-5: 94.8529
2024-04-07 12:47:16,944 - mmcls - INFO - Epoch(val) [58][9]	accuracy_top-1: 63.9706, accuracy_top-5: 94.1176
2024-04-07 12:47:27,098 - mmcls - INFO - Epoch(val) [59][9]	accuracy_top-1: 66.1765, accuracy_top-5: 94.1176
2024-04-07 12:47:37,025 - mmcls - INFO - Epoch(val) [60][9]	accuracy_top-1: 67.6471, accuracy_top-5: 93.3824
2024-04-07 12:47:47,440 - mmcls - INFO - Epoch(val) [61][9]	accuracy_top-1: 67.6471, accuracy_top-5: 94.1176
2024-04-07 12:47:57,812 - mmcls - INFO - Epoch(val) [62][9]	accuracy_top-1: 65.4412, accuracy_top-5: 94.1176
2024-04-07 12:48:08,190 - mmcls - INFO - Epoch(val) [63][9]	accuracy_top-1: 64.7059, accuracy_top-5: 96.3235
2024-04-07 12:48:18,674 - mmcls - INFO - Epoch(val) [64][9]	accuracy_top-1: 62.5000, accuracy_top-5: 92.6471
2024-04-07 12:48:29,285 - mmcls - INFO - Epoch(val) [65][9]	accuracy_top-1: 63.9706, accuracy_top-5: 97.0588
2024-04-07 12:48:39,982 - mmcls - INFO - Epoch(val) [66][9]	accuracy_top-1: 64.7059, accuracy_top-5: 94.8529
2024-04-07 12:48:50,659 - mmcls - INFO - Epoch(val) [67][9]	accuracy_top-1: 63.2353, accuracy_top-5: 94.1176
2024-04-07 12:49:01,298 - mmcls - INFO - Epoch(val) [68][9]	accuracy_top-1: 67.6471, accuracy_top-5: 95.5882
2024-04-07 12:49:11,890 - mmcls - INFO - Epoch(val) [69][9]	accuracy_top-1: 63.2353, accuracy_top-5: 94.8529
2024-04-07 12:49:22,403 - mmcls - INFO - Epoch(val) [70][9]	accuracy_top-1: 66.1765, accuracy_top-5: 93.3824
2024-04-07 12:49:32,926 - mmcls - INFO - Epoch(val) [71][9]	accuracy_top-1: 67.6471, accuracy_top-5: 94.1176
2024-04-07 12:49:43,320 - mmcls - INFO - Epoch(val) [72][9]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-07 12:49:53,451 - mmcls - INFO - Epoch(val) [73][9]	accuracy_top-1: 66.9118, accuracy_top-5: 93.3824
2024-04-07 12:50:03,593 - mmcls - INFO - Epoch(val) [74][9]	accuracy_top-1: 63.9706, accuracy_top-5: 94.1176
2024-04-07 12:50:13,864 - mmcls - INFO - Epoch(val) [75][9]	accuracy_top-1: 68.3824, accuracy_top-5: 95.5882
2024-04-07 12:50:24,195 - mmcls - INFO - Epoch(val) [76][9]	accuracy_top-1: 66.9118, accuracy_top-5: 93.3824
2024-04-07 12:50:34,628 - mmcls - INFO - Epoch(val) [77][9]	accuracy_top-1: 61.7647, accuracy_top-5: 93.3824
2024-04-07 12:50:45,307 - mmcls - INFO - Epoch(val) [78][9]	accuracy_top-1: 61.0294, accuracy_top-5: 94.1176
2024-04-07 12:50:55,790 - mmcls - INFO - Epoch(val) [79][9]	accuracy_top-1: 66.9118, accuracy_top-5: 94.1176
2024-04-07 12:51:06,530 - mmcls - INFO - Epoch(val) [80][9]	accuracy_top-1: 66.9118, accuracy_top-5: 94.8529
2024-04-07 12:51:17,389 - mmcls - INFO - Epoch(val) [81][9]	accuracy_top-1: 66.1765, accuracy_top-5: 92.6471
2024-04-07 12:51:28,003 - mmcls - INFO - Epoch(val) [82][9]	accuracy_top-1: 65.4412, accuracy_top-5: 94.8529
2024-04-07 12:51:38,876 - mmcls - INFO - Epoch(val) [83][9]	accuracy_top-1: 65.4412, accuracy_top-5: 95.5882
2024-04-07 12:51:48,680 - mmcls - INFO - Epoch(val) [84][9]	accuracy_top-1: 64.7059, accuracy_top-5: 93.3824
2024-04-07 12:51:58,463 - mmcls - INFO - Epoch(val) [85][9]	accuracy_top-1: 65.4412, accuracy_top-5: 93.3824
2024-04-07 12:52:08,857 - mmcls - INFO - Epoch(val) [86][9]	accuracy_top-1: 63.2353, accuracy_top-5: 95.5882
2024-04-07 12:52:19,416 - mmcls - INFO - Epoch(val) [87][9]	accuracy_top-1: 65.4412, accuracy_top-5: 94.1176
2024-04-07 12:52:29,875 - mmcls - INFO - Epoch(val) [88][9]	accuracy_top-1: 64.7059, accuracy_top-5: 96.3235
2024-04-07 12:52:41,149 - mmcls - INFO - Epoch(val) [89][9]	accuracy_top-1: 63.9706, accuracy_top-5: 94.8529
2024-04-07 12:52:51,293 - mmcls - INFO - Epoch(val) [90][9]	accuracy_top-1: 63.2353, accuracy_top-5: 93.3824
2024-04-07 12:53:01,492 - mmcls - INFO - Epoch(val) [91][9]	accuracy_top-1: 67.6471, accuracy_top-5: 94.1176
2024-04-07 12:53:12,115 - mmcls - INFO - Epoch(val) [92][9]	accuracy_top-1: 61.7647, accuracy_top-5: 94.8529
2024-04-07 12:53:22,781 - mmcls - INFO - Epoch(val) [93][9]	accuracy_top-1: 69.1176, accuracy_top-5: 95.5882
2024-04-07 12:53:33,371 - mmcls - INFO - Epoch(val) [94][9]	accuracy_top-1: 63.9706, accuracy_top-5: 94.8529
2024-04-07 12:53:43,986 - mmcls - INFO - Epoch(val) [95][9]	accuracy_top-1: 66.9118, accuracy_top-5: 94.8529
2024-04-07 12:53:53,993 - mmcls - INFO - Epoch(val) [96][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.1176
2024-04-07 12:54:04,386 - mmcls - INFO - Epoch(val) [97][9]	accuracy_top-1: 67.6471, accuracy_top-5: 94.1176
2024-04-07 12:54:14,473 - mmcls - INFO - Epoch(val) [98][9]	accuracy_top-1: 66.9118, accuracy_top-5: 94.1176
2024-04-07 12:54:25,582 - mmcls - INFO - Epoch(val) [99][9]	accuracy_top-1: 69.1176, accuracy_top-5: 96.3235
2024-04-07 12:54:34,811 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-04-07 12:54:37,189 - mmcls - INFO - Epoch(val) [100][9]	accuracy_top-1: 66.1765, accuracy_top-5: 95.5882
2024-04-07 12:54:47,796 - mmcls - INFO - Epoch(val) [101][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.1176
2024-04-07 12:54:58,475 - mmcls - INFO - Epoch(val) [102][9]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-04-07 12:55:08,965 - mmcls - INFO - Epoch(val) [103][9]	accuracy_top-1: 70.5882, accuracy_top-5: 95.5882
2024-04-07 12:55:19,413 - mmcls - INFO - Epoch(val) [104][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.1176
2024-04-07 12:55:30,169 - mmcls - INFO - Epoch(val) [105][9]	accuracy_top-1: 70.5882, accuracy_top-5: 94.1176
2024-04-07 12:55:40,476 - mmcls - INFO - Epoch(val) [106][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.1176
2024-04-07 12:55:51,617 - mmcls - INFO - Epoch(val) [107][9]	accuracy_top-1: 66.1765, accuracy_top-5: 94.8529
2024-04-07 12:56:02,587 - mmcls - INFO - Epoch(val) [108][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-07 12:56:12,970 - mmcls - INFO - Epoch(val) [109][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 12:56:23,831 - mmcls - INFO - Epoch(val) [110][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.1176
2024-04-07 12:56:34,200 - mmcls - INFO - Epoch(val) [111][9]	accuracy_top-1: 69.1176, accuracy_top-5: 93.3824
2024-04-07 12:56:44,971 - mmcls - INFO - Epoch(val) [112][9]	accuracy_top-1: 72.0588, accuracy_top-5: 94.8529
2024-04-07 12:56:55,731 - mmcls - INFO - Epoch(val) [113][9]	accuracy_top-1: 72.0588, accuracy_top-5: 93.3824
2024-04-07 12:57:06,791 - mmcls - INFO - Epoch(val) [114][9]	accuracy_top-1: 68.3824, accuracy_top-5: 95.5882
2024-04-07 12:57:17,131 - mmcls - INFO - Epoch(val) [115][9]	accuracy_top-1: 67.6471, accuracy_top-5: 94.1176
2024-04-07 12:57:27,615 - mmcls - INFO - Epoch(val) [116][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-07 12:57:37,609 - mmcls - INFO - Epoch(val) [117][9]	accuracy_top-1: 68.3824, accuracy_top-5: 95.5882
2024-04-07 12:57:47,924 - mmcls - INFO - Epoch(val) [118][9]	accuracy_top-1: 70.5882, accuracy_top-5: 94.8529
2024-04-07 12:57:59,027 - mmcls - INFO - Epoch(val) [119][9]	accuracy_top-1: 69.1176, accuracy_top-5: 95.5882
2024-04-07 12:58:09,863 - mmcls - INFO - Epoch(val) [120][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 12:58:20,151 - mmcls - INFO - Epoch(val) [121][9]	accuracy_top-1: 67.6471, accuracy_top-5: 94.8529
2024-04-07 12:58:30,334 - mmcls - INFO - Epoch(val) [122][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 12:58:41,291 - mmcls - INFO - Epoch(val) [123][9]	accuracy_top-1: 67.6471, accuracy_top-5: 94.8529
2024-04-07 12:58:51,562 - mmcls - INFO - Epoch(val) [124][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-07 12:59:01,754 - mmcls - INFO - Epoch(val) [125][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.1176
2024-04-07 12:59:12,225 - mmcls - INFO - Epoch(val) [126][9]	accuracy_top-1: 70.5882, accuracy_top-5: 95.5882
2024-04-07 12:59:22,427 - mmcls - INFO - Epoch(val) [127][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.1176
2024-04-07 12:59:32,747 - mmcls - INFO - Epoch(val) [128][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-07 12:59:44,396 - mmcls - INFO - Epoch(val) [129][9]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-04-07 12:59:54,894 - mmcls - INFO - Epoch(val) [130][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-07 13:00:05,327 - mmcls - INFO - Epoch(val) [131][9]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-04-07 13:00:16,204 - mmcls - INFO - Epoch(val) [132][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.1176
2024-04-07 13:00:26,812 - mmcls - INFO - Epoch(val) [133][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-07 13:00:37,093 - mmcls - INFO - Epoch(val) [134][9]	accuracy_top-1: 71.3235, accuracy_top-5: 94.8529
2024-04-07 13:00:48,050 - mmcls - INFO - Epoch(val) [135][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.1176
2024-04-07 13:00:59,473 - mmcls - INFO - Epoch(val) [136][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.1176
2024-04-07 13:01:09,962 - mmcls - INFO - Epoch(val) [137][9]	accuracy_top-1: 71.3235, accuracy_top-5: 94.8529
2024-04-07 13:01:20,315 - mmcls - INFO - Epoch(val) [138][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-07 13:01:30,828 - mmcls - INFO - Epoch(val) [139][9]	accuracy_top-1: 70.5882, accuracy_top-5: 94.8529
2024-04-07 13:01:41,129 - mmcls - INFO - Epoch(val) [140][9]	accuracy_top-1: 67.6471, accuracy_top-5: 94.1176
2024-04-07 13:01:51,283 - mmcls - INFO - Epoch(val) [141][9]	accuracy_top-1: 71.3235, accuracy_top-5: 95.5882
2024-04-07 13:02:01,659 - mmcls - INFO - Epoch(val) [142][9]	accuracy_top-1: 68.3824, accuracy_top-5: 95.5882
2024-04-07 13:02:12,388 - mmcls - INFO - Epoch(val) [143][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-07 13:02:23,875 - mmcls - INFO - Epoch(val) [144][9]	accuracy_top-1: 71.3235, accuracy_top-5: 95.5882
2024-04-07 13:02:35,130 - mmcls - INFO - Epoch(val) [145][9]	accuracy_top-1: 67.6471, accuracy_top-5: 94.1176
2024-04-07 13:02:45,461 - mmcls - INFO - Epoch(val) [146][9]	accuracy_top-1: 70.5882, accuracy_top-5: 94.1176
2024-04-07 13:02:55,445 - mmcls - INFO - Epoch(val) [147][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 13:03:06,226 - mmcls - INFO - Epoch(val) [148][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 13:03:17,134 - mmcls - INFO - Epoch(val) [149][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 13:03:27,459 - mmcls - INFO - Epoch(val) [150][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-07 13:03:37,960 - mmcls - INFO - Epoch(val) [151][9]	accuracy_top-1: 66.1765, accuracy_top-5: 94.8529
2024-04-07 13:03:48,252 - mmcls - INFO - Epoch(val) [152][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 13:03:59,227 - mmcls - INFO - Epoch(val) [153][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 13:04:09,304 - mmcls - INFO - Epoch(val) [154][9]	accuracy_top-1: 66.1765, accuracy_top-5: 95.5882
2024-04-07 13:04:20,344 - mmcls - INFO - Epoch(val) [155][9]	accuracy_top-1: 68.3824, accuracy_top-5: 95.5882
2024-04-07 13:04:30,991 - mmcls - INFO - Epoch(val) [156][9]	accuracy_top-1: 67.6471, accuracy_top-5: 94.8529
2024-04-07 13:04:41,393 - mmcls - INFO - Epoch(val) [157][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.1176
2024-04-07 13:04:52,022 - mmcls - INFO - Epoch(val) [158][9]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-04-07 13:05:02,741 - mmcls - INFO - Epoch(val) [159][9]	accuracy_top-1: 70.5882, accuracy_top-5: 94.8529
2024-04-07 13:05:12,990 - mmcls - INFO - Epoch(val) [160][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 13:05:23,380 - mmcls - INFO - Epoch(val) [161][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-07 13:05:33,578 - mmcls - INFO - Epoch(val) [162][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-07 13:05:43,736 - mmcls - INFO - Epoch(val) [163][9]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-04-07 13:05:54,246 - mmcls - INFO - Epoch(val) [164][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-07 13:06:04,465 - mmcls - INFO - Epoch(val) [165][9]	accuracy_top-1: 69.1176, accuracy_top-5: 95.5882
2024-04-07 13:06:15,195 - mmcls - INFO - Epoch(val) [166][9]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-04-07 13:06:25,330 - mmcls - INFO - Epoch(val) [167][9]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-04-07 13:06:35,832 - mmcls - INFO - Epoch(val) [168][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 13:06:46,151 - mmcls - INFO - Epoch(val) [169][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-07 13:06:56,707 - mmcls - INFO - Epoch(val) [170][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-07 13:07:06,731 - mmcls - INFO - Epoch(val) [171][9]	accuracy_top-1: 68.3824, accuracy_top-5: 95.5882
2024-04-07 13:07:16,705 - mmcls - INFO - Epoch(val) [172][9]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-04-07 13:07:26,651 - mmcls - INFO - Epoch(val) [173][9]	accuracy_top-1: 70.5882, accuracy_top-5: 94.1176
2024-04-07 13:07:36,759 - mmcls - INFO - Epoch(val) [174][9]	accuracy_top-1: 71.3235, accuracy_top-5: 95.5882
2024-04-07 13:07:47,036 - mmcls - INFO - Epoch(val) [175][9]	accuracy_top-1: 71.3235, accuracy_top-5: 95.5882
2024-04-07 13:07:57,491 - mmcls - INFO - Epoch(val) [176][9]	accuracy_top-1: 69.1176, accuracy_top-5: 95.5882
2024-04-07 13:08:07,691 - mmcls - INFO - Epoch(val) [177][9]	accuracy_top-1: 69.1176, accuracy_top-5: 95.5882
2024-04-07 13:08:17,829 - mmcls - INFO - Epoch(val) [178][9]	accuracy_top-1: 70.5882, accuracy_top-5: 94.8529
2024-04-07 13:08:27,767 - mmcls - INFO - Epoch(val) [179][9]	accuracy_top-1: 69.1176, accuracy_top-5: 95.5882
2024-04-07 13:08:37,634 - mmcls - INFO - Epoch(val) [180][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.1176
2024-04-07 13:08:47,645 - mmcls - INFO - Epoch(val) [181][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.1176
2024-04-07 13:08:57,342 - mmcls - INFO - Epoch(val) [182][9]	accuracy_top-1: 70.5882, accuracy_top-5: 94.8529
2024-04-07 13:09:07,795 - mmcls - INFO - Epoch(val) [183][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-07 13:09:17,985 - mmcls - INFO - Epoch(val) [184][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-07 13:09:27,883 - mmcls - INFO - Epoch(val) [185][9]	accuracy_top-1: 69.1176, accuracy_top-5: 95.5882
2024-04-07 13:09:38,579 - mmcls - INFO - Epoch(val) [186][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 13:09:49,336 - mmcls - INFO - Epoch(val) [187][9]	accuracy_top-1: 70.5882, accuracy_top-5: 94.1176
2024-04-07 13:10:00,398 - mmcls - INFO - Epoch(val) [188][9]	accuracy_top-1: 68.3824, accuracy_top-5: 95.5882
2024-04-07 13:10:11,467 - mmcls - INFO - Epoch(val) [189][9]	accuracy_top-1: 69.1176, accuracy_top-5: 95.5882
2024-04-07 13:10:22,769 - mmcls - INFO - Epoch(val) [190][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 13:10:32,782 - mmcls - INFO - Epoch(val) [191][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-07 13:10:43,666 - mmcls - INFO - Epoch(val) [192][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-07 13:10:54,055 - mmcls - INFO - Epoch(val) [193][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.1176
2024-04-07 13:11:04,639 - mmcls - INFO - Epoch(val) [194][9]	accuracy_top-1: 69.1176, accuracy_top-5: 95.5882
2024-04-07 13:11:15,077 - mmcls - INFO - Epoch(val) [195][9]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-07 13:11:25,578 - mmcls - INFO - Epoch(val) [196][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-07 13:11:35,996 - mmcls - INFO - Epoch(val) [197][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-07 13:11:46,514 - mmcls - INFO - Epoch(val) [198][9]	accuracy_top-1: 68.3824, accuracy_top-5: 95.5882
2024-04-07 13:11:56,605 - mmcls - INFO - Epoch(val) [199][9]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-07 13:12:06,126 - mmcls - INFO - Saving checkpoint at 200 epochs
2024-04-07 13:12:08,727 - mmcls - INFO - Epoch(val) [200][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
