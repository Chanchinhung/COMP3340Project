2024-04-04 18:29:04,112 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: n/a
MMCV CUDA Compiler: n/a
MMClassification: 0.15.0+96ebba7
------------------------------------------------------------

2024-04-04 18:29:04,114 - mmcls - INFO - Distributed training: False
2024-04-04 18:29:04,309 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='InceptionV3', num_classes=17, aux_logits=False),
    neck=None,
    head=dict(
        type='ClsHead', loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=64,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/test',
        ann_file='data/flowers/meta/test.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=200)
checkpoint_config = dict(interval=100)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/inception_v3/inception_v3_flowers_bs64_lr0.01'
gpu_ids = range(0, 1)

2024-04-04 18:29:04,645 - mmcls - INFO - initialize InceptionV3 with init_cfg [{'type': 'TruncNormal', 'layer': ['Conv2d', 'Linear'], 'std': 0.1}, {'type': 'Constant', 'layer': 'BatchNorm2d', 'val': 1}]
Name of parameter - Initialization information

backbone.Conv2d_1a_3x3.conv.weight - torch.Size([32, 3, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_1a_3x3.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_1a_3x3.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_2a_3x3.conv.weight - torch.Size([32, 32, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_2a_3x3.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_2a_3x3.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_2b_3x3.conv.weight - torch.Size([64, 32, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_2b_3x3.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_2b_3x3.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_3b_1x1.conv.weight - torch.Size([80, 64, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_3b_1x1.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_3b_1x1.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_4a_3x3.conv.weight - torch.Size([192, 80, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_4a_3x3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_4a_3x3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch1x1.conv.weight - torch.Size([64, 192, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch5x5_1.conv.weight - torch.Size([48, 192, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch5x5_1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch5x5_1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch5x5_2.conv.weight - torch.Size([64, 48, 5, 5]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch5x5_2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch5x5_2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_1.conv.weight - torch.Size([64, 192, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch3x3dbl_1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_2.conv.weight - torch.Size([96, 64, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch3x3dbl_2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_3.conv.weight - torch.Size([96, 96, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch3x3dbl_3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch_pool.conv.weight - torch.Size([32, 192, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch_pool.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch_pool.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch1x1.conv.weight - torch.Size([64, 256, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch5x5_1.conv.weight - torch.Size([48, 256, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch5x5_1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch5x5_1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch5x5_2.conv.weight - torch.Size([64, 48, 5, 5]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch5x5_2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch5x5_2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_1.conv.weight - torch.Size([64, 256, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch3x3dbl_1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_2.conv.weight - torch.Size([96, 64, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch3x3dbl_2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_3.conv.weight - torch.Size([96, 96, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch3x3dbl_3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch_pool.conv.weight - torch.Size([64, 256, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch_pool.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch_pool.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch1x1.conv.weight - torch.Size([64, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch5x5_1.conv.weight - torch.Size([48, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch5x5_1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch5x5_1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch5x5_2.conv.weight - torch.Size([64, 48, 5, 5]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch5x5_2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch5x5_2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_1.conv.weight - torch.Size([64, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch3x3dbl_1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_2.conv.weight - torch.Size([96, 64, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch3x3dbl_2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_3.conv.weight - torch.Size([96, 96, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch3x3dbl_3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch_pool.conv.weight - torch.Size([64, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch_pool.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch_pool.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3.conv.weight - torch.Size([384, 288, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6a.branch3x3.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_1.conv.weight - torch.Size([64, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6a.branch3x3dbl_1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_2.conv.weight - torch.Size([96, 64, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6a.branch3x3dbl_2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_3.conv.weight - torch.Size([96, 96, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6a.branch3x3dbl_3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch1x1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch1x1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch1x1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_1.conv.weight - torch.Size([128, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7_1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_2.conv.weight - torch.Size([128, 128, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7_2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_3.conv.weight - torch.Size([192, 128, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_1.conv.weight - torch.Size([128, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_2.conv.weight - torch.Size([128, 128, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_3.conv.weight - torch.Size([128, 128, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_4.conv.weight - torch.Size([128, 128, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_4.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_4.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_5.conv.weight - torch.Size([192, 128, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_5.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_5.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch_pool.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch1x1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch1x1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch1x1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_1.conv.weight - torch.Size([160, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7_1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_2.conv.weight - torch.Size([160, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7_2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_3.conv.weight - torch.Size([192, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_1.conv.weight - torch.Size([160, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_2.conv.weight - torch.Size([160, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_3.conv.weight - torch.Size([160, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_3.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_3.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_4.conv.weight - torch.Size([160, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_4.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_4.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_5.conv.weight - torch.Size([192, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_5.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_5.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch_pool.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch1x1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch1x1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch1x1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_1.conv.weight - torch.Size([160, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7_1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_2.conv.weight - torch.Size([160, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7_2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_3.conv.weight - torch.Size([192, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_1.conv.weight - torch.Size([160, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_2.conv.weight - torch.Size([160, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_3.conv.weight - torch.Size([160, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_3.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_3.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_4.conv.weight - torch.Size([160, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_4.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_4.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_5.conv.weight - torch.Size([192, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_5.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_5.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch_pool.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch1x1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch1x1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch1x1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7_1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_2.conv.weight - torch.Size([192, 192, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7_2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_3.conv.weight - torch.Size([192, 192, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_2.conv.weight - torch.Size([192, 192, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_3.conv.weight - torch.Size([192, 192, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_4.conv.weight - torch.Size([192, 192, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_4.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_4.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_5.conv.weight - torch.Size([192, 192, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_5.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_5.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch_pool.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch3x3_1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch3x3_1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch3x3_1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch3x3_2.conv.weight - torch.Size([320, 192, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch3x3_2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch3x3_2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch7x7x3_1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_2.conv.weight - torch.Size([192, 192, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch7x7x3_2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_3.conv.weight - torch.Size([192, 192, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch7x7x3_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_4.conv.weight - torch.Size([192, 192, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch7x7x3_4.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_4.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch1x1.conv.weight - torch.Size([320, 1280, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch1x1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch1x1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_1.conv.weight - torch.Size([384, 1280, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3_1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_2a.conv.weight - torch.Size([384, 384, 1, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3_2a.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_2a.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_2b.conv.weight - torch.Size([384, 384, 3, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3_2b.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_2b.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_1.conv.weight - torch.Size([448, 1280, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3dbl_1.bn.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_1.bn.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_2.conv.weight - torch.Size([384, 448, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3dbl_2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_3a.conv.weight - torch.Size([384, 384, 1, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3dbl_3a.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_3a.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_3b.conv.weight - torch.Size([384, 384, 3, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3dbl_3b.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_3b.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch_pool.conv.weight - torch.Size([192, 1280, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch1x1.conv.weight - torch.Size([320, 2048, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch1x1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch1x1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_1.conv.weight - torch.Size([384, 2048, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3_1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_2a.conv.weight - torch.Size([384, 384, 1, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3_2a.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_2a.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_2b.conv.weight - torch.Size([384, 384, 3, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3_2b.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_2b.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_1.conv.weight - torch.Size([448, 2048, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3dbl_1.bn.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_1.bn.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_2.conv.weight - torch.Size([384, 448, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3dbl_2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_3a.conv.weight - torch.Size([384, 384, 1, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3dbl_3a.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_3a.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_3b.conv.weight - torch.Size([384, 384, 3, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3dbl_3b.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_3b.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch_pool.conv.weight - torch.Size([192, 2048, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.fc.weight - torch.Size([17, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.fc.bias - torch.Size([17]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 
2024-04-04 18:29:08,572 - mmcls - INFO - Start running, host: ambr0se@gpu2-comp-115, work_dir: /userhome/cs2/ambr0se/COMP3340Project/CNN_Image_Classification_Code/output/inception_v3/inception_v3_flowers_bs64_lr0.01
2024-04-04 18:29:08,572 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-04-04 18:29:08,572 - mmcls - INFO - workflow: [('train', 1)], max: 200 epochs
2024-04-04 18:29:08,572 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/ambr0se/COMP3340Project/CNN_Image_Classification_Code/output/inception_v3/inception_v3_flowers_bs64_lr0.01 by HardDiskBackend.
2024-04-04 18:29:19,044 - mmcls - INFO - Epoch(val) [1][3]	accuracy_top-1: 5.8824, accuracy_top-5: 5.8824
2024-04-04 18:29:29,684 - mmcls - INFO - Epoch(val) [2][3]	accuracy_top-1: 3.6765, accuracy_top-5: 27.9412
2024-04-04 18:29:39,889 - mmcls - INFO - Epoch(val) [3][3]	accuracy_top-1: 16.1765, accuracy_top-5: 62.5000
2024-04-04 18:29:50,281 - mmcls - INFO - Epoch(val) [4][3]	accuracy_top-1: 24.2647, accuracy_top-5: 72.0588
2024-04-04 18:30:01,166 - mmcls - INFO - Epoch(val) [5][3]	accuracy_top-1: 27.2059, accuracy_top-5: 72.7941
2024-04-04 18:30:16,068 - mmcls - INFO - Epoch(val) [6][3]	accuracy_top-1: 38.9706, accuracy_top-5: 84.5588
2024-04-04 18:30:27,858 - mmcls - INFO - Epoch(val) [7][3]	accuracy_top-1: 35.2941, accuracy_top-5: 83.8235
2024-04-04 18:30:38,906 - mmcls - INFO - Epoch(val) [8][3]	accuracy_top-1: 39.7059, accuracy_top-5: 84.5588
2024-04-04 18:30:49,317 - mmcls - INFO - Epoch(val) [9][3]	accuracy_top-1: 41.1765, accuracy_top-5: 85.2941
2024-04-04 18:30:59,864 - mmcls - INFO - Epoch(val) [10][3]	accuracy_top-1: 45.5882, accuracy_top-5: 86.0294
2024-04-04 18:31:10,844 - mmcls - INFO - Epoch(val) [11][3]	accuracy_top-1: 48.5294, accuracy_top-5: 86.7647
2024-04-04 18:31:21,593 - mmcls - INFO - Epoch(val) [12][3]	accuracy_top-1: 54.4118, accuracy_top-5: 89.7059
2024-04-04 18:31:33,437 - mmcls - INFO - Epoch(val) [13][3]	accuracy_top-1: 55.1471, accuracy_top-5: 85.2941
2024-04-04 18:31:43,812 - mmcls - INFO - Epoch(val) [14][3]	accuracy_top-1: 48.5294, accuracy_top-5: 88.2353
2024-04-04 18:31:54,205 - mmcls - INFO - Epoch(val) [15][3]	accuracy_top-1: 54.4118, accuracy_top-5: 86.0294
2024-04-04 18:32:04,511 - mmcls - INFO - Epoch(val) [16][3]	accuracy_top-1: 55.1471, accuracy_top-5: 85.2941
2024-04-04 18:32:14,951 - mmcls - INFO - Epoch(val) [17][3]	accuracy_top-1: 60.2941, accuracy_top-5: 87.5000
2024-04-04 18:32:25,383 - mmcls - INFO - Epoch(val) [18][3]	accuracy_top-1: 50.0000, accuracy_top-5: 89.7059
2024-04-04 18:32:36,155 - mmcls - INFO - Epoch(val) [19][3]	accuracy_top-1: 57.3529, accuracy_top-5: 91.1765
2024-04-04 18:32:46,618 - mmcls - INFO - Epoch(val) [20][3]	accuracy_top-1: 51.4706, accuracy_top-5: 82.3529
2024-04-04 18:32:57,828 - mmcls - INFO - Epoch(val) [21][3]	accuracy_top-1: 56.6176, accuracy_top-5: 86.7647
2024-04-04 18:33:07,963 - mmcls - INFO - Epoch(val) [22][3]	accuracy_top-1: 44.8529, accuracy_top-5: 82.3529
2024-04-04 18:33:18,096 - mmcls - INFO - Epoch(val) [23][3]	accuracy_top-1: 55.8824, accuracy_top-5: 86.7647
2024-04-04 18:33:29,608 - mmcls - INFO - Epoch(val) [24][3]	accuracy_top-1: 60.2941, accuracy_top-5: 89.7059
2024-04-04 18:33:40,146 - mmcls - INFO - Epoch(val) [25][3]	accuracy_top-1: 61.0294, accuracy_top-5: 88.9706
2024-04-04 18:33:50,915 - mmcls - INFO - Epoch(val) [26][3]	accuracy_top-1: 62.5000, accuracy_top-5: 88.2353
2024-04-04 18:34:01,374 - mmcls - INFO - Epoch(val) [27][3]	accuracy_top-1: 59.5588, accuracy_top-5: 91.1765
2024-04-04 18:34:11,855 - mmcls - INFO - Epoch(val) [28][3]	accuracy_top-1: 60.2941, accuracy_top-5: 88.9706
2024-04-04 18:34:22,866 - mmcls - INFO - Epoch(val) [29][3]	accuracy_top-1: 59.5588, accuracy_top-5: 90.4412
2024-04-04 18:34:34,912 - mmcls - INFO - Epoch(val) [30][3]	accuracy_top-1: 63.2353, accuracy_top-5: 90.4412
2024-04-04 18:34:45,675 - mmcls - INFO - Epoch(val) [31][3]	accuracy_top-1: 58.8235, accuracy_top-5: 93.3824
2024-04-04 18:34:56,287 - mmcls - INFO - Epoch(val) [32][3]	accuracy_top-1: 61.7647, accuracy_top-5: 88.9706
2024-04-04 18:35:06,625 - mmcls - INFO - Epoch(val) [33][3]	accuracy_top-1: 56.6176, accuracy_top-5: 91.1765
2024-04-04 18:35:17,083 - mmcls - INFO - Epoch(val) [34][3]	accuracy_top-1: 56.6176, accuracy_top-5: 88.2353
2024-04-04 18:35:28,167 - mmcls - INFO - Epoch(val) [35][3]	accuracy_top-1: 62.5000, accuracy_top-5: 91.9118
2024-04-04 18:35:38,960 - mmcls - INFO - Epoch(val) [36][3]	accuracy_top-1: 62.5000, accuracy_top-5: 94.1176
2024-04-04 18:35:49,347 - mmcls - INFO - Epoch(val) [37][3]	accuracy_top-1: 63.2353, accuracy_top-5: 89.7059
2024-04-04 18:35:59,800 - mmcls - INFO - Epoch(val) [38][3]	accuracy_top-1: 66.9118, accuracy_top-5: 91.1765
2024-04-04 18:36:10,889 - mmcls - INFO - Epoch(val) [39][3]	accuracy_top-1: 63.9706, accuracy_top-5: 92.6471
2024-04-04 18:36:21,719 - mmcls - INFO - Epoch(val) [40][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.9118
2024-04-04 18:36:32,661 - mmcls - INFO - Epoch(val) [41][3]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-04 18:36:43,239 - mmcls - INFO - Epoch(val) [42][3]	accuracy_top-1: 64.7059, accuracy_top-5: 96.3235
2024-04-04 18:36:53,726 - mmcls - INFO - Epoch(val) [43][3]	accuracy_top-1: 67.6471, accuracy_top-5: 91.1765
2024-04-04 18:37:04,096 - mmcls - INFO - Epoch(val) [44][3]	accuracy_top-1: 67.6471, accuracy_top-5: 93.3824
2024-04-04 18:37:15,431 - mmcls - INFO - Epoch(val) [45][3]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-04 18:37:26,166 - mmcls - INFO - Epoch(val) [46][3]	accuracy_top-1: 66.9118, accuracy_top-5: 94.1176
2024-04-04 18:37:40,669 - mmcls - INFO - Epoch(val) [47][3]	accuracy_top-1: 67.6471, accuracy_top-5: 96.3235
2024-04-04 18:37:54,090 - mmcls - INFO - Epoch(val) [48][3]	accuracy_top-1: 67.6471, accuracy_top-5: 95.5882
2024-04-04 18:38:06,132 - mmcls - INFO - Epoch(val) [49][3]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-04 18:38:17,174 - mmcls - INFO - Epoch(val) [50][3]	accuracy_top-1: 61.0294, accuracy_top-5: 94.1176
2024-04-04 18:38:27,969 - mmcls - INFO - Epoch(val) [51][3]	accuracy_top-1: 66.9118, accuracy_top-5: 94.8529
2024-04-04 18:38:38,267 - mmcls - INFO - Epoch(val) [52][3]	accuracy_top-1: 64.7059, accuracy_top-5: 97.0588
2024-04-04 18:38:48,735 - mmcls - INFO - Epoch(val) [53][3]	accuracy_top-1: 69.1176, accuracy_top-5: 97.7941
2024-04-04 18:39:02,382 - mmcls - INFO - Epoch(val) [54][3]	accuracy_top-1: 68.3824, accuracy_top-5: 96.3235
2024-04-04 18:39:12,713 - mmcls - INFO - Epoch(val) [55][3]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-04-04 18:39:23,273 - mmcls - INFO - Epoch(val) [56][3]	accuracy_top-1: 66.1765, accuracy_top-5: 94.8529
2024-04-04 18:39:33,523 - mmcls - INFO - Epoch(val) [57][3]	accuracy_top-1: 66.9118, accuracy_top-5: 96.3235
2024-04-04 18:39:44,147 - mmcls - INFO - Epoch(val) [58][3]	accuracy_top-1: 72.7941, accuracy_top-5: 95.5882
2024-04-04 18:40:00,037 - mmcls - INFO - Epoch(val) [59][3]	accuracy_top-1: 64.7059, accuracy_top-5: 96.3235
2024-04-04 18:40:10,477 - mmcls - INFO - Epoch(val) [60][3]	accuracy_top-1: 64.7059, accuracy_top-5: 96.3235
2024-04-04 18:40:21,142 - mmcls - INFO - Epoch(val) [61][3]	accuracy_top-1: 68.3824, accuracy_top-5: 94.8529
2024-04-04 18:40:31,482 - mmcls - INFO - Epoch(val) [62][3]	accuracy_top-1: 64.7059, accuracy_top-5: 92.6471
2024-04-04 18:40:42,211 - mmcls - INFO - Epoch(val) [63][3]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-04 18:40:55,305 - mmcls - INFO - Epoch(val) [64][3]	accuracy_top-1: 66.9118, accuracy_top-5: 94.8529
2024-04-04 18:41:06,151 - mmcls - INFO - Epoch(val) [65][3]	accuracy_top-1: 66.1765, accuracy_top-5: 92.6471
2024-04-04 18:41:16,463 - mmcls - INFO - Epoch(val) [66][3]	accuracy_top-1: 70.5882, accuracy_top-5: 95.5882
2024-04-04 18:41:26,730 - mmcls - INFO - Epoch(val) [67][3]	accuracy_top-1: 62.5000, accuracy_top-5: 93.3824
2024-04-04 18:41:37,273 - mmcls - INFO - Epoch(val) [68][3]	accuracy_top-1: 72.0588, accuracy_top-5: 97.0588
2024-04-04 18:41:48,581 - mmcls - INFO - Epoch(val) [69][3]	accuracy_top-1: 69.1176, accuracy_top-5: 95.5882
2024-04-04 18:42:01,123 - mmcls - INFO - Epoch(val) [70][3]	accuracy_top-1: 65.4412, accuracy_top-5: 97.0588
2024-04-04 18:42:11,482 - mmcls - INFO - Epoch(val) [71][3]	accuracy_top-1: 66.1765, accuracy_top-5: 94.1176
2024-04-04 18:42:22,150 - mmcls - INFO - Epoch(val) [72][3]	accuracy_top-1: 73.5294, accuracy_top-5: 99.2647
2024-04-04 18:42:32,873 - mmcls - INFO - Epoch(val) [73][3]	accuracy_top-1: 70.5882, accuracy_top-5: 94.8529
2024-04-04 18:42:43,472 - mmcls - INFO - Epoch(val) [74][3]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-04 18:42:54,042 - mmcls - INFO - Epoch(val) [75][3]	accuracy_top-1: 69.1176, accuracy_top-5: 94.8529
2024-04-04 18:43:04,883 - mmcls - INFO - Epoch(val) [76][3]	accuracy_top-1: 70.5882, accuracy_top-5: 95.5882
2024-04-04 18:43:15,374 - mmcls - INFO - Epoch(val) [77][3]	accuracy_top-1: 71.3235, accuracy_top-5: 95.5882
2024-04-04 18:43:26,413 - mmcls - INFO - Epoch(val) [78][3]	accuracy_top-1: 69.8529, accuracy_top-5: 94.8529
2024-04-04 18:43:37,066 - mmcls - INFO - Epoch(val) [79][3]	accuracy_top-1: 69.8529, accuracy_top-5: 97.0588
2024-04-04 18:43:47,307 - mmcls - INFO - Epoch(val) [80][3]	accuracy_top-1: 72.0588, accuracy_top-5: 96.3235
2024-04-04 18:44:01,498 - mmcls - INFO - Epoch(val) [81][3]	accuracy_top-1: 69.8529, accuracy_top-5: 94.1176
2024-04-04 18:44:12,114 - mmcls - INFO - Epoch(val) [82][3]	accuracy_top-1: 72.7941, accuracy_top-5: 97.0588
2024-04-04 18:44:24,303 - mmcls - INFO - Epoch(val) [83][3]	accuracy_top-1: 64.7059, accuracy_top-5: 99.2647
2024-04-04 18:44:34,863 - mmcls - INFO - Epoch(val) [84][3]	accuracy_top-1: 73.5294, accuracy_top-5: 95.5882
2024-04-04 18:44:44,895 - mmcls - INFO - Epoch(val) [85][3]	accuracy_top-1: 70.5882, accuracy_top-5: 96.3235
2024-04-04 18:44:55,318 - mmcls - INFO - Epoch(val) [86][3]	accuracy_top-1: 66.9118, accuracy_top-5: 94.8529
2024-04-04 18:45:07,560 - mmcls - INFO - Epoch(val) [87][3]	accuracy_top-1: 72.7941, accuracy_top-5: 97.7941
2024-04-04 18:45:18,341 - mmcls - INFO - Epoch(val) [88][3]	accuracy_top-1: 72.0588, accuracy_top-5: 97.7941
2024-04-04 18:45:29,307 - mmcls - INFO - Epoch(val) [89][3]	accuracy_top-1: 67.6471, accuracy_top-5: 95.5882
2024-04-04 18:45:40,224 - mmcls - INFO - Epoch(val) [90][3]	accuracy_top-1: 71.3235, accuracy_top-5: 97.0588
2024-04-04 18:45:50,994 - mmcls - INFO - Epoch(val) [91][3]	accuracy_top-1: 71.3235, accuracy_top-5: 97.7941
2024-04-04 18:46:01,319 - mmcls - INFO - Epoch(val) [92][3]	accuracy_top-1: 69.8529, accuracy_top-5: 97.0588
2024-04-04 18:46:11,916 - mmcls - INFO - Epoch(val) [93][3]	accuracy_top-1: 74.2647, accuracy_top-5: 97.0588
2024-04-04 18:46:22,810 - mmcls - INFO - Epoch(val) [94][3]	accuracy_top-1: 72.7941, accuracy_top-5: 94.8529
2024-04-04 18:46:33,317 - mmcls - INFO - Epoch(val) [95][3]	accuracy_top-1: 72.0588, accuracy_top-5: 97.0588
2024-04-04 18:46:45,937 - mmcls - INFO - Epoch(val) [96][3]	accuracy_top-1: 65.4412, accuracy_top-5: 92.6471
2024-04-04 18:46:56,913 - mmcls - INFO - Epoch(val) [97][3]	accuracy_top-1: 76.4706, accuracy_top-5: 97.0588
2024-04-04 18:47:07,835 - mmcls - INFO - Epoch(val) [98][3]	accuracy_top-1: 72.0588, accuracy_top-5: 97.0588
2024-04-04 18:47:18,398 - mmcls - INFO - Epoch(val) [99][3]	accuracy_top-1: 72.0588, accuracy_top-5: 96.3235
2024-04-04 18:47:27,551 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-04-04 18:47:30,045 - mmcls - INFO - Epoch(val) [100][3]	accuracy_top-1: 72.0588, accuracy_top-5: 97.0588
2024-04-04 18:47:40,663 - mmcls - INFO - Epoch(val) [101][3]	accuracy_top-1: 72.7941, accuracy_top-5: 97.0588
2024-04-04 18:47:51,285 - mmcls - INFO - Epoch(val) [102][3]	accuracy_top-1: 74.2647, accuracy_top-5: 97.0588
2024-04-04 18:48:02,128 - mmcls - INFO - Epoch(val) [103][3]	accuracy_top-1: 73.5294, accuracy_top-5: 96.3235
2024-04-04 18:48:13,632 - mmcls - INFO - Epoch(val) [104][3]	accuracy_top-1: 75.7353, accuracy_top-5: 97.7941
2024-04-04 18:48:24,133 - mmcls - INFO - Epoch(val) [105][3]	accuracy_top-1: 74.2647, accuracy_top-5: 97.7941
2024-04-04 18:48:34,566 - mmcls - INFO - Epoch(val) [106][3]	accuracy_top-1: 77.2059, accuracy_top-5: 97.7941
2024-04-04 18:48:45,340 - mmcls - INFO - Epoch(val) [107][3]	accuracy_top-1: 75.7353, accuracy_top-5: 97.7941
2024-04-04 18:48:55,893 - mmcls - INFO - Epoch(val) [108][3]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
2024-04-04 18:49:07,017 - mmcls - INFO - Epoch(val) [109][3]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
2024-04-04 18:49:17,802 - mmcls - INFO - Epoch(val) [110][3]	accuracy_top-1: 75.0000, accuracy_top-5: 96.3235
2024-04-04 18:49:28,748 - mmcls - INFO - Epoch(val) [111][3]	accuracy_top-1: 74.2647, accuracy_top-5: 97.7941
2024-04-04 18:49:39,437 - mmcls - INFO - Epoch(val) [112][3]	accuracy_top-1: 74.2647, accuracy_top-5: 98.5294
2024-04-04 18:49:50,686 - mmcls - INFO - Epoch(val) [113][3]	accuracy_top-1: 75.7353, accuracy_top-5: 97.7941
2024-04-04 18:50:01,810 - mmcls - INFO - Epoch(val) [114][3]	accuracy_top-1: 74.2647, accuracy_top-5: 98.5294
2024-04-04 18:50:13,401 - mmcls - INFO - Epoch(val) [115][3]	accuracy_top-1: 73.5294, accuracy_top-5: 98.5294
2024-04-04 18:50:23,839 - mmcls - INFO - Epoch(val) [116][3]	accuracy_top-1: 74.2647, accuracy_top-5: 97.7941
2024-04-04 18:50:34,920 - mmcls - INFO - Epoch(val) [117][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:50:45,883 - mmcls - INFO - Epoch(val) [118][3]	accuracy_top-1: 75.7353, accuracy_top-5: 97.0588
2024-04-04 18:50:56,736 - mmcls - INFO - Epoch(val) [119][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:51:07,636 - mmcls - INFO - Epoch(val) [120][3]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
2024-04-04 18:51:18,587 - mmcls - INFO - Epoch(val) [121][3]	accuracy_top-1: 75.7353, accuracy_top-5: 97.7941
2024-04-04 18:51:29,711 - mmcls - INFO - Epoch(val) [122][3]	accuracy_top-1: 74.2647, accuracy_top-5: 97.7941
2024-04-04 18:51:40,438 - mmcls - INFO - Epoch(val) [123][3]	accuracy_top-1: 75.7353, accuracy_top-5: 97.7941
2024-04-04 18:51:53,199 - mmcls - INFO - Epoch(val) [124][3]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 18:52:04,029 - mmcls - INFO - Epoch(val) [125][3]	accuracy_top-1: 74.2647, accuracy_top-5: 99.2647
2024-04-04 18:52:16,313 - mmcls - INFO - Epoch(val) [126][3]	accuracy_top-1: 74.2647, accuracy_top-5: 98.5294
2024-04-04 18:52:26,815 - mmcls - INFO - Epoch(val) [127][3]	accuracy_top-1: 74.2647, accuracy_top-5: 98.5294
2024-04-04 18:52:37,254 - mmcls - INFO - Epoch(val) [128][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:52:47,580 - mmcls - INFO - Epoch(val) [129][3]	accuracy_top-1: 73.5294, accuracy_top-5: 98.5294
2024-04-04 18:52:57,956 - mmcls - INFO - Epoch(val) [130][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:53:08,878 - mmcls - INFO - Epoch(val) [131][3]	accuracy_top-1: 73.5294, accuracy_top-5: 97.7941
2024-04-04 18:53:19,529 - mmcls - INFO - Epoch(val) [132][3]	accuracy_top-1: 76.4706, accuracy_top-5: 97.7941
2024-04-04 18:53:29,985 - mmcls - INFO - Epoch(val) [133][3]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 18:53:40,278 - mmcls - INFO - Epoch(val) [134][3]	accuracy_top-1: 75.0000, accuracy_top-5: 97.7941
2024-04-04 18:53:50,965 - mmcls - INFO - Epoch(val) [135][3]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
2024-04-04 18:54:01,796 - mmcls - INFO - Epoch(val) [136][3]	accuracy_top-1: 75.0000, accuracy_top-5: 97.7941
2024-04-04 18:54:12,199 - mmcls - INFO - Epoch(val) [137][3]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 18:54:22,837 - mmcls - INFO - Epoch(val) [138][3]	accuracy_top-1: 77.2059, accuracy_top-5: 97.7941
2024-04-04 18:54:33,566 - mmcls - INFO - Epoch(val) [139][3]	accuracy_top-1: 75.7353, accuracy_top-5: 97.7941
2024-04-04 18:54:44,180 - mmcls - INFO - Epoch(val) [140][3]	accuracy_top-1: 77.2059, accuracy_top-5: 97.7941
2024-04-04 18:54:54,719 - mmcls - INFO - Epoch(val) [141][3]	accuracy_top-1: 77.2059, accuracy_top-5: 97.7941
2024-04-04 18:55:05,266 - mmcls - INFO - Epoch(val) [142][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 18:55:15,988 - mmcls - INFO - Epoch(val) [143][3]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 18:55:27,326 - mmcls - INFO - Epoch(val) [144][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:55:38,097 - mmcls - INFO - Epoch(val) [145][3]	accuracy_top-1: 75.7353, accuracy_top-5: 100.0000
2024-04-04 18:55:48,414 - mmcls - INFO - Epoch(val) [146][3]	accuracy_top-1: 76.4706, accuracy_top-5: 99.2647
2024-04-04 18:55:59,194 - mmcls - INFO - Epoch(val) [147][3]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 18:56:09,817 - mmcls - INFO - Epoch(val) [148][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:56:20,590 - mmcls - INFO - Epoch(val) [149][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:56:31,090 - mmcls - INFO - Epoch(val) [150][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 18:56:41,661 - mmcls - INFO - Epoch(val) [151][3]	accuracy_top-1: 74.2647, accuracy_top-5: 98.5294
2024-04-04 18:56:52,189 - mmcls - INFO - Epoch(val) [152][3]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
2024-04-04 18:57:03,240 - mmcls - INFO - Epoch(val) [153][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:57:14,022 - mmcls - INFO - Epoch(val) [154][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:57:25,090 - mmcls - INFO - Epoch(val) [155][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:57:36,533 - mmcls - INFO - Epoch(val) [156][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:57:46,922 - mmcls - INFO - Epoch(val) [157][3]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 18:57:57,171 - mmcls - INFO - Epoch(val) [158][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:58:08,358 - mmcls - INFO - Epoch(val) [159][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:58:20,600 - mmcls - INFO - Epoch(val) [160][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:58:31,129 - mmcls - INFO - Epoch(val) [161][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:58:42,108 - mmcls - INFO - Epoch(val) [162][3]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
2024-04-04 18:58:52,661 - mmcls - INFO - Epoch(val) [163][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:59:05,154 - mmcls - INFO - Epoch(val) [164][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 18:59:15,737 - mmcls - INFO - Epoch(val) [165][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:59:26,328 - mmcls - INFO - Epoch(val) [166][3]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 18:59:36,868 - mmcls - INFO - Epoch(val) [167][3]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 18:59:48,083 - mmcls - INFO - Epoch(val) [168][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 18:59:58,970 - mmcls - INFO - Epoch(val) [169][3]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
2024-04-04 19:00:09,671 - mmcls - INFO - Epoch(val) [170][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:00:20,334 - mmcls - INFO - Epoch(val) [171][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 19:00:30,932 - mmcls - INFO - Epoch(val) [172][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 19:00:41,545 - mmcls - INFO - Epoch(val) [173][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 19:00:52,223 - mmcls - INFO - Epoch(val) [174][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 19:01:02,700 - mmcls - INFO - Epoch(val) [175][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:01:13,225 - mmcls - INFO - Epoch(val) [176][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:01:23,688 - mmcls - INFO - Epoch(val) [177][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:01:34,088 - mmcls - INFO - Epoch(val) [178][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:01:44,831 - mmcls - INFO - Epoch(val) [179][3]	accuracy_top-1: 77.9412, accuracy_top-5: 98.5294
2024-04-04 19:01:55,796 - mmcls - INFO - Epoch(val) [180][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 19:02:09,840 - mmcls - INFO - Epoch(val) [181][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 19:02:20,389 - mmcls - INFO - Epoch(val) [182][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:02:30,839 - mmcls - INFO - Epoch(val) [183][3]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 19:02:41,849 - mmcls - INFO - Epoch(val) [184][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:02:52,277 - mmcls - INFO - Epoch(val) [185][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 19:03:03,236 - mmcls - INFO - Epoch(val) [186][3]	accuracy_top-1: 78.6765, accuracy_top-5: 98.5294
2024-04-04 19:03:13,627 - mmcls - INFO - Epoch(val) [187][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:03:24,690 - mmcls - INFO - Epoch(val) [188][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:03:35,395 - mmcls - INFO - Epoch(val) [189][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:03:45,980 - mmcls - INFO - Epoch(val) [190][3]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
2024-04-04 19:03:56,584 - mmcls - INFO - Epoch(val) [191][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:04:07,475 - mmcls - INFO - Epoch(val) [192][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 19:04:19,847 - mmcls - INFO - Epoch(val) [193][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:04:32,034 - mmcls - INFO - Epoch(val) [194][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:04:43,171 - mmcls - INFO - Epoch(val) [195][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:04:53,906 - mmcls - INFO - Epoch(val) [196][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:05:04,387 - mmcls - INFO - Epoch(val) [197][3]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 19:05:18,857 - mmcls - INFO - Epoch(val) [198][3]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 19:05:30,712 - mmcls - INFO - Epoch(val) [199][3]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 19:05:39,895 - mmcls - INFO - Saving checkpoint at 200 epochs
2024-04-04 19:05:42,125 - mmcls - INFO - Epoch(val) [200][3]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
