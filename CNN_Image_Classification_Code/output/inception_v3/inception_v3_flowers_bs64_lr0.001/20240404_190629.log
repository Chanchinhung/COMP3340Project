2024-04-04 19:06:29,653 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: n/a
MMCV CUDA Compiler: n/a
MMClassification: 0.15.0+96ebba7
------------------------------------------------------------

2024-04-04 19:06:29,655 - mmcls - INFO - Distributed training: False
2024-04-04 19:06:29,857 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='InceptionV3', num_classes=17, aux_logits=False),
    neck=None,
    head=dict(
        type='ClsHead', loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=64,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/test',
        ann_file='data/flowers/meta/test.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=200)
checkpoint_config = dict(interval=100)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/inception_v3/inception_v3_flowers_bs64_lr0.001'
gpu_ids = range(0, 1)

2024-04-04 19:06:30,182 - mmcls - INFO - initialize InceptionV3 with init_cfg [{'type': 'TruncNormal', 'layer': ['Conv2d', 'Linear'], 'std': 0.1}, {'type': 'Constant', 'layer': 'BatchNorm2d', 'val': 1}]
Name of parameter - Initialization information

backbone.Conv2d_1a_3x3.conv.weight - torch.Size([32, 3, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_1a_3x3.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_1a_3x3.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_2a_3x3.conv.weight - torch.Size([32, 32, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_2a_3x3.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_2a_3x3.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_2b_3x3.conv.weight - torch.Size([64, 32, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_2b_3x3.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_2b_3x3.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_3b_1x1.conv.weight - torch.Size([80, 64, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_3b_1x1.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_3b_1x1.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_4a_3x3.conv.weight - torch.Size([192, 80, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_4a_3x3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_4a_3x3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch1x1.conv.weight - torch.Size([64, 192, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch5x5_1.conv.weight - torch.Size([48, 192, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch5x5_1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch5x5_1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch5x5_2.conv.weight - torch.Size([64, 48, 5, 5]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch5x5_2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch5x5_2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_1.conv.weight - torch.Size([64, 192, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch3x3dbl_1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_2.conv.weight - torch.Size([96, 64, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch3x3dbl_2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_3.conv.weight - torch.Size([96, 96, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch3x3dbl_3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch_pool.conv.weight - torch.Size([32, 192, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch_pool.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch_pool.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch1x1.conv.weight - torch.Size([64, 256, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch5x5_1.conv.weight - torch.Size([48, 256, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch5x5_1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch5x5_1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch5x5_2.conv.weight - torch.Size([64, 48, 5, 5]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch5x5_2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch5x5_2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_1.conv.weight - torch.Size([64, 256, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch3x3dbl_1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_2.conv.weight - torch.Size([96, 64, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch3x3dbl_2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_3.conv.weight - torch.Size([96, 96, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch3x3dbl_3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch_pool.conv.weight - torch.Size([64, 256, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch_pool.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch_pool.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch1x1.conv.weight - torch.Size([64, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch5x5_1.conv.weight - torch.Size([48, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch5x5_1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch5x5_1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch5x5_2.conv.weight - torch.Size([64, 48, 5, 5]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch5x5_2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch5x5_2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_1.conv.weight - torch.Size([64, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch3x3dbl_1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_2.conv.weight - torch.Size([96, 64, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch3x3dbl_2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_3.conv.weight - torch.Size([96, 96, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch3x3dbl_3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch_pool.conv.weight - torch.Size([64, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch_pool.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch_pool.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3.conv.weight - torch.Size([384, 288, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6a.branch3x3.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_1.conv.weight - torch.Size([64, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6a.branch3x3dbl_1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_2.conv.weight - torch.Size([96, 64, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6a.branch3x3dbl_2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_3.conv.weight - torch.Size([96, 96, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6a.branch3x3dbl_3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch1x1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch1x1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch1x1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_1.conv.weight - torch.Size([128, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7_1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_2.conv.weight - torch.Size([128, 128, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7_2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_3.conv.weight - torch.Size([192, 128, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_1.conv.weight - torch.Size([128, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_2.conv.weight - torch.Size([128, 128, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_3.conv.weight - torch.Size([128, 128, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_4.conv.weight - torch.Size([128, 128, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_4.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_4.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_5.conv.weight - torch.Size([192, 128, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_5.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_5.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch_pool.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch1x1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch1x1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch1x1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_1.conv.weight - torch.Size([160, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7_1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_2.conv.weight - torch.Size([160, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7_2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_3.conv.weight - torch.Size([192, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_1.conv.weight - torch.Size([160, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_2.conv.weight - torch.Size([160, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_3.conv.weight - torch.Size([160, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_3.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_3.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_4.conv.weight - torch.Size([160, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_4.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_4.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_5.conv.weight - torch.Size([192, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_5.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_5.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch_pool.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch1x1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch1x1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch1x1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_1.conv.weight - torch.Size([160, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7_1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_2.conv.weight - torch.Size([160, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7_2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_3.conv.weight - torch.Size([192, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_1.conv.weight - torch.Size([160, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_2.conv.weight - torch.Size([160, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_3.conv.weight - torch.Size([160, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_3.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_3.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_4.conv.weight - torch.Size([160, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_4.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_4.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_5.conv.weight - torch.Size([192, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_5.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_5.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch_pool.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch1x1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch1x1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch1x1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7_1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_2.conv.weight - torch.Size([192, 192, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7_2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_3.conv.weight - torch.Size([192, 192, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_2.conv.weight - torch.Size([192, 192, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_3.conv.weight - torch.Size([192, 192, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_4.conv.weight - torch.Size([192, 192, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_4.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_4.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_5.conv.weight - torch.Size([192, 192, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_5.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_5.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch_pool.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch3x3_1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch3x3_1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch3x3_1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch3x3_2.conv.weight - torch.Size([320, 192, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch3x3_2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch3x3_2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch7x7x3_1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_2.conv.weight - torch.Size([192, 192, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch7x7x3_2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_3.conv.weight - torch.Size([192, 192, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch7x7x3_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_4.conv.weight - torch.Size([192, 192, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch7x7x3_4.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_4.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch1x1.conv.weight - torch.Size([320, 1280, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch1x1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch1x1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_1.conv.weight - torch.Size([384, 1280, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3_1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_2a.conv.weight - torch.Size([384, 384, 1, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3_2a.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_2a.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_2b.conv.weight - torch.Size([384, 384, 3, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3_2b.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_2b.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_1.conv.weight - torch.Size([448, 1280, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3dbl_1.bn.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_1.bn.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_2.conv.weight - torch.Size([384, 448, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3dbl_2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_3a.conv.weight - torch.Size([384, 384, 1, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3dbl_3a.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_3a.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_3b.conv.weight - torch.Size([384, 384, 3, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3dbl_3b.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_3b.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch_pool.conv.weight - torch.Size([192, 1280, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch1x1.conv.weight - torch.Size([320, 2048, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch1x1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch1x1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_1.conv.weight - torch.Size([384, 2048, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3_1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_2a.conv.weight - torch.Size([384, 384, 1, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3_2a.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_2a.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_2b.conv.weight - torch.Size([384, 384, 3, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3_2b.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_2b.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_1.conv.weight - torch.Size([448, 2048, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3dbl_1.bn.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_1.bn.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_2.conv.weight - torch.Size([384, 448, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3dbl_2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_3a.conv.weight - torch.Size([384, 384, 1, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3dbl_3a.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_3a.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_3b.conv.weight - torch.Size([384, 384, 3, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3dbl_3b.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_3b.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch_pool.conv.weight - torch.Size([192, 2048, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.fc.weight - torch.Size([17, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.fc.bias - torch.Size([17]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 
2024-04-04 19:06:34,004 - mmcls - INFO - Start running, host: ambr0se@gpu2-comp-115, work_dir: /userhome/cs2/ambr0se/COMP3340Project/CNN_Image_Classification_Code/output/inception_v3/inception_v3_flowers_bs64_lr0.001
2024-04-04 19:06:34,005 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-04-04 19:06:34,005 - mmcls - INFO - workflow: [('train', 1)], max: 200 epochs
2024-04-04 19:06:34,005 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/ambr0se/COMP3340Project/CNN_Image_Classification_Code/output/inception_v3/inception_v3_flowers_bs64_lr0.001 by HardDiskBackend.
2024-04-04 19:06:44,628 - mmcls - INFO - Epoch(val) [1][3]	accuracy_top-1: 4.4118, accuracy_top-5: 12.5000
2024-04-04 19:06:55,048 - mmcls - INFO - Epoch(val) [2][3]	accuracy_top-1: 7.3529, accuracy_top-5: 22.7941
2024-04-04 19:07:05,630 - mmcls - INFO - Epoch(val) [3][3]	accuracy_top-1: 10.2941, accuracy_top-5: 44.1176
2024-04-04 19:07:17,115 - mmcls - INFO - Epoch(val) [4][3]	accuracy_top-1: 16.1765, accuracy_top-5: 58.8235
2024-04-04 19:07:27,506 - mmcls - INFO - Epoch(val) [5][3]	accuracy_top-1: 19.8529, accuracy_top-5: 56.6176
2024-04-04 19:07:37,995 - mmcls - INFO - Epoch(val) [6][3]	accuracy_top-1: 25.0000, accuracy_top-5: 67.6471
2024-04-04 19:07:48,564 - mmcls - INFO - Epoch(val) [7][3]	accuracy_top-1: 31.6176, accuracy_top-5: 72.0588
2024-04-04 19:08:02,277 - mmcls - INFO - Epoch(val) [8][3]	accuracy_top-1: 30.1471, accuracy_top-5: 72.0588
2024-04-04 19:08:12,956 - mmcls - INFO - Epoch(val) [9][3]	accuracy_top-1: 25.7353, accuracy_top-5: 76.4706
2024-04-04 19:08:23,452 - mmcls - INFO - Epoch(val) [10][3]	accuracy_top-1: 27.9412, accuracy_top-5: 83.0882
2024-04-04 19:08:34,109 - mmcls - INFO - Epoch(val) [11][3]	accuracy_top-1: 27.9412, accuracy_top-5: 77.2059
2024-04-04 19:08:44,421 - mmcls - INFO - Epoch(val) [12][3]	accuracy_top-1: 30.1471, accuracy_top-5: 80.8824
2024-04-04 19:08:55,136 - mmcls - INFO - Epoch(val) [13][3]	accuracy_top-1: 34.5588, accuracy_top-5: 78.6765
2024-04-04 19:09:05,721 - mmcls - INFO - Epoch(val) [14][3]	accuracy_top-1: 30.1471, accuracy_top-5: 77.2059
2024-04-04 19:09:16,042 - mmcls - INFO - Epoch(val) [15][3]	accuracy_top-1: 33.0882, accuracy_top-5: 76.4706
2024-04-04 19:09:27,641 - mmcls - INFO - Epoch(val) [16][3]	accuracy_top-1: 36.7647, accuracy_top-5: 79.4118
2024-04-04 19:09:38,395 - mmcls - INFO - Epoch(val) [17][3]	accuracy_top-1: 33.0882, accuracy_top-5: 77.2059
2024-04-04 19:09:49,283 - mmcls - INFO - Epoch(val) [18][3]	accuracy_top-1: 29.4118, accuracy_top-5: 80.8824
2024-04-04 19:10:00,253 - mmcls - INFO - Epoch(val) [19][3]	accuracy_top-1: 32.3529, accuracy_top-5: 79.4118
2024-04-04 19:10:10,970 - mmcls - INFO - Epoch(val) [20][3]	accuracy_top-1: 38.9706, accuracy_top-5: 79.4118
2024-04-04 19:10:21,821 - mmcls - INFO - Epoch(val) [21][3]	accuracy_top-1: 36.7647, accuracy_top-5: 80.8824
2024-04-04 19:10:33,584 - mmcls - INFO - Epoch(val) [22][3]	accuracy_top-1: 41.1765, accuracy_top-5: 82.3529
2024-04-04 19:10:44,451 - mmcls - INFO - Epoch(val) [23][3]	accuracy_top-1: 48.5294, accuracy_top-5: 82.3529
2024-04-04 19:10:55,573 - mmcls - INFO - Epoch(val) [24][3]	accuracy_top-1: 44.1176, accuracy_top-5: 80.8824
2024-04-04 19:11:06,625 - mmcls - INFO - Epoch(val) [25][3]	accuracy_top-1: 45.5882, accuracy_top-5: 86.0294
2024-04-04 19:11:17,353 - mmcls - INFO - Epoch(val) [26][3]	accuracy_top-1: 43.3824, accuracy_top-5: 83.0882
2024-04-04 19:11:28,351 - mmcls - INFO - Epoch(val) [27][3]	accuracy_top-1: 44.8529, accuracy_top-5: 80.1471
2024-04-04 19:11:39,219 - mmcls - INFO - Epoch(val) [28][3]	accuracy_top-1: 41.9118, accuracy_top-5: 82.3529
2024-04-04 19:11:50,420 - mmcls - INFO - Epoch(val) [29][3]	accuracy_top-1: 40.4412, accuracy_top-5: 83.8235
2024-04-04 19:12:01,140 - mmcls - INFO - Epoch(val) [30][3]	accuracy_top-1: 46.3235, accuracy_top-5: 84.5588
2024-04-04 19:12:12,718 - mmcls - INFO - Epoch(val) [31][3]	accuracy_top-1: 50.0000, accuracy_top-5: 86.0294
2024-04-04 19:12:24,403 - mmcls - INFO - Epoch(val) [32][3]	accuracy_top-1: 48.5294, accuracy_top-5: 85.2941
2024-04-04 19:12:35,365 - mmcls - INFO - Epoch(val) [33][3]	accuracy_top-1: 55.1471, accuracy_top-5: 86.7647
2024-04-04 19:12:46,610 - mmcls - INFO - Epoch(val) [34][3]	accuracy_top-1: 50.0000, accuracy_top-5: 88.2353
2024-04-04 19:12:57,175 - mmcls - INFO - Epoch(val) [35][3]	accuracy_top-1: 47.7941, accuracy_top-5: 88.9706
2024-04-04 19:13:07,828 - mmcls - INFO - Epoch(val) [36][3]	accuracy_top-1: 49.2647, accuracy_top-5: 86.0294
2024-04-04 19:13:19,076 - mmcls - INFO - Epoch(val) [37][3]	accuracy_top-1: 51.4706, accuracy_top-5: 87.5000
2024-04-04 19:13:31,419 - mmcls - INFO - Epoch(val) [38][3]	accuracy_top-1: 50.0000, accuracy_top-5: 85.2941
2024-04-04 19:13:42,697 - mmcls - INFO - Epoch(val) [39][3]	accuracy_top-1: 50.0000, accuracy_top-5: 88.2353
2024-04-04 19:13:53,617 - mmcls - INFO - Epoch(val) [40][3]	accuracy_top-1: 54.4118, accuracy_top-5: 86.7647
2024-04-04 19:14:04,205 - mmcls - INFO - Epoch(val) [41][3]	accuracy_top-1: 50.0000, accuracy_top-5: 87.5000
2024-04-04 19:14:15,104 - mmcls - INFO - Epoch(val) [42][3]	accuracy_top-1: 50.0000, accuracy_top-5: 86.0294
2024-04-04 19:14:25,709 - mmcls - INFO - Epoch(val) [43][3]	accuracy_top-1: 49.2647, accuracy_top-5: 86.0294
2024-04-04 19:14:36,539 - mmcls - INFO - Epoch(val) [44][3]	accuracy_top-1: 50.7353, accuracy_top-5: 84.5588
2024-04-04 19:14:49,648 - mmcls - INFO - Epoch(val) [45][3]	accuracy_top-1: 51.4706, accuracy_top-5: 86.0294
2024-04-04 19:15:00,626 - mmcls - INFO - Epoch(val) [46][3]	accuracy_top-1: 52.9412, accuracy_top-5: 87.5000
2024-04-04 19:15:11,518 - mmcls - INFO - Epoch(val) [47][3]	accuracy_top-1: 53.6765, accuracy_top-5: 85.2941
2024-04-04 19:15:22,396 - mmcls - INFO - Epoch(val) [48][3]	accuracy_top-1: 48.5294, accuracy_top-5: 86.0294
2024-04-04 19:15:33,137 - mmcls - INFO - Epoch(val) [49][3]	accuracy_top-1: 53.6765, accuracy_top-5: 87.5000
2024-04-04 19:15:44,202 - mmcls - INFO - Epoch(val) [50][3]	accuracy_top-1: 54.4118, accuracy_top-5: 85.2941
2024-04-04 19:15:54,600 - mmcls - INFO - Epoch(val) [51][3]	accuracy_top-1: 51.4706, accuracy_top-5: 86.7647
2024-04-04 19:16:05,820 - mmcls - INFO - Epoch(val) [52][3]	accuracy_top-1: 54.4118, accuracy_top-5: 86.7647
2024-04-04 19:16:17,767 - mmcls - INFO - Epoch(val) [53][3]	accuracy_top-1: 51.4706, accuracy_top-5: 87.5000
2024-04-04 19:16:28,629 - mmcls - INFO - Epoch(val) [54][3]	accuracy_top-1: 54.4118, accuracy_top-5: 88.9706
2024-04-04 19:16:39,561 - mmcls - INFO - Epoch(val) [55][3]	accuracy_top-1: 53.6765, accuracy_top-5: 88.2353
2024-04-04 19:16:52,129 - mmcls - INFO - Epoch(val) [56][3]	accuracy_top-1: 55.1471, accuracy_top-5: 87.5000
2024-04-04 19:17:02,646 - mmcls - INFO - Epoch(val) [57][3]	accuracy_top-1: 51.4706, accuracy_top-5: 88.2353
2024-04-04 19:17:13,161 - mmcls - INFO - Epoch(val) [58][3]	accuracy_top-1: 51.4706, accuracy_top-5: 86.7647
2024-04-04 19:17:23,763 - mmcls - INFO - Epoch(val) [59][3]	accuracy_top-1: 52.2059, accuracy_top-5: 88.2353
2024-04-04 19:17:35,858 - mmcls - INFO - Epoch(val) [60][3]	accuracy_top-1: 52.9412, accuracy_top-5: 90.4412
2024-04-04 19:17:46,561 - mmcls - INFO - Epoch(val) [61][3]	accuracy_top-1: 52.2059, accuracy_top-5: 88.2353
2024-04-04 19:17:57,579 - mmcls - INFO - Epoch(val) [62][3]	accuracy_top-1: 57.3529, accuracy_top-5: 88.2353
2024-04-04 19:18:08,134 - mmcls - INFO - Epoch(val) [63][3]	accuracy_top-1: 55.8824, accuracy_top-5: 90.4412
2024-04-04 19:18:18,956 - mmcls - INFO - Epoch(val) [64][3]	accuracy_top-1: 52.9412, accuracy_top-5: 88.9706
2024-04-04 19:18:29,625 - mmcls - INFO - Epoch(val) [65][3]	accuracy_top-1: 50.7353, accuracy_top-5: 89.7059
2024-04-04 19:18:40,862 - mmcls - INFO - Epoch(val) [66][3]	accuracy_top-1: 58.8235, accuracy_top-5: 88.9706
2024-04-04 19:18:51,472 - mmcls - INFO - Epoch(val) [67][3]	accuracy_top-1: 63.9706, accuracy_top-5: 90.4412
2024-04-04 19:19:02,813 - mmcls - INFO - Epoch(val) [68][3]	accuracy_top-1: 61.0294, accuracy_top-5: 88.9706
2024-04-04 19:19:13,714 - mmcls - INFO - Epoch(val) [69][3]	accuracy_top-1: 57.3529, accuracy_top-5: 89.7059
2024-04-04 19:19:24,789 - mmcls - INFO - Epoch(val) [70][3]	accuracy_top-1: 53.6765, accuracy_top-5: 90.4412
2024-04-04 19:19:35,601 - mmcls - INFO - Epoch(val) [71][3]	accuracy_top-1: 61.0294, accuracy_top-5: 90.4412
2024-04-04 19:19:46,128 - mmcls - INFO - Epoch(val) [72][3]	accuracy_top-1: 58.0882, accuracy_top-5: 89.7059
2024-04-04 19:19:57,184 - mmcls - INFO - Epoch(val) [73][3]	accuracy_top-1: 60.2941, accuracy_top-5: 90.4412
2024-04-04 19:20:07,637 - mmcls - INFO - Epoch(val) [74][3]	accuracy_top-1: 56.6176, accuracy_top-5: 91.9118
2024-04-04 19:20:18,260 - mmcls - INFO - Epoch(val) [75][3]	accuracy_top-1: 58.0882, accuracy_top-5: 92.6471
2024-04-04 19:20:31,737 - mmcls - INFO - Epoch(val) [76][3]	accuracy_top-1: 58.0882, accuracy_top-5: 91.1765
2024-04-04 19:20:43,501 - mmcls - INFO - Epoch(val) [77][3]	accuracy_top-1: 58.8235, accuracy_top-5: 91.9118
2024-04-04 19:20:56,145 - mmcls - INFO - Epoch(val) [78][3]	accuracy_top-1: 61.0294, accuracy_top-5: 91.9118
2024-04-04 19:21:06,790 - mmcls - INFO - Epoch(val) [79][3]	accuracy_top-1: 58.8235, accuracy_top-5: 91.1765
2024-04-04 19:21:17,206 - mmcls - INFO - Epoch(val) [80][3]	accuracy_top-1: 63.2353, accuracy_top-5: 89.7059
2024-04-04 19:21:28,085 - mmcls - INFO - Epoch(val) [81][3]	accuracy_top-1: 62.5000, accuracy_top-5: 90.4412
2024-04-04 19:21:38,730 - mmcls - INFO - Epoch(val) [82][3]	accuracy_top-1: 58.8235, accuracy_top-5: 92.6471
2024-04-04 19:21:49,626 - mmcls - INFO - Epoch(val) [83][3]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-04 19:22:00,323 - mmcls - INFO - Epoch(val) [84][3]	accuracy_top-1: 63.9706, accuracy_top-5: 91.9118
2024-04-04 19:22:10,865 - mmcls - INFO - Epoch(val) [85][3]	accuracy_top-1: 61.7647, accuracy_top-5: 92.6471
2024-04-04 19:22:21,897 - mmcls - INFO - Epoch(val) [86][3]	accuracy_top-1: 62.5000, accuracy_top-5: 90.4412
2024-04-04 19:22:32,577 - mmcls - INFO - Epoch(val) [87][3]	accuracy_top-1: 61.7647, accuracy_top-5: 89.7059
2024-04-04 19:22:43,673 - mmcls - INFO - Epoch(val) [88][3]	accuracy_top-1: 58.0882, accuracy_top-5: 91.9118
2024-04-04 19:22:54,509 - mmcls - INFO - Epoch(val) [89][3]	accuracy_top-1: 60.2941, accuracy_top-5: 91.1765
2024-04-04 19:23:05,419 - mmcls - INFO - Epoch(val) [90][3]	accuracy_top-1: 63.2353, accuracy_top-5: 90.4412
2024-04-04 19:23:16,313 - mmcls - INFO - Epoch(val) [91][3]	accuracy_top-1: 62.5000, accuracy_top-5: 91.9118
2024-04-04 19:23:26,889 - mmcls - INFO - Epoch(val) [92][3]	accuracy_top-1: 66.1765, accuracy_top-5: 92.6471
2024-04-04 19:23:38,430 - mmcls - INFO - Epoch(val) [93][3]	accuracy_top-1: 65.4412, accuracy_top-5: 91.9118
2024-04-04 19:23:49,012 - mmcls - INFO - Epoch(val) [94][3]	accuracy_top-1: 65.4412, accuracy_top-5: 90.4412
2024-04-04 19:23:59,963 - mmcls - INFO - Epoch(val) [95][3]	accuracy_top-1: 63.9706, accuracy_top-5: 91.1765
2024-04-04 19:24:10,485 - mmcls - INFO - Epoch(val) [96][3]	accuracy_top-1: 65.4412, accuracy_top-5: 91.9118
2024-04-04 19:24:21,139 - mmcls - INFO - Epoch(val) [97][3]	accuracy_top-1: 66.1765, accuracy_top-5: 90.4412
2024-04-04 19:24:32,250 - mmcls - INFO - Epoch(val) [98][3]	accuracy_top-1: 66.9118, accuracy_top-5: 90.4412
2024-04-04 19:24:42,924 - mmcls - INFO - Epoch(val) [99][3]	accuracy_top-1: 66.1765, accuracy_top-5: 92.6471
2024-04-04 19:24:52,963 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-04-04 19:24:55,435 - mmcls - INFO - Epoch(val) [100][3]	accuracy_top-1: 64.7059, accuracy_top-5: 91.1765
2024-04-04 19:25:06,154 - mmcls - INFO - Epoch(val) [101][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.1765
2024-04-04 19:25:16,457 - mmcls - INFO - Epoch(val) [102][3]	accuracy_top-1: 66.1765, accuracy_top-5: 90.4412
2024-04-04 19:25:27,225 - mmcls - INFO - Epoch(val) [103][3]	accuracy_top-1: 66.1765, accuracy_top-5: 90.4412
2024-04-04 19:25:37,754 - mmcls - INFO - Epoch(val) [104][3]	accuracy_top-1: 67.6471, accuracy_top-5: 91.9118
2024-04-04 19:25:49,396 - mmcls - INFO - Epoch(val) [105][3]	accuracy_top-1: 66.9118, accuracy_top-5: 91.1765
2024-04-04 19:26:00,289 - mmcls - INFO - Epoch(val) [106][3]	accuracy_top-1: 67.6471, accuracy_top-5: 90.4412
2024-04-04 19:26:10,975 - mmcls - INFO - Epoch(val) [107][3]	accuracy_top-1: 66.1765, accuracy_top-5: 90.4412
2024-04-04 19:26:21,545 - mmcls - INFO - Epoch(val) [108][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.1765
2024-04-04 19:26:32,932 - mmcls - INFO - Epoch(val) [109][3]	accuracy_top-1: 65.4412, accuracy_top-5: 89.7059
2024-04-04 19:26:44,148 - mmcls - INFO - Epoch(val) [110][3]	accuracy_top-1: 66.9118, accuracy_top-5: 91.9118
2024-04-04 19:26:55,004 - mmcls - INFO - Epoch(val) [111][3]	accuracy_top-1: 66.9118, accuracy_top-5: 91.9118
2024-04-04 19:27:05,748 - mmcls - INFO - Epoch(val) [112][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.1765
2024-04-04 19:27:16,292 - mmcls - INFO - Epoch(val) [113][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.1765
2024-04-04 19:27:27,856 - mmcls - INFO - Epoch(val) [114][3]	accuracy_top-1: 68.3824, accuracy_top-5: 91.9118
2024-04-04 19:27:39,130 - mmcls - INFO - Epoch(val) [115][3]	accuracy_top-1: 66.9118, accuracy_top-5: 89.7059
2024-04-04 19:27:49,689 - mmcls - INFO - Epoch(val) [116][3]	accuracy_top-1: 66.9118, accuracy_top-5: 90.4412
2024-04-04 19:28:00,740 - mmcls - INFO - Epoch(val) [117][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.1765
2024-04-04 19:28:11,225 - mmcls - INFO - Epoch(val) [118][3]	accuracy_top-1: 65.4412, accuracy_top-5: 92.6471
2024-04-04 19:28:21,875 - mmcls - INFO - Epoch(val) [119][3]	accuracy_top-1: 66.1765, accuracy_top-5: 92.6471
2024-04-04 19:28:32,920 - mmcls - INFO - Epoch(val) [120][3]	accuracy_top-1: 66.9118, accuracy_top-5: 91.9118
2024-04-04 19:28:45,210 - mmcls - INFO - Epoch(val) [121][3]	accuracy_top-1: 65.4412, accuracy_top-5: 92.6471
2024-04-04 19:28:56,142 - mmcls - INFO - Epoch(val) [122][3]	accuracy_top-1: 65.4412, accuracy_top-5: 91.1765
2024-04-04 19:29:06,983 - mmcls - INFO - Epoch(val) [123][3]	accuracy_top-1: 66.9118, accuracy_top-5: 91.9118
2024-04-04 19:29:17,581 - mmcls - INFO - Epoch(val) [124][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.1765
2024-04-04 19:29:28,255 - mmcls - INFO - Epoch(val) [125][3]	accuracy_top-1: 66.9118, accuracy_top-5: 92.6471
2024-04-04 19:29:39,104 - mmcls - INFO - Epoch(val) [126][3]	accuracy_top-1: 66.9118, accuracy_top-5: 91.1765
2024-04-04 19:29:49,787 - mmcls - INFO - Epoch(val) [127][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.1765
2024-04-04 19:30:01,051 - mmcls - INFO - Epoch(val) [128][3]	accuracy_top-1: 67.6471, accuracy_top-5: 90.4412
2024-04-04 19:30:11,723 - mmcls - INFO - Epoch(val) [129][3]	accuracy_top-1: 65.4412, accuracy_top-5: 91.1765
2024-04-04 19:30:22,310 - mmcls - INFO - Epoch(val) [130][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.1765
2024-04-04 19:30:32,855 - mmcls - INFO - Epoch(val) [131][3]	accuracy_top-1: 66.9118, accuracy_top-5: 91.9118
2024-04-04 19:30:43,384 - mmcls - INFO - Epoch(val) [132][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.1765
2024-04-04 19:30:56,554 - mmcls - INFO - Epoch(val) [133][3]	accuracy_top-1: 66.1765, accuracy_top-5: 90.4412
2024-04-04 19:31:07,941 - mmcls - INFO - Epoch(val) [134][3]	accuracy_top-1: 67.6471, accuracy_top-5: 91.1765
2024-04-04 19:31:19,259 - mmcls - INFO - Epoch(val) [135][3]	accuracy_top-1: 66.1765, accuracy_top-5: 88.9706
2024-04-04 19:31:29,615 - mmcls - INFO - Epoch(val) [136][3]	accuracy_top-1: 67.6471, accuracy_top-5: 91.1765
2024-04-04 19:31:40,352 - mmcls - INFO - Epoch(val) [137][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.9118
2024-04-04 19:31:50,818 - mmcls - INFO - Epoch(val) [138][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.1765
2024-04-04 19:32:01,331 - mmcls - INFO - Epoch(val) [139][3]	accuracy_top-1: 66.1765, accuracy_top-5: 90.4412
2024-04-04 19:32:12,529 - mmcls - INFO - Epoch(val) [140][3]	accuracy_top-1: 66.9118, accuracy_top-5: 89.7059
2024-04-04 19:32:22,503 - mmcls - INFO - Epoch(val) [141][3]	accuracy_top-1: 66.9118, accuracy_top-5: 90.4412
2024-04-04 19:32:32,706 - mmcls - INFO - Epoch(val) [142][3]	accuracy_top-1: 66.1765, accuracy_top-5: 90.4412
2024-04-04 19:32:43,522 - mmcls - INFO - Epoch(val) [143][3]	accuracy_top-1: 65.4412, accuracy_top-5: 91.9118
2024-04-04 19:32:54,194 - mmcls - INFO - Epoch(val) [144][3]	accuracy_top-1: 65.4412, accuracy_top-5: 93.3824
2024-04-04 19:33:05,433 - mmcls - INFO - Epoch(val) [145][3]	accuracy_top-1: 63.9706, accuracy_top-5: 92.6471
2024-04-04 19:33:18,230 - mmcls - INFO - Epoch(val) [146][3]	accuracy_top-1: 67.6471, accuracy_top-5: 92.6471
2024-04-04 19:33:28,722 - mmcls - INFO - Epoch(val) [147][3]	accuracy_top-1: 64.7059, accuracy_top-5: 91.1765
2024-04-04 19:33:39,386 - mmcls - INFO - Epoch(val) [148][3]	accuracy_top-1: 66.9118, accuracy_top-5: 92.6471
2024-04-04 19:33:50,083 - mmcls - INFO - Epoch(val) [149][3]	accuracy_top-1: 63.9706, accuracy_top-5: 90.4412
2024-04-04 19:34:00,563 - mmcls - INFO - Epoch(val) [150][3]	accuracy_top-1: 67.6471, accuracy_top-5: 93.3824
2024-04-04 19:34:11,318 - mmcls - INFO - Epoch(val) [151][3]	accuracy_top-1: 67.6471, accuracy_top-5: 91.9118
2024-04-04 19:34:21,944 - mmcls - INFO - Epoch(val) [152][3]	accuracy_top-1: 63.9706, accuracy_top-5: 90.4412
2024-04-04 19:34:32,708 - mmcls - INFO - Epoch(val) [153][3]	accuracy_top-1: 66.9118, accuracy_top-5: 91.9118
2024-04-04 19:34:43,149 - mmcls - INFO - Epoch(val) [154][3]	accuracy_top-1: 64.7059, accuracy_top-5: 91.1765
2024-04-04 19:34:54,080 - mmcls - INFO - Epoch(val) [155][3]	accuracy_top-1: 65.4412, accuracy_top-5: 91.1765
2024-04-04 19:35:04,819 - mmcls - INFO - Epoch(val) [156][3]	accuracy_top-1: 66.1765, accuracy_top-5: 92.6471
2024-04-04 19:35:15,721 - mmcls - INFO - Epoch(val) [157][3]	accuracy_top-1: 65.4412, accuracy_top-5: 90.4412
2024-04-04 19:35:26,648 - mmcls - INFO - Epoch(val) [158][3]	accuracy_top-1: 67.6471, accuracy_top-5: 92.6471
2024-04-04 19:35:37,147 - mmcls - INFO - Epoch(val) [159][3]	accuracy_top-1: 65.4412, accuracy_top-5: 91.1765
2024-04-04 19:35:47,790 - mmcls - INFO - Epoch(val) [160][3]	accuracy_top-1: 65.4412, accuracy_top-5: 91.1765
2024-04-04 19:35:58,651 - mmcls - INFO - Epoch(val) [161][3]	accuracy_top-1: 62.5000, accuracy_top-5: 91.1765
2024-04-04 19:36:09,475 - mmcls - INFO - Epoch(val) [162][3]	accuracy_top-1: 63.9706, accuracy_top-5: 91.1765
2024-04-04 19:36:20,541 - mmcls - INFO - Epoch(val) [163][3]	accuracy_top-1: 63.2353, accuracy_top-5: 91.1765
2024-04-04 19:36:31,187 - mmcls - INFO - Epoch(val) [164][3]	accuracy_top-1: 65.4412, accuracy_top-5: 92.6471
2024-04-04 19:36:42,595 - mmcls - INFO - Epoch(val) [165][3]	accuracy_top-1: 66.9118, accuracy_top-5: 91.1765
2024-04-04 19:36:55,598 - mmcls - INFO - Epoch(val) [166][3]	accuracy_top-1: 63.9706, accuracy_top-5: 90.4412
2024-04-04 19:37:06,156 - mmcls - INFO - Epoch(val) [167][3]	accuracy_top-1: 64.7059, accuracy_top-5: 90.4412
2024-04-04 19:37:18,780 - mmcls - INFO - Epoch(val) [168][3]	accuracy_top-1: 65.4412, accuracy_top-5: 91.9118
2024-04-04 19:37:29,168 - mmcls - INFO - Epoch(val) [169][3]	accuracy_top-1: 64.7059, accuracy_top-5: 89.7059
2024-04-04 19:37:39,355 - mmcls - INFO - Epoch(val) [170][3]	accuracy_top-1: 63.9706, accuracy_top-5: 89.7059
2024-04-04 19:37:49,785 - mmcls - INFO - Epoch(val) [171][3]	accuracy_top-1: 65.4412, accuracy_top-5: 91.9118
2024-04-04 19:38:00,878 - mmcls - INFO - Epoch(val) [172][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.9118
2024-04-04 19:38:13,777 - mmcls - INFO - Epoch(val) [173][3]	accuracy_top-1: 63.9706, accuracy_top-5: 90.4412
2024-04-04 19:38:24,311 - mmcls - INFO - Epoch(val) [174][3]	accuracy_top-1: 63.9706, accuracy_top-5: 91.1765
2024-04-04 19:38:35,311 - mmcls - INFO - Epoch(val) [175][3]	accuracy_top-1: 63.2353, accuracy_top-5: 91.9118
2024-04-04 19:38:45,796 - mmcls - INFO - Epoch(val) [176][3]	accuracy_top-1: 65.4412, accuracy_top-5: 89.7059
2024-04-04 19:38:56,147 - mmcls - INFO - Epoch(val) [177][3]	accuracy_top-1: 65.4412, accuracy_top-5: 92.6471
2024-04-04 19:39:06,784 - mmcls - INFO - Epoch(val) [178][3]	accuracy_top-1: 63.9706, accuracy_top-5: 91.9118
2024-04-04 19:39:19,341 - mmcls - INFO - Epoch(val) [179][3]	accuracy_top-1: 65.4412, accuracy_top-5: 90.4412
2024-04-04 19:39:29,695 - mmcls - INFO - Epoch(val) [180][3]	accuracy_top-1: 66.1765, accuracy_top-5: 91.9118
2024-04-04 19:39:40,283 - mmcls - INFO - Epoch(val) [181][3]	accuracy_top-1: 64.7059, accuracy_top-5: 92.6471
2024-04-04 19:39:50,935 - mmcls - INFO - Epoch(val) [182][3]	accuracy_top-1: 63.2353, accuracy_top-5: 91.1765
2024-04-04 19:40:02,207 - mmcls - INFO - Epoch(val) [183][3]	accuracy_top-1: 65.4412, accuracy_top-5: 91.9118
2024-04-04 19:40:12,751 - mmcls - INFO - Epoch(val) [184][3]	accuracy_top-1: 63.9706, accuracy_top-5: 91.9118
2024-04-04 19:40:23,565 - mmcls - INFO - Epoch(val) [185][3]	accuracy_top-1: 66.1765, accuracy_top-5: 89.7059
2024-04-04 19:40:34,130 - mmcls - INFO - Epoch(val) [186][3]	accuracy_top-1: 64.7059, accuracy_top-5: 91.1765
2024-04-04 19:40:44,903 - mmcls - INFO - Epoch(val) [187][3]	accuracy_top-1: 64.7059, accuracy_top-5: 92.6471
2024-04-04 19:40:55,442 - mmcls - INFO - Epoch(val) [188][3]	accuracy_top-1: 63.9706, accuracy_top-5: 91.1765
2024-04-04 19:41:06,711 - mmcls - INFO - Epoch(val) [189][3]	accuracy_top-1: 64.7059, accuracy_top-5: 90.4412
2024-04-04 19:41:17,544 - mmcls - INFO - Epoch(val) [190][3]	accuracy_top-1: 65.4412, accuracy_top-5: 90.4412
2024-04-04 19:41:28,126 - mmcls - INFO - Epoch(val) [191][3]	accuracy_top-1: 64.7059, accuracy_top-5: 91.1765
2024-04-04 19:41:38,642 - mmcls - INFO - Epoch(val) [192][3]	accuracy_top-1: 65.4412, accuracy_top-5: 91.1765
2024-04-04 19:41:49,184 - mmcls - INFO - Epoch(val) [193][3]	accuracy_top-1: 64.7059, accuracy_top-5: 91.9118
2024-04-04 19:41:59,871 - mmcls - INFO - Epoch(val) [194][3]	accuracy_top-1: 63.9706, accuracy_top-5: 90.4412
2024-04-04 19:42:10,844 - mmcls - INFO - Epoch(val) [195][3]	accuracy_top-1: 66.1765, accuracy_top-5: 92.6471
2024-04-04 19:42:22,135 - mmcls - INFO - Epoch(val) [196][3]	accuracy_top-1: 65.4412, accuracy_top-5: 90.4412
2024-04-04 19:42:32,758 - mmcls - INFO - Epoch(val) [197][3]	accuracy_top-1: 63.9706, accuracy_top-5: 90.4412
2024-04-04 19:42:43,700 - mmcls - INFO - Epoch(val) [198][3]	accuracy_top-1: 63.9706, accuracy_top-5: 90.4412
2024-04-04 19:42:53,919 - mmcls - INFO - Epoch(val) [199][3]	accuracy_top-1: 64.7059, accuracy_top-5: 90.4412
2024-04-04 19:43:03,056 - mmcls - INFO - Saving checkpoint at 200 epochs
2024-04-04 19:43:05,491 - mmcls - INFO - Epoch(val) [200][3]	accuracy_top-1: 63.9706, accuracy_top-5: 90.4412
