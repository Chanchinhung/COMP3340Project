2024-04-04 09:07:07,646 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: n/a
MMCV CUDA Compiler: n/a
MMClassification: 0.15.0+96ebba7
------------------------------------------------------------

2024-04-04 09:07:07,646 - mmcls - INFO - Distributed training: False
2024-04-04 09:07:07,794 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='InceptionV3', num_classes=17, aux_logits=False),
    neck=None,
    head=dict(
        type='ClsHead', loss=dict(type='CrossEntropyLoss', loss_weight=1.0)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=16,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/test',
        ann_file='data/flowers/meta/test.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=200)
checkpoint_config = dict(interval=100)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/inception_v3/inception_v3_flowers_bs16_lr0.1'
gpu_ids = range(0, 1)

2024-04-04 09:07:08,059 - mmcls - INFO - initialize InceptionV3 with init_cfg [{'type': 'TruncNormal', 'layer': ['Conv2d', 'Linear'], 'std': 0.1}, {'type': 'Constant', 'layer': 'BatchNorm2d', 'val': 1}]
Name of parameter - Initialization information

backbone.Conv2d_1a_3x3.conv.weight - torch.Size([32, 3, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_1a_3x3.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_1a_3x3.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_2a_3x3.conv.weight - torch.Size([32, 32, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_2a_3x3.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_2a_3x3.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_2b_3x3.conv.weight - torch.Size([64, 32, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_2b_3x3.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_2b_3x3.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_3b_1x1.conv.weight - torch.Size([80, 64, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_3b_1x1.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_3b_1x1.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_4a_3x3.conv.weight - torch.Size([192, 80, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Conv2d_4a_3x3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Conv2d_4a_3x3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch1x1.conv.weight - torch.Size([64, 192, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch5x5_1.conv.weight - torch.Size([48, 192, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch5x5_1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch5x5_1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch5x5_2.conv.weight - torch.Size([64, 48, 5, 5]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch5x5_2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch5x5_2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_1.conv.weight - torch.Size([64, 192, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch3x3dbl_1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_2.conv.weight - torch.Size([96, 64, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch3x3dbl_2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_3.conv.weight - torch.Size([96, 96, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch3x3dbl_3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch3x3dbl_3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch_pool.conv.weight - torch.Size([32, 192, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5b.branch_pool.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5b.branch_pool.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch1x1.conv.weight - torch.Size([64, 256, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch5x5_1.conv.weight - torch.Size([48, 256, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch5x5_1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch5x5_1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch5x5_2.conv.weight - torch.Size([64, 48, 5, 5]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch5x5_2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch5x5_2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_1.conv.weight - torch.Size([64, 256, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch3x3dbl_1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_2.conv.weight - torch.Size([96, 64, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch3x3dbl_2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_3.conv.weight - torch.Size([96, 96, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch3x3dbl_3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch3x3dbl_3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch_pool.conv.weight - torch.Size([64, 256, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5c.branch_pool.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5c.branch_pool.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch1x1.conv.weight - torch.Size([64, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch1x1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch1x1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch5x5_1.conv.weight - torch.Size([48, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch5x5_1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch5x5_1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch5x5_2.conv.weight - torch.Size([64, 48, 5, 5]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch5x5_2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch5x5_2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_1.conv.weight - torch.Size([64, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch3x3dbl_1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_2.conv.weight - torch.Size([96, 64, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch3x3dbl_2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_3.conv.weight - torch.Size([96, 96, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch3x3dbl_3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch3x3dbl_3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch_pool.conv.weight - torch.Size([64, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_5d.branch_pool.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_5d.branch_pool.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3.conv.weight - torch.Size([384, 288, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6a.branch3x3.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_1.conv.weight - torch.Size([64, 288, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6a.branch3x3dbl_1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_2.conv.weight - torch.Size([96, 64, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6a.branch3x3dbl_2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_3.conv.weight - torch.Size([96, 96, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6a.branch3x3dbl_3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6a.branch3x3dbl_3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch1x1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch1x1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch1x1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_1.conv.weight - torch.Size([128, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7_1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_2.conv.weight - torch.Size([128, 128, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7_2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_3.conv.weight - torch.Size([192, 128, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_1.conv.weight - torch.Size([128, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_2.conv.weight - torch.Size([128, 128, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_3.conv.weight - torch.Size([128, 128, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_3.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_3.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_4.conv.weight - torch.Size([128, 128, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_4.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_4.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_5.conv.weight - torch.Size([192, 128, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch7x7dbl_5.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch7x7dbl_5.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch_pool.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6b.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6b.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch1x1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch1x1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch1x1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_1.conv.weight - torch.Size([160, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7_1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_2.conv.weight - torch.Size([160, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7_2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_3.conv.weight - torch.Size([192, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_1.conv.weight - torch.Size([160, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_2.conv.weight - torch.Size([160, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_3.conv.weight - torch.Size([160, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_3.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_3.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_4.conv.weight - torch.Size([160, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_4.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_4.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_5.conv.weight - torch.Size([192, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch7x7dbl_5.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch7x7dbl_5.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch_pool.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6c.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6c.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch1x1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch1x1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch1x1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_1.conv.weight - torch.Size([160, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7_1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_2.conv.weight - torch.Size([160, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7_2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_3.conv.weight - torch.Size([192, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_1.conv.weight - torch.Size([160, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_2.conv.weight - torch.Size([160, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_3.conv.weight - torch.Size([160, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_3.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_3.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_4.conv.weight - torch.Size([160, 160, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_4.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_4.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_5.conv.weight - torch.Size([192, 160, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch7x7dbl_5.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch7x7dbl_5.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch_pool.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6d.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6d.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch1x1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch1x1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch1x1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7_1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_2.conv.weight - torch.Size([192, 192, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7_2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_3.conv.weight - torch.Size([192, 192, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_2.conv.weight - torch.Size([192, 192, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_3.conv.weight - torch.Size([192, 192, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_4.conv.weight - torch.Size([192, 192, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_4.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_4.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_5.conv.weight - torch.Size([192, 192, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch7x7dbl_5.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch7x7dbl_5.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch_pool.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_6e.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_6e.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch3x3_1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch3x3_1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch3x3_1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch3x3_2.conv.weight - torch.Size([320, 192, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch3x3_2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch3x3_2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_1.conv.weight - torch.Size([192, 768, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch7x7x3_1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_2.conv.weight - torch.Size([192, 192, 1, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch7x7x3_2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_3.conv.weight - torch.Size([192, 192, 7, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch7x7x3_3.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_3.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_4.conv.weight - torch.Size([192, 192, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7a.branch7x7x3_4.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7a.branch7x7x3_4.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch1x1.conv.weight - torch.Size([320, 1280, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch1x1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch1x1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_1.conv.weight - torch.Size([384, 1280, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3_1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_2a.conv.weight - torch.Size([384, 384, 1, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3_2a.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_2a.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_2b.conv.weight - torch.Size([384, 384, 3, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3_2b.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3_2b.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_1.conv.weight - torch.Size([448, 1280, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3dbl_1.bn.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_1.bn.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_2.conv.weight - torch.Size([384, 448, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3dbl_2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_3a.conv.weight - torch.Size([384, 384, 1, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3dbl_3a.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_3a.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_3b.conv.weight - torch.Size([384, 384, 3, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch3x3dbl_3b.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch3x3dbl_3b.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch_pool.conv.weight - torch.Size([192, 1280, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7b.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7b.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch1x1.conv.weight - torch.Size([320, 2048, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch1x1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch1x1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_1.conv.weight - torch.Size([384, 2048, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3_1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_2a.conv.weight - torch.Size([384, 384, 1, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3_2a.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_2a.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_2b.conv.weight - torch.Size([384, 384, 3, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3_2b.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3_2b.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_1.conv.weight - torch.Size([448, 2048, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3dbl_1.bn.weight - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_1.bn.bias - torch.Size([448]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_2.conv.weight - torch.Size([384, 448, 3, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3dbl_2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_3a.conv.weight - torch.Size([384, 384, 1, 3]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3dbl_3a.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_3a.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_3b.conv.weight - torch.Size([384, 384, 3, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch3x3dbl_3b.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch3x3dbl_3b.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch_pool.conv.weight - torch.Size([192, 2048, 1, 1]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.Mixed_7c.branch_pool.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.Mixed_7c.branch_pool.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.fc.weight - torch.Size([17, 2048]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 

backbone.fc.bias - torch.Size([17]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.1, bias=0 
2024-04-04 09:07:12,141 - mmcls - INFO - Start running, host: ambr0se@gpu2-comp-111, work_dir: /userhome/cs2/ambr0se/COMP3340Project/CNN_Image_Classification_Code/output/inception_v3/inception_v3_flowers_bs16_lr0.1
2024-04-04 09:07:12,142 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-04-04 09:07:12,142 - mmcls - INFO - workflow: [('train', 1)], max: 200 epochs
2024-04-04 09:07:12,142 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/ambr0se/COMP3340Project/CNN_Image_Classification_Code/output/inception_v3/inception_v3_flowers_bs16_lr0.1 by HardDiskBackend.
2024-04-04 09:07:24,500 - mmcls - INFO - Epoch(val) [1][9]	accuracy_top-1: 7.3529, accuracy_top-5: 33.8235
2024-04-04 09:07:36,872 - mmcls - INFO - Epoch(val) [2][9]	accuracy_top-1: 6.6176, accuracy_top-5: 30.1471
2024-04-04 09:07:49,937 - mmcls - INFO - Epoch(val) [3][9]	accuracy_top-1: 8.0882, accuracy_top-5: 32.3529
2024-04-04 09:08:03,467 - mmcls - INFO - Epoch(val) [4][9]	accuracy_top-1: 12.5000, accuracy_top-5: 55.1471
2024-04-04 09:08:15,924 - mmcls - INFO - Epoch(val) [5][9]	accuracy_top-1: 12.5000, accuracy_top-5: 51.4706
2024-04-04 09:08:28,092 - mmcls - INFO - Epoch(val) [6][9]	accuracy_top-1: 16.9118, accuracy_top-5: 61.7647
2024-04-04 09:08:40,501 - mmcls - INFO - Epoch(val) [7][9]	accuracy_top-1: 11.7647, accuracy_top-5: 55.1471
2024-04-04 09:08:52,684 - mmcls - INFO - Epoch(val) [8][9]	accuracy_top-1: 14.7059, accuracy_top-5: 61.7647
2024-04-04 09:09:07,381 - mmcls - INFO - Epoch(val) [9][9]	accuracy_top-1: 13.2353, accuracy_top-5: 60.2941
2024-04-04 09:09:20,914 - mmcls - INFO - Epoch(val) [10][9]	accuracy_top-1: 11.0294, accuracy_top-5: 54.4118
2024-04-04 09:09:33,254 - mmcls - INFO - Epoch(val) [11][9]	accuracy_top-1: 19.1176, accuracy_top-5: 63.9706
2024-04-04 09:09:46,354 - mmcls - INFO - Epoch(val) [12][9]	accuracy_top-1: 16.9118, accuracy_top-5: 63.9706
2024-04-04 09:09:58,344 - mmcls - INFO - Epoch(val) [13][9]	accuracy_top-1: 16.9118, accuracy_top-5: 55.1471
2024-04-04 09:10:10,983 - mmcls - INFO - Epoch(val) [14][9]	accuracy_top-1: 19.8529, accuracy_top-5: 63.2353
2024-04-04 09:10:22,715 - mmcls - INFO - Epoch(val) [15][9]	accuracy_top-1: 15.4412, accuracy_top-5: 67.6471
2024-04-04 09:10:35,163 - mmcls - INFO - Epoch(val) [16][9]	accuracy_top-1: 15.4412, accuracy_top-5: 69.8529
2024-04-04 09:10:48,346 - mmcls - INFO - Epoch(val) [17][9]	accuracy_top-1: 16.1765, accuracy_top-5: 63.2353
2024-04-04 09:11:01,650 - mmcls - INFO - Epoch(val) [18][9]	accuracy_top-1: 17.6471, accuracy_top-5: 67.6471
2024-04-04 09:11:16,222 - mmcls - INFO - Epoch(val) [19][9]	accuracy_top-1: 18.3824, accuracy_top-5: 65.4412
2024-04-04 09:11:31,415 - mmcls - INFO - Epoch(val) [20][9]	accuracy_top-1: 22.0588, accuracy_top-5: 75.7353
2024-04-04 09:11:43,845 - mmcls - INFO - Epoch(val) [21][9]	accuracy_top-1: 25.7353, accuracy_top-5: 71.3235
2024-04-04 09:11:57,144 - mmcls - INFO - Epoch(val) [22][9]	accuracy_top-1: 19.1176, accuracy_top-5: 76.4706
2024-04-04 09:12:09,660 - mmcls - INFO - Epoch(val) [23][9]	accuracy_top-1: 22.7941, accuracy_top-5: 76.4706
2024-04-04 09:12:22,775 - mmcls - INFO - Epoch(val) [24][9]	accuracy_top-1: 25.0000, accuracy_top-5: 72.7941
2024-04-04 09:12:35,040 - mmcls - INFO - Epoch(val) [25][9]	accuracy_top-1: 27.2059, accuracy_top-5: 74.2647
2024-04-04 09:12:47,206 - mmcls - INFO - Epoch(val) [26][9]	accuracy_top-1: 25.7353, accuracy_top-5: 78.6765
2024-04-04 09:12:59,641 - mmcls - INFO - Epoch(val) [27][9]	accuracy_top-1: 22.0588, accuracy_top-5: 63.2353
2024-04-04 09:13:12,231 - mmcls - INFO - Epoch(val) [28][9]	accuracy_top-1: 26.4706, accuracy_top-5: 77.2059
2024-04-04 09:13:24,946 - mmcls - INFO - Epoch(val) [29][9]	accuracy_top-1: 24.2647, accuracy_top-5: 76.4706
2024-04-04 09:13:38,914 - mmcls - INFO - Epoch(val) [30][9]	accuracy_top-1: 26.4706, accuracy_top-5: 77.2059
2024-04-04 09:13:51,643 - mmcls - INFO - Epoch(val) [31][9]	accuracy_top-1: 30.8824, accuracy_top-5: 75.7353
2024-04-04 09:14:04,167 - mmcls - INFO - Epoch(val) [32][9]	accuracy_top-1: 30.8824, accuracy_top-5: 80.1471
2024-04-04 09:14:16,657 - mmcls - INFO - Epoch(val) [33][9]	accuracy_top-1: 24.2647, accuracy_top-5: 77.2059
2024-04-04 09:14:28,848 - mmcls - INFO - Epoch(val) [34][9]	accuracy_top-1: 25.7353, accuracy_top-5: 80.1471
2024-04-04 09:14:41,199 - mmcls - INFO - Epoch(val) [35][9]	accuracy_top-1: 33.0882, accuracy_top-5: 77.2059
2024-04-04 09:14:53,690 - mmcls - INFO - Epoch(val) [36][9]	accuracy_top-1: 26.4706, accuracy_top-5: 82.3529
2024-04-04 09:15:05,567 - mmcls - INFO - Epoch(val) [37][9]	accuracy_top-1: 33.0882, accuracy_top-5: 83.0882
2024-04-04 09:15:17,793 - mmcls - INFO - Epoch(val) [38][9]	accuracy_top-1: 36.0294, accuracy_top-5: 81.6176
2024-04-04 09:15:29,612 - mmcls - INFO - Epoch(val) [39][9]	accuracy_top-1: 31.6176, accuracy_top-5: 86.7647
2024-04-04 09:15:42,025 - mmcls - INFO - Epoch(val) [40][9]	accuracy_top-1: 27.9412, accuracy_top-5: 84.5588
2024-04-04 09:15:54,286 - mmcls - INFO - Epoch(val) [41][9]	accuracy_top-1: 31.6176, accuracy_top-5: 79.4118
2024-04-04 09:16:06,485 - mmcls - INFO - Epoch(val) [42][9]	accuracy_top-1: 38.9706, accuracy_top-5: 90.4412
2024-04-04 09:16:18,505 - mmcls - INFO - Epoch(val) [43][9]	accuracy_top-1: 34.5588, accuracy_top-5: 83.0882
2024-04-04 09:16:30,809 - mmcls - INFO - Epoch(val) [44][9]	accuracy_top-1: 41.9118, accuracy_top-5: 85.2941
2024-04-04 09:16:43,371 - mmcls - INFO - Epoch(val) [45][9]	accuracy_top-1: 37.5000, accuracy_top-5: 85.2941
2024-04-04 09:16:55,921 - mmcls - INFO - Epoch(val) [46][9]	accuracy_top-1: 40.4412, accuracy_top-5: 91.9118
2024-04-04 09:17:08,372 - mmcls - INFO - Epoch(val) [47][9]	accuracy_top-1: 40.4412, accuracy_top-5: 85.2941
2024-04-04 09:17:20,864 - mmcls - INFO - Epoch(val) [48][9]	accuracy_top-1: 40.4412, accuracy_top-5: 86.7647
2024-04-04 09:17:34,309 - mmcls - INFO - Epoch(val) [49][9]	accuracy_top-1: 48.5294, accuracy_top-5: 90.4412
2024-04-04 09:17:46,566 - mmcls - INFO - Epoch(val) [50][9]	accuracy_top-1: 45.5882, accuracy_top-5: 90.4412
2024-04-04 09:17:59,025 - mmcls - INFO - Epoch(val) [51][9]	accuracy_top-1: 49.2647, accuracy_top-5: 91.9118
2024-04-04 09:18:11,098 - mmcls - INFO - Epoch(val) [52][9]	accuracy_top-1: 47.0588, accuracy_top-5: 92.6471
2024-04-04 09:18:24,162 - mmcls - INFO - Epoch(val) [53][9]	accuracy_top-1: 57.3529, accuracy_top-5: 97.0588
2024-04-04 09:18:37,813 - mmcls - INFO - Epoch(val) [54][9]	accuracy_top-1: 49.2647, accuracy_top-5: 88.2353
2024-04-04 09:18:50,294 - mmcls - INFO - Epoch(val) [55][9]	accuracy_top-1: 42.6471, accuracy_top-5: 93.3824
2024-04-04 09:19:02,860 - mmcls - INFO - Epoch(val) [56][9]	accuracy_top-1: 53.6765, accuracy_top-5: 88.9706
2024-04-04 09:19:14,085 - mmcls - INFO - Epoch(val) [57][9]	accuracy_top-1: 53.6765, accuracy_top-5: 95.5882
2024-04-04 09:19:26,737 - mmcls - INFO - Epoch(val) [58][9]	accuracy_top-1: 57.3529, accuracy_top-5: 91.9118
2024-04-04 09:19:39,571 - mmcls - INFO - Epoch(val) [59][9]	accuracy_top-1: 61.7647, accuracy_top-5: 91.1765
2024-04-04 09:19:51,113 - mmcls - INFO - Epoch(val) [60][9]	accuracy_top-1: 52.9412, accuracy_top-5: 97.0588
2024-04-04 09:20:04,834 - mmcls - INFO - Epoch(val) [61][9]	accuracy_top-1: 51.4706, accuracy_top-5: 93.3824
2024-04-04 09:20:17,949 - mmcls - INFO - Epoch(val) [62][9]	accuracy_top-1: 55.1471, accuracy_top-5: 91.1765
2024-04-04 09:20:30,127 - mmcls - INFO - Epoch(val) [63][9]	accuracy_top-1: 55.1471, accuracy_top-5: 95.5882
2024-04-04 09:20:43,753 - mmcls - INFO - Epoch(val) [64][9]	accuracy_top-1: 57.3529, accuracy_top-5: 91.9118
2024-04-04 09:20:56,224 - mmcls - INFO - Epoch(val) [65][9]	accuracy_top-1: 60.2941, accuracy_top-5: 94.8529
2024-04-04 09:21:08,370 - mmcls - INFO - Epoch(val) [66][9]	accuracy_top-1: 55.8824, accuracy_top-5: 92.6471
2024-04-04 09:21:20,690 - mmcls - INFO - Epoch(val) [67][9]	accuracy_top-1: 55.8824, accuracy_top-5: 94.8529
2024-04-04 09:21:32,752 - mmcls - INFO - Epoch(val) [68][9]	accuracy_top-1: 62.5000, accuracy_top-5: 94.8529
2024-04-04 09:21:45,269 - mmcls - INFO - Epoch(val) [69][9]	accuracy_top-1: 59.5588, accuracy_top-5: 93.3824
2024-04-04 09:21:58,678 - mmcls - INFO - Epoch(val) [70][9]	accuracy_top-1: 66.1765, accuracy_top-5: 96.3235
2024-04-04 09:22:11,923 - mmcls - INFO - Epoch(val) [71][9]	accuracy_top-1: 61.7647, accuracy_top-5: 97.0588
2024-04-04 09:22:24,003 - mmcls - INFO - Epoch(val) [72][9]	accuracy_top-1: 55.8824, accuracy_top-5: 96.3235
2024-04-04 09:22:36,520 - mmcls - INFO - Epoch(val) [73][9]	accuracy_top-1: 62.5000, accuracy_top-5: 92.6471
2024-04-04 09:22:48,966 - mmcls - INFO - Epoch(val) [74][9]	accuracy_top-1: 58.0882, accuracy_top-5: 90.4412
2024-04-04 09:23:00,435 - mmcls - INFO - Epoch(val) [75][9]	accuracy_top-1: 60.2941, accuracy_top-5: 94.1176
2024-04-04 09:23:13,822 - mmcls - INFO - Epoch(val) [76][9]	accuracy_top-1: 64.7059, accuracy_top-5: 91.9118
2024-04-04 09:23:27,314 - mmcls - INFO - Epoch(val) [77][9]	accuracy_top-1: 56.6176, accuracy_top-5: 95.5882
2024-04-04 09:23:40,602 - mmcls - INFO - Epoch(val) [78][9]	accuracy_top-1: 66.9118, accuracy_top-5: 95.5882
2024-04-04 09:23:54,199 - mmcls - INFO - Epoch(val) [79][9]	accuracy_top-1: 53.6765, accuracy_top-5: 91.1765
2024-04-04 09:24:06,634 - mmcls - INFO - Epoch(val) [80][9]	accuracy_top-1: 66.9118, accuracy_top-5: 94.8529
2024-04-04 09:24:18,434 - mmcls - INFO - Epoch(val) [81][9]	accuracy_top-1: 68.3824, accuracy_top-5: 94.1176
2024-04-04 09:24:29,996 - mmcls - INFO - Epoch(val) [82][9]	accuracy_top-1: 62.5000, accuracy_top-5: 97.7941
2024-04-04 09:24:41,951 - mmcls - INFO - Epoch(val) [83][9]	accuracy_top-1: 66.1765, accuracy_top-5: 96.3235
2024-04-04 09:24:54,485 - mmcls - INFO - Epoch(val) [84][9]	accuracy_top-1: 63.9706, accuracy_top-5: 93.3824
2024-04-04 09:25:06,954 - mmcls - INFO - Epoch(val) [85][9]	accuracy_top-1: 66.1765, accuracy_top-5: 94.8529
2024-04-04 09:25:19,378 - mmcls - INFO - Epoch(val) [86][9]	accuracy_top-1: 66.1765, accuracy_top-5: 93.3824
2024-04-04 09:25:31,235 - mmcls - INFO - Epoch(val) [87][9]	accuracy_top-1: 69.1176, accuracy_top-5: 98.5294
2024-04-04 09:25:43,605 - mmcls - INFO - Epoch(val) [88][9]	accuracy_top-1: 69.8529, accuracy_top-5: 96.3235
2024-04-04 09:25:55,958 - mmcls - INFO - Epoch(val) [89][9]	accuracy_top-1: 66.9118, accuracy_top-5: 95.5882
2024-04-04 09:26:08,396 - mmcls - INFO - Epoch(val) [90][9]	accuracy_top-1: 60.2941, accuracy_top-5: 92.6471
2024-04-04 09:26:20,894 - mmcls - INFO - Epoch(val) [91][9]	accuracy_top-1: 63.9706, accuracy_top-5: 96.3235
2024-04-04 09:26:34,305 - mmcls - INFO - Epoch(val) [92][9]	accuracy_top-1: 65.4412, accuracy_top-5: 97.7941
2024-04-04 09:26:46,580 - mmcls - INFO - Epoch(val) [93][9]	accuracy_top-1: 61.0294, accuracy_top-5: 93.3824
2024-04-04 09:26:58,041 - mmcls - INFO - Epoch(val) [94][9]	accuracy_top-1: 67.6471, accuracy_top-5: 96.3235
2024-04-04 09:27:10,167 - mmcls - INFO - Epoch(val) [95][9]	accuracy_top-1: 69.1176, accuracy_top-5: 97.7941
2024-04-04 09:27:23,076 - mmcls - INFO - Epoch(val) [96][9]	accuracy_top-1: 64.7059, accuracy_top-5: 97.0588
2024-04-04 09:27:36,703 - mmcls - INFO - Epoch(val) [97][9]	accuracy_top-1: 69.8529, accuracy_top-5: 95.5882
2024-04-04 09:27:50,327 - mmcls - INFO - Epoch(val) [98][9]	accuracy_top-1: 61.7647, accuracy_top-5: 88.9706
2024-04-04 09:28:02,605 - mmcls - INFO - Epoch(val) [99][9]	accuracy_top-1: 63.2353, accuracy_top-5: 95.5882
2024-04-04 09:28:13,619 - mmcls - INFO - Saving checkpoint at 100 epochs
2024-04-04 09:28:16,064 - mmcls - INFO - Epoch(val) [100][9]	accuracy_top-1: 68.3824, accuracy_top-5: 96.3235
2024-04-04 09:28:28,804 - mmcls - INFO - Epoch(val) [101][9]	accuracy_top-1: 72.0588, accuracy_top-5: 96.3235
2024-04-04 09:28:41,285 - mmcls - INFO - Epoch(val) [102][9]	accuracy_top-1: 72.7941, accuracy_top-5: 98.5294
2024-04-04 09:28:53,528 - mmcls - INFO - Epoch(val) [103][9]	accuracy_top-1: 72.7941, accuracy_top-5: 97.0588
2024-04-04 09:29:06,030 - mmcls - INFO - Epoch(val) [104][9]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 09:29:17,681 - mmcls - INFO - Epoch(val) [105][9]	accuracy_top-1: 77.2059, accuracy_top-5: 97.7941
2024-04-04 09:29:30,120 - mmcls - INFO - Epoch(val) [106][9]	accuracy_top-1: 77.2059, accuracy_top-5: 97.7941
2024-04-04 09:29:43,419 - mmcls - INFO - Epoch(val) [107][9]	accuracy_top-1: 78.6765, accuracy_top-5: 98.5294
2024-04-04 09:29:55,116 - mmcls - INFO - Epoch(val) [108][9]	accuracy_top-1: 77.2059, accuracy_top-5: 97.0588
2024-04-04 09:30:08,592 - mmcls - INFO - Epoch(val) [109][9]	accuracy_top-1: 76.4706, accuracy_top-5: 98.5294
2024-04-04 09:30:20,200 - mmcls - INFO - Epoch(val) [110][9]	accuracy_top-1: 81.6176, accuracy_top-5: 98.5294
2024-04-04 09:30:32,242 - mmcls - INFO - Epoch(val) [111][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-04-04 09:30:44,720 - mmcls - INFO - Epoch(val) [112][9]	accuracy_top-1: 81.6176, accuracy_top-5: 99.2647
2024-04-04 09:30:57,406 - mmcls - INFO - Epoch(val) [113][9]	accuracy_top-1: 80.1471, accuracy_top-5: 97.7941
2024-04-04 09:31:10,382 - mmcls - INFO - Epoch(val) [114][9]	accuracy_top-1: 77.9412, accuracy_top-5: 98.5294
2024-04-04 09:31:23,350 - mmcls - INFO - Epoch(val) [115][9]	accuracy_top-1: 78.6765, accuracy_top-5: 98.5294
2024-04-04 09:31:35,697 - mmcls - INFO - Epoch(val) [116][9]	accuracy_top-1: 77.9412, accuracy_top-5: 97.7941
2024-04-04 09:31:48,006 - mmcls - INFO - Epoch(val) [117][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-04-04 09:32:01,830 - mmcls - INFO - Epoch(val) [118][9]	accuracy_top-1: 78.6765, accuracy_top-5: 99.2647
2024-04-04 09:32:14,710 - mmcls - INFO - Epoch(val) [119][9]	accuracy_top-1: 77.9412, accuracy_top-5: 99.2647
2024-04-04 09:32:27,308 - mmcls - INFO - Epoch(val) [120][9]	accuracy_top-1: 78.6765, accuracy_top-5: 98.5294
2024-04-04 09:32:40,039 - mmcls - INFO - Epoch(val) [121][9]	accuracy_top-1: 78.6765, accuracy_top-5: 99.2647
2024-04-04 09:32:52,643 - mmcls - INFO - Epoch(val) [122][9]	accuracy_top-1: 76.4706, accuracy_top-5: 97.7941
2024-04-04 09:33:05,332 - mmcls - INFO - Epoch(val) [123][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:33:18,074 - mmcls - INFO - Epoch(val) [124][9]	accuracy_top-1: 78.6765, accuracy_top-5: 98.5294
2024-04-04 09:33:30,327 - mmcls - INFO - Epoch(val) [125][9]	accuracy_top-1: 80.8824, accuracy_top-5: 99.2647
2024-04-04 09:33:43,772 - mmcls - INFO - Epoch(val) [126][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-04-04 09:33:56,435 - mmcls - INFO - Epoch(val) [127][9]	accuracy_top-1: 78.6765, accuracy_top-5: 98.5294
2024-04-04 09:34:09,227 - mmcls - INFO - Epoch(val) [128][9]	accuracy_top-1: 75.0000, accuracy_top-5: 98.5294
2024-04-04 09:34:21,543 - mmcls - INFO - Epoch(val) [129][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-04-04 09:34:34,066 - mmcls - INFO - Epoch(val) [130][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-04-04 09:34:46,498 - mmcls - INFO - Epoch(val) [131][9]	accuracy_top-1: 77.9412, accuracy_top-5: 99.2647
2024-04-04 09:34:58,681 - mmcls - INFO - Epoch(val) [132][9]	accuracy_top-1: 77.2059, accuracy_top-5: 99.2647
2024-04-04 09:35:10,911 - mmcls - INFO - Epoch(val) [133][9]	accuracy_top-1: 77.9412, accuracy_top-5: 99.2647
2024-04-04 09:35:23,425 - mmcls - INFO - Epoch(val) [134][9]	accuracy_top-1: 81.6176, accuracy_top-5: 99.2647
2024-04-04 09:35:37,268 - mmcls - INFO - Epoch(val) [135][9]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 09:35:50,231 - mmcls - INFO - Epoch(val) [136][9]	accuracy_top-1: 78.6765, accuracy_top-5: 99.2647
2024-04-04 09:36:02,673 - mmcls - INFO - Epoch(val) [137][9]	accuracy_top-1: 78.6765, accuracy_top-5: 97.7941
2024-04-04 09:36:14,840 - mmcls - INFO - Epoch(val) [138][9]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 09:36:27,919 - mmcls - INFO - Epoch(val) [139][9]	accuracy_top-1: 80.8824, accuracy_top-5: 98.5294
2024-04-04 09:36:40,028 - mmcls - INFO - Epoch(val) [140][9]	accuracy_top-1: 80.8824, accuracy_top-5: 99.2647
2024-04-04 09:36:52,551 - mmcls - INFO - Epoch(val) [141][9]	accuracy_top-1: 78.6765, accuracy_top-5: 99.2647
2024-04-04 09:37:05,076 - mmcls - INFO - Epoch(val) [142][9]	accuracy_top-1: 77.9412, accuracy_top-5: 99.2647
2024-04-04 09:37:17,228 - mmcls - INFO - Epoch(val) [143][9]	accuracy_top-1: 78.6765, accuracy_top-5: 99.2647
2024-04-04 09:37:29,124 - mmcls - INFO - Epoch(val) [144][9]	accuracy_top-1: 76.4706, accuracy_top-5: 99.2647
2024-04-04 09:37:41,217 - mmcls - INFO - Epoch(val) [145][9]	accuracy_top-1: 76.4706, accuracy_top-5: 99.2647
2024-04-04 09:37:54,317 - mmcls - INFO - Epoch(val) [146][9]	accuracy_top-1: 75.7353, accuracy_top-5: 98.5294
2024-04-04 09:38:07,088 - mmcls - INFO - Epoch(val) [147][9]	accuracy_top-1: 79.4118, accuracy_top-5: 97.7941
2024-04-04 09:38:18,642 - mmcls - INFO - Epoch(val) [148][9]	accuracy_top-1: 75.7353, accuracy_top-5: 99.2647
2024-04-04 09:38:30,911 - mmcls - INFO - Epoch(val) [149][9]	accuracy_top-1: 77.9412, accuracy_top-5: 98.5294
2024-04-04 09:38:43,510 - mmcls - INFO - Epoch(val) [150][9]	accuracy_top-1: 77.9412, accuracy_top-5: 97.7941
2024-04-04 09:38:56,821 - mmcls - INFO - Epoch(val) [151][9]	accuracy_top-1: 77.2059, accuracy_top-5: 97.7941
2024-04-04 09:39:09,888 - mmcls - INFO - Epoch(val) [152][9]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 09:39:23,366 - mmcls - INFO - Epoch(val) [153][9]	accuracy_top-1: 76.4706, accuracy_top-5: 97.7941
2024-04-04 09:39:36,008 - mmcls - INFO - Epoch(val) [154][9]	accuracy_top-1: 77.9412, accuracy_top-5: 99.2647
2024-04-04 09:39:48,875 - mmcls - INFO - Epoch(val) [155][9]	accuracy_top-1: 77.2059, accuracy_top-5: 99.2647
2024-04-04 09:40:02,008 - mmcls - INFO - Epoch(val) [156][9]	accuracy_top-1: 78.6765, accuracy_top-5: 99.2647
2024-04-04 09:40:15,666 - mmcls - INFO - Epoch(val) [157][9]	accuracy_top-1: 76.4706, accuracy_top-5: 97.7941
2024-04-04 09:40:28,161 - mmcls - INFO - Epoch(val) [158][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:40:41,900 - mmcls - INFO - Epoch(val) [159][9]	accuracy_top-1: 79.4118, accuracy_top-5: 97.7941
2024-04-04 09:40:54,186 - mmcls - INFO - Epoch(val) [160][9]	accuracy_top-1: 78.6765, accuracy_top-5: 99.2647
2024-04-04 09:41:06,836 - mmcls - INFO - Epoch(val) [161][9]	accuracy_top-1: 81.6176, accuracy_top-5: 98.5294
2024-04-04 09:41:19,200 - mmcls - INFO - Epoch(val) [162][9]	accuracy_top-1: 80.8824, accuracy_top-5: 99.2647
2024-04-04 09:41:32,395 - mmcls - INFO - Epoch(val) [163][9]	accuracy_top-1: 78.6765, accuracy_top-5: 99.2647
2024-04-04 09:41:44,711 - mmcls - INFO - Epoch(val) [164][9]	accuracy_top-1: 77.2059, accuracy_top-5: 98.5294
2024-04-04 09:41:57,386 - mmcls - INFO - Epoch(val) [165][9]	accuracy_top-1: 80.1471, accuracy_top-5: 98.5294
2024-04-04 09:42:09,526 - mmcls - INFO - Epoch(val) [166][9]	accuracy_top-1: 78.6765, accuracy_top-5: 99.2647
2024-04-04 09:42:22,183 - mmcls - INFO - Epoch(val) [167][9]	accuracy_top-1: 78.6765, accuracy_top-5: 98.5294
2024-04-04 09:42:35,811 - mmcls - INFO - Epoch(val) [168][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:42:48,829 - mmcls - INFO - Epoch(val) [169][9]	accuracy_top-1: 78.6765, accuracy_top-5: 99.2647
2024-04-04 09:43:01,126 - mmcls - INFO - Epoch(val) [170][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:43:13,309 - mmcls - INFO - Epoch(val) [171][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:43:25,331 - mmcls - INFO - Epoch(val) [172][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:43:38,047 - mmcls - INFO - Epoch(val) [173][9]	accuracy_top-1: 80.8824, accuracy_top-5: 99.2647
2024-04-04 09:43:50,447 - mmcls - INFO - Epoch(val) [174][9]	accuracy_top-1: 81.6176, accuracy_top-5: 99.2647
2024-04-04 09:44:02,368 - mmcls - INFO - Epoch(val) [175][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:44:14,554 - mmcls - INFO - Epoch(val) [176][9]	accuracy_top-1: 80.1471, accuracy_top-5: 98.5294
2024-04-04 09:44:26,734 - mmcls - INFO - Epoch(val) [177][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:44:38,507 - mmcls - INFO - Epoch(val) [178][9]	accuracy_top-1: 81.6176, accuracy_top-5: 98.5294
2024-04-04 09:44:50,580 - mmcls - INFO - Epoch(val) [179][9]	accuracy_top-1: 81.6176, accuracy_top-5: 99.2647
2024-04-04 09:45:02,725 - mmcls - INFO - Epoch(val) [180][9]	accuracy_top-1: 80.8824, accuracy_top-5: 99.2647
2024-04-04 09:45:14,359 - mmcls - INFO - Epoch(val) [181][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:45:26,713 - mmcls - INFO - Epoch(val) [182][9]	accuracy_top-1: 81.6176, accuracy_top-5: 99.2647
2024-04-04 09:45:38,872 - mmcls - INFO - Epoch(val) [183][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:45:51,242 - mmcls - INFO - Epoch(val) [184][9]	accuracy_top-1: 80.8824, accuracy_top-5: 98.5294
2024-04-04 09:46:03,139 - mmcls - INFO - Epoch(val) [185][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-04-04 09:46:15,417 - mmcls - INFO - Epoch(val) [186][9]	accuracy_top-1: 80.8824, accuracy_top-5: 98.5294
2024-04-04 09:46:26,334 - mmcls - INFO - Epoch(val) [187][9]	accuracy_top-1: 78.6765, accuracy_top-5: 98.5294
2024-04-04 09:46:39,194 - mmcls - INFO - Epoch(val) [188][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:46:52,770 - mmcls - INFO - Epoch(val) [189][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:47:04,258 - mmcls - INFO - Epoch(val) [190][9]	accuracy_top-1: 80.8824, accuracy_top-5: 98.5294
2024-04-04 09:47:16,541 - mmcls - INFO - Epoch(val) [191][9]	accuracy_top-1: 80.8824, accuracy_top-5: 99.2647
2024-04-04 09:47:28,871 - mmcls - INFO - Epoch(val) [192][9]	accuracy_top-1: 80.8824, accuracy_top-5: 99.2647
2024-04-04 09:47:40,113 - mmcls - INFO - Epoch(val) [193][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:47:53,788 - mmcls - INFO - Epoch(val) [194][9]	accuracy_top-1: 80.8824, accuracy_top-5: 99.2647
2024-04-04 09:48:06,163 - mmcls - INFO - Epoch(val) [195][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-04-04 09:48:18,846 - mmcls - INFO - Epoch(val) [196][9]	accuracy_top-1: 82.3529, accuracy_top-5: 99.2647
2024-04-04 09:48:32,424 - mmcls - INFO - Epoch(val) [197][9]	accuracy_top-1: 79.4118, accuracy_top-5: 99.2647
2024-04-04 09:48:43,474 - mmcls - INFO - Epoch(val) [198][9]	accuracy_top-1: 81.6176, accuracy_top-5: 99.2647
2024-04-04 09:48:55,547 - mmcls - INFO - Epoch(val) [199][9]	accuracy_top-1: 80.1471, accuracy_top-5: 99.2647
2024-04-04 09:49:06,556 - mmcls - INFO - Saving checkpoint at 200 epochs
2024-04-04 09:49:08,820 - mmcls - INFO - Epoch(val) [200][9]	accuracy_top-1: 82.3529, accuracy_top-5: 99.2647
